+ "rustc" "--print" "sysroot"
+ "rustc" "--print" "target-list"
+ RUSTFLAGS="-C opt-level=0 -C debuginfo=2 --sysroot /home/tlee1/.xargo"
+ "cargo" "test" "--target=x86_64-wrs-vxworks" "-vv"
       Fresh cc v1.0.25
       Fresh core v0.0.0 (/home/tlee1/Desktop/rust-fork/rust/src/libcore)
       Fresh build_helper v0.1.0 (/home/tlee1/Desktop/rust-fork/rust/src/build_helper)
       Fresh rand_core v0.2.1
       Fresh rand v0.5.5
   Compiling std v0.0.0 (/home/tlee1/Desktop/rust-fork/rust/src/libstd)
       Fresh compiler_builtins v0.0.0 (/home/tlee1/Desktop/rust-fork/rust/src/rustc/compiler_builtins_shim)
     Running `/home/tlee1/Desktop/rust-fork/rust/src/target/debug/build/std-6838d184f6fa849c/build-script-build`
       Fresh libc v0.0.0 (/home/tlee1/Desktop/rust-fork/rust/src/rustc/libc_shim)
       Fresh alloc v0.0.0 (/home/tlee1/Desktop/rust-fork/rust/src/liballoc)
       Fresh unwind v0.0.0 (/home/tlee1/Desktop/rust-fork/rust/src/libunwind)
       Fresh panic_abort v0.0.0 (/home/tlee1/Desktop/rust-fork/rust/src/libpanic_abort)
       Fresh alloc_system v0.0.0 (/home/tlee1/Desktop/rust-fork/rust/src/liballoc_system)
     Running `rustc --crate-name std libstd/lib.rs --color never --crate-type dylib --crate-type rlib --emit=dep-info,link -C prefer-dynamic -C debug-assertions=off -C overflow-checks=on -C metadata=86307eb290211fed --out-dir /home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps --target x86_64-wrs-vxworks -C incremental=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/incremental -L dependency=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps -L dependency=/home/tlee1/Desktop/rust-fork/rust/src/target/debug/deps --extern alloc=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liballoc-58699d47e1d601fc.rlib --extern alloc_system=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liballoc_system-99a1dd99723ef263.rlib --extern compiler_builtins=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libcompiler_builtins-36a89d421cedafe5.rlib --extern core=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libcore-ff9a91e1f7203b8f.rlib --extern libc=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liblibc-b1617f6f761d60e4.rlib --extern panic_abort=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libpanic_abort-10b284ce029239e8.rlib --extern unwind=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libunwind-6ebea276b1044f94.rlib -C opt-level=0 -C debuginfo=2 --sysroot /home/tlee1/.xargo -L native=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/build/compiler_builtins-d1f119b0d77c7209/out`
     Running `rustc --crate-name std libstd/lib.rs --color never --emit=dep-info,link -C prefer-dynamic -C debug-assertions=off -C overflow-checks=on --test -C metadata=ae914bea23e0de01 -C extra-filename=-ae914bea23e0de01 --out-dir /home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps --target x86_64-wrs-vxworks -C incremental=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/incremental -L dependency=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps -L dependency=/home/tlee1/Desktop/rust-fork/rust/src/target/debug/deps --extern alloc=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liballoc-58699d47e1d601fc.rlib --extern alloc_system=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liballoc_system-99a1dd99723ef263.rlib --extern compiler_builtins=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libcompiler_builtins-36a89d421cedafe5.rlib --extern core=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libcore-ff9a91e1f7203b8f.rlib --extern libc=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liblibc-b1617f6f761d60e4.rlib --extern panic_abort=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libpanic_abort-10b284ce029239e8.rlib --extern rand=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/librand-cfc9de41ae25b691.rlib --extern unwind=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libunwind-6ebea276b1044f94.rlib -C opt-level=0 -C debuginfo=2 --sysroot /home/tlee1/.xargo -L native=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/build/compiler_builtins-d1f119b0d77c7209/out`
warning: dropping unsupported crate type `dylib` for target `x86_64-wrs-vxworks`

warning: unused import: `ptr`
 --> libstd/sys/vxworks/mod.rs:6:5
  |
6 | use ptr;
  |     ^^^
  |
  = note: #[warn(unused_imports)] on by default

warning: unused import: `sys::os_str::Buf`
 --> libstd/sys/vxworks/mod.rs:7:5
  |
7 | use sys::os_str::Buf;
  |     ^^^^^^^^^^^^^^^^

warning: unused imports: `OsStr`, `OsString`
 --> libstd/sys/vxworks/mod.rs:8:11
  |
8 | use ffi::{OsString, OsStr};
  |           ^^^^^^^^  ^^^^^

warning: unused import: `time::Duration`
 --> libstd/sys/vxworks/mod.rs:9:5
  |
9 | use time::Duration;
  |     ^^^^^^^^^^^^^^

warning: unused import: `sys::vxworks::ext::prelude::*`
 --> libstd/sys/vxworks/args.rs:2:5
  |
2 | use sys::vxworks::ext::prelude::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `OpenOptions`
  --> libstd/sys/vxworks/ext/fs.rs:15:29
   |
15 | use fs::{self, Permissions, OpenOptions};
   |                             ^^^^^^^^^^^

warning: unused imports: `gid_t`, `uid_t`
  --> libstd/sys/vxworks/process/process_vxworks.rs:12:25
   |
12 | use libc::{self, c_int, gid_t, uid_t};
   |                         ^^^^^  ^^^^^

warning: unused import: `ptr`
  --> libstd/sys/vxworks/process/process_vxworks.rs:14:5
   |
14 | use ptr;
   |     ^^^

warning: unused variable: `p`
   --> libstd/sys/vxworks/fs.rs:495:17
    |
495 | pub fn readlink(p: &Path) -> io::Result<PathBuf> {
    |                 ^ help: consider using `_p` instead
    |
    = note: #[warn(unused_variables)] on by default

warning: unused variable: `src`
   --> libstd/sys/vxworks/fs.rs:500:16
    |
500 | pub fn symlink(src: &Path, dst: &Path) -> io::Result<()> {
    |                ^^^ help: consider using `_src` instead

warning: unused variable: `dst`
   --> libstd/sys/vxworks/fs.rs:500:28
    |
500 | pub fn symlink(src: &Path, dst: &Path) -> io::Result<()> {
    |                            ^^^ help: consider using `_dst` instead

warning: unused variable: `default`
   --> libstd/sys/vxworks/process/process_vxworks.rs:105:28
    |
105 |     pub fn exec(&mut self, default: Stdio) -> io::Error {
    |                            ^^^^^^^ help: consider using `_default` instead

warning: unused variable: `name`
  --> libstd/sys/vxworks/thread.rs:90:21
   |
90 |     pub fn set_name(name: &CStr) {
   |                     ^^^^ help: consider using `_name` instead

warning: unnecessary `unsafe` block
   --> libstd/sys/vxworks/os.rs:179:4
    |
179 |             unsafe {
    |             ^^^^^^ unnecessary `unsafe` block
    |
    = note: #[warn(unused_unsafe)] on by default

warning: unnecessary `unsafe` block
   --> libstd/sys/vxworks/process/process_common.rs:359:9
    |
359 |         unsafe { libc::WIFEXITED(self.0) }
    |         ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> libstd/sys/vxworks/process/process_common.rs:368:18
    |
368 |             Some(unsafe { libc::WEXITSTATUS(self.0) })
    |                  ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> libstd/sys/vxworks/process/process_common.rs:376:18
    |
376 |             Some(unsafe { libc::WTERMSIG(self.0) })
    |                  ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
  --> libstd/sys/vxworks/process/process_vxworks.rs:85:17
   |
42 |         unsafe {
   |         ------ because it's nested under this `unsafe` block
...
85 |                 unsafe { libc::close(orig_stdin); }
   |                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
  --> libstd/sys/vxworks/process/process_vxworks.rs:89:17
   |
42 |         unsafe {
   |         ------ because it's nested under this `unsafe` block
...
89 |                 unsafe { libc::close(orig_stdout); }
   |                 ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
  --> libstd/sys/vxworks/process/process_vxworks.rs:93:17
   |
42 |         unsafe {
   |         ------ because it's nested under this `unsafe` block
...
93 |                 unsafe { libc::close(orig_stderr); }
   |                 ^^^^^^ unnecessary `unsafe` block

warning: method is never used: `socket`
   --> libstd/sys_common/net.rs:202:5
    |
202 |     pub fn socket(&self) -> &Socket { &self.inner }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: #[warn(dead_code)] on by default

warning: method is never used: `into_socket`
   --> libstd/sys_common/net.rs:204:5
    |
204 |     pub fn into_socket(self) -> Socket { self.inner }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: method is never used: `socket`
   --> libstd/sys_common/net.rs:342:5
    |
342 |     pub fn socket(&self) -> &Socket { &self.inner }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: method is never used: `into_socket`
   --> libstd/sys_common/net.rs:344:5
    |
344 |     pub fn into_socket(self) -> Socket { self.inner }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: method is never used: `socket`
   --> libstd/sys_common/net.rs:430:5
    |
430 |     pub fn socket(&self) -> &Socket { &self.inner }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: method is never used: `into_socket`
   --> libstd/sys_common/net.rs:432:5
    |
432 |     pub fn into_socket(self) -> Socket { self.inner }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused `sys_common::mutex::MutexGuard` that must be used
  --> libstd/sys/vxworks/args.rs:57:9
   |
57 |         LOCK.lock();
   |         ^^^^^^^^^^^^
   |
   = note: #[warn(unused_must_use)] on by default

warning: unused `sys_common::mutex::MutexGuard` that must be used
  --> libstd/sys/vxworks/args.rs:63:9
   |
63 |         LOCK.lock();
   |         ^^^^^^^^^^^^

warning: unused `sys_common::mutex::MutexGuard` that must be used
  --> libstd/sys/vxworks/args.rs:77:13
   |
77 |             LOCK.lock();
   |             ^^^^^^^^^^^^

warning: unused import: `TempDir`
    --> libstd/fs.rs:2087:32
     |
2087 |     use sys_common::io::test::{TempDir, tmpdir};
     |                                ^^^^^^^
     |
     = note: #[warn(unused_imports)] on by default

warning: unused import: `ptr`
 --> libstd/sys/vxworks/mod.rs:6:5
  |
6 | use ptr;
  |     ^^^

warning: unused import: `sys::os_str::Buf`
 --> libstd/sys/vxworks/mod.rs:7:5
  |
7 | use sys::os_str::Buf;
  |     ^^^^^^^^^^^^^^^^

warning: unused imports: `OsStr`, `OsString`
 --> libstd/sys/vxworks/mod.rs:8:11
  |
8 | use ffi::{OsString, OsStr};
  |           ^^^^^^^^  ^^^^^

warning: unused import: `time::Duration`
 --> libstd/sys/vxworks/mod.rs:9:5
  |
9 | use time::Duration;
  |     ^^^^^^^^^^^^^^

warning: unused import: `sys::vxworks::ext::prelude::*`
 --> libstd/sys/vxworks/args.rs:2:5
  |
2 | use sys::vxworks::ext::prelude::*;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `OpenOptions`
  --> libstd/sys/vxworks/ext/fs.rs:15:29
   |
15 | use fs::{self, Permissions, OpenOptions};
   |                             ^^^^^^^^^^^

warning: unused imports: `gid_t`, `uid_t`
  --> libstd/sys/vxworks/process/process_vxworks.rs:12:25
   |
12 | use libc::{self, c_int, gid_t, uid_t};
   |                         ^^^^^  ^^^^^

warning: unused import: `ptr`
  --> libstd/sys/vxworks/process/process_vxworks.rs:14:5
   |
14 | use ptr;
   |     ^^^

     Running `rustc --crate-name env libstd/tests/env.rs --color never --emit=dep-info,link -C debug-assertions=off -C overflow-checks=on --test -C metadata=44999ff4ca62384b -C extra-filename=-44999ff4ca62384b --out-dir /home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps --target x86_64-wrs-vxworks -C incremental=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/incremental -L dependency=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps -L dependency=/home/tlee1/Desktop/rust-fork/rust/src/target/debug/deps --extern alloc=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liballoc-58699d47e1d601fc.rlib --extern alloc_system=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liballoc_system-99a1dd99723ef263.rlib --extern compiler_builtins=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libcompiler_builtins-36a89d421cedafe5.rlib --extern core=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libcore-ff9a91e1f7203b8f.rlib --extern libc=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liblibc-b1617f6f761d60e4.rlib --extern panic_abort=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libpanic_abort-10b284ce029239e8.rlib --extern rand=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/librand-cfc9de41ae25b691.rlib --extern std=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libstd.rlib --extern unwind=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libunwind-6ebea276b1044f94.rlib -C opt-level=0 -C debuginfo=2 --sysroot /home/tlee1/.xargo -L native=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/build/compiler_builtins-d1f119b0d77c7209/out`
error: duplicate lang item in crate `std`: `f32_runtime`.
  |
  = note: first defined in crate `std`.

error: duplicate lang item in crate `std`: `f64_runtime`.
  |
  = note: first defined in crate `std`.

error: duplicate lang item in crate `std`: `panic_impl`.
  |
  = note: first defined in crate `std`.

error: duplicate lang item in crate `std`: `begin_panic`.
  |
  = note: first defined in crate `std`.

error: duplicate lang item in crate `std`: `oom`.
  |
  = note: first defined in crate `std`.

error: duplicate lang item in crate `std`: `start`.
  |
  = note: first defined in crate `std`.

error: duplicate lang item in crate `std`: `termination`.
  |
  = note: first defined in crate `std`.

error: duplicate lang item in crate `core`: `char`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `str`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `slice`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `slice_u8`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `const_ptr`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `mut_ptr`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `i8`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `i16`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `i32`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `i64`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `i128`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `isize`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `u8`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `u16`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `u32`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `u64`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `u128`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `usize`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `f32`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `f64`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `sized`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `unsize`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `copy`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `clone`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `sync`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `freeze`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `drop`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `coerce_unsized`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `add`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `sub`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `mul`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `div`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `rem`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `neg`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `not`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `bitxor`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `bitand`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `bitor`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `shl`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `shr`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `add_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `sub_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `mul_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `div_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `rem_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `bitxor_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `bitand_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `bitor_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `shl_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `shr_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `index`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `index_mut`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `unsafe_cell`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `deref`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `deref_mut`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `fn`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `fn_mut`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `fn_once`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `generator_state`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `generator`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `eq`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `partial_ord`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `ord`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `panic`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `panic_bounds_check`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `panic_info`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `drop_in_place`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `alloc_layout`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `phantom_data`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `manually_drop`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `debug_trait`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `align_offset`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `compiler_builtins`: `i128_add`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_add`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_sub`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_sub`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_mul`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_mul`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_div`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_div`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_rem`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_rem`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_shl`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_shl`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_shr`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_shr`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_addo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_addo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_subo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_subo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_mulo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_mulo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_shlo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_shlo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_shro`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_shro`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `alloc`: `str_alloc`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `slice_alloc`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `slice_u8_alloc`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `exchange_malloc`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `box_free`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `owned_box`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `arc`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `rc`.
  |
  = note: first defined in crate `alloc`.

error[E0277]: the size for values of type `std::ffi::OsString` cannot be known at compilation time
  --> libstd/tests/env.rs:28:1
   |
28 | / fn eq(a: Option<OsString>, b: Option<&str>) {
29 | |     assert_eq!(a.as_ref().map(|s| &**s), b.map(OsStr::new).map(|s| &*s));
30 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `std::marker::Sized` is not implemented for `std::ffi::OsString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `std::option::Option`

error[E0277]: the size for values of type `&str` cannot be known at compilation time
  --> libstd/tests/env.rs:28:1
   |
28 | / fn eq(a: Option<OsString>, b: Option<&str>) {
29 | |     assert_eq!(a.as_ref().map(|s| &**s), b.map(OsStr::new).map(|s| &*s));
30 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `std::marker::Sized` is not implemented for `&str`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `std::option::Option`

error: aborting due to 113 previous errors

For more information about this error, try `rustc --explain E0277`.
error: Could not compile `std`.

Caused by:
  process didn't exit successfully: `rustc --crate-name env libstd/tests/env.rs --color never --emit=dep-info,link -C debug-assertions=off -C overflow-checks=on --test -C metadata=44999ff4ca62384b -C extra-filename=-44999ff4ca62384b --out-dir /home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps --target x86_64-wrs-vxworks -C incremental=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/incremental -L dependency=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps -L dependency=/home/tlee1/Desktop/rust-fork/rust/src/target/debug/deps --extern alloc=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liballoc-58699d47e1d601fc.rlib --extern alloc_system=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liballoc_system-99a1dd99723ef263.rlib --extern compiler_builtins=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libcompiler_builtins-36a89d421cedafe5.rlib --extern core=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libcore-ff9a91e1f7203b8f.rlib --extern libc=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liblibc-b1617f6f761d60e4.rlib --extern panic_abort=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libpanic_abort-10b284ce029239e8.rlib --extern rand=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/librand-cfc9de41ae25b691.rlib --extern std=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libstd.rlib --extern unwind=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libunwind-6ebea276b1044f94.rlib -C opt-level=0 -C debuginfo=2 --sysroot /home/tlee1/.xargo -L native=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/build/compiler_builtins-d1f119b0d77c7209/out` (exit code: 1)
warning: build failed, waiting for other jobs to finish...
error: duplicate lang item in crate `core`: `char`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `str`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `slice`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `slice_u8`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `const_ptr`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `mut_ptr`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `i8`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `i16`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `i32`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `i64`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `i128`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `isize`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `u8`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `u16`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `u32`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `u64`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `u128`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `usize`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `f32`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `f64`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `sized`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `unsize`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `copy`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `clone`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `sync`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `freeze`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `drop`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `coerce_unsized`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `add`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `sub`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `mul`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `div`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `rem`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `neg`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `not`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `bitxor`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `bitand`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `bitor`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `shl`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `shr`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `add_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `sub_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `mul_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `div_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `rem_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `bitxor_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `bitand_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `bitor_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `shl_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `shr_assign`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `index`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `index_mut`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `unsafe_cell`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `deref`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `deref_mut`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `fn`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `fn_mut`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `fn_once`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `generator_state`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `generator`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `eq`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `partial_ord`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `ord`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `panic`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `panic_bounds_check`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `panic_info`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `drop_in_place`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `alloc_layout`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `phantom_data`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `manually_drop`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `debug_trait`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `core`: `align_offset`.
  |
  = note: first defined in crate `core`.

error: duplicate lang item in crate `compiler_builtins`: `i128_add`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_add`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_sub`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_sub`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_mul`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_mul`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_div`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_div`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_rem`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_rem`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_shl`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_shl`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_shr`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_shr`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_addo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_addo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_subo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_subo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_mulo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_mulo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_shlo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_shlo`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `i128_shro`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `compiler_builtins`: `u128_shro`.
  |
  = note: first defined in crate `compiler_builtins`.

error: duplicate lang item in crate `alloc`: `str_alloc`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `slice_alloc`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `slice_u8_alloc`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `exchange_malloc`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `box_free`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `owned_box`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `arc`.
  |
  = note: first defined in crate `alloc`.

error: duplicate lang item in crate `alloc`: `rc`.
  |
  = note: first defined in crate `alloc`.

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:121:18
    |
121 | pub struct Mutex<T: ?Sized> {
    |                  ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:155:27
    |
155 | pub struct MutexGuard<'a, T: ?Sized + 'a> {
    |                           ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/sync/rwlock.rs:77:19
   |
77 | pub struct RwLock<T: ?Sized> {
   |                   ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/collections/hash/table.rs:210:18
    |
210 | pub fn make_hash<T: ?Sized, S>(hash_state: &S, t: &T) -> SafeHash
    |                  ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
    --> libstd/collections/hash/map.rs:1533:13
     |
1533 | impl<'a, K, Q: ?Sized, V, S> Index<&'a Q> for HashMap<K, V, S>
     |             ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
    --> libstd/collections/hash/map.rs:2694:12
     |
2694 | impl<K, S, Q: ?Sized> super::Recover<Q> for HashMap<K, (), S>
     |            ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/collections/hash/mod.rs:18:15
   |
18 | trait Recover<Q: ?Sized> {
   |               ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/env.rs:400:20
    |
400 | pub fn split_paths<T: AsRef<OsStr> + ?Sized>(unparsed: &T) -> SplitPaths {
    |                    ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/ffi/os_str.rs:363:10
    |
363 | impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for OsString {
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/io/impls.rs:20:10
   |
20 | impl<'a, R: Read + ?Sized> Read for &'a mut R {
   |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/io/impls.rs:47:10
   |
47 | impl<'a, W: Write + ?Sized> Write for &'a mut W {
   |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/io/impls.rs:65:10
   |
65 | impl<'a, S: Seek + ?Sized> Seek for &'a mut S {
   |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/io/impls.rs:70:10
   |
70 | impl<'a, B: BufRead + ?Sized> BufRead for &'a mut B {
   |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/io/impls.rs:89:6
   |
89 | impl<R: Read + ?Sized> Read for Box<R> {
   |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/io/impls.rs:116:6
    |
116 | impl<W: Write + ?Sized> Write for Box<W> {
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/io/impls.rs:134:6
    |
134 | impl<S: Seek + ?Sized> Seek for Box<S> {
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/io/impls.rs:139:6
    |
139 | impl<B: BufRead + ?Sized> BufRead for Box<B> {
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/io/util.rs:53:13
   |
53 | pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> io::Result<u64>
   |             ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/io/util.rs:53:24
   |
53 | pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> io::Result<u64>
   |                        ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/io/mod.rs:362:16
    |
362 | fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {
    |                ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/io/mod.rs:366:33
    |
366 | fn read_to_end_with_reservation<R: Read + ?Sized>(r: &mut R,
    |                                 ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
    --> libstd/io/mod.rs:1121:28
     |
1121 |         struct Adaptor<'a, T: ?Sized + 'a> {
     |                            ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
    --> libstd/io/mod.rs:1126:18
     |
1126 |         impl<'a, T: Write + ?Sized> fmt::Write for Adaptor<'a, T> {
     |                  ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
    --> libstd/io/mod.rs:1252:15
     |
1252 | fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)
     |               ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/net/addr.rs:931:10
    |
931 | impl<'a, T: ToSocketAddrs + ?Sized> ToSocketAddrs for &'a T {
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/panic.rs:212:10
    |
212 | impl<'a, T: ?Sized> !UnwindSafe for &'a mut T {}
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/panic.rs:214:10
    |
214 | impl<'a, T: RefUnwindSafe + ?Sized> UnwindSafe for &'a T {}
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/panic.rs:216:6
    |
216 | impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *const T {}
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/panic.rs:218:6
    |
218 | impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *mut T {}
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/panic.rs:220:6
    |
220 | impl<T: UnwindSafe + ?Sized> UnwindSafe for Unique<T> {}
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/panic.rs:222:6
    |
222 | impl<T: RefUnwindSafe + ?Sized> UnwindSafe for NonNull<T> {}
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/panic.rs:224:6
    |
224 | impl<T: ?Sized> UnwindSafe for Mutex<T> {}
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/panic.rs:226:6
    |
226 | impl<T: ?Sized> UnwindSafe for RwLock<T> {}
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/panic.rs:234:6
    |
234 | impl<T: RefUnwindSafe + ?Sized> UnwindSafe for Rc<T> {}
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/panic.rs:236:6
    |
236 | impl<T: RefUnwindSafe + ?Sized> UnwindSafe for Arc<T> {}
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/panic.rs:243:6
    |
243 | impl<T: ?Sized> !RefUnwindSafe for UnsafeCell<T> {}
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/panic.rs:248:6
    |
248 | impl<T: ?Sized> RefUnwindSafe for Mutex<T> {}
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/panic.rs:250:6
    |
250 | impl<T: ?Sized> RefUnwindSafe for RwLock<T> {}
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
    --> libstd/path.rs:1419:10
     |
1419 | impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for PathBuf {
     |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:135:13
    |
135 | unsafe impl<T: ?Sized + Send> Send for Mutex<T> { }
    |             ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:137:13
    |
137 | unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }
    |             ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:163:10
    |
163 | impl<'a, T: ?Sized> !Send for MutexGuard<'a, T> { }
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:165:17
    |
165 | unsafe impl<'a, T: ?Sized + Sync> Sync for MutexGuard<'a, T> { }
    |                 ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:191:6
    |
191 | impl<T: ?Sized> Mutex<T> {
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:374:27
    |
374 | unsafe impl<#[may_dangle] T: ?Sized> Drop for Mutex<T> {
    |                           ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:395:6
    |
395 | impl<T: ?Sized + Default> Default for Mutex<T> {
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:403:6
    |
403 | impl<T: ?Sized + fmt::Debug> fmt::Debug for Mutex<T> {
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:422:14
    |
422 | impl<'mutex, T: ?Sized> MutexGuard<'mutex, T> {
    |              ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:434:14
    |
434 | impl<'mutex, T: ?Sized> Deref for MutexGuard<'mutex, T> {
    |              ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:443:14
    |
443 | impl<'mutex, T: ?Sized> DerefMut for MutexGuard<'mutex, T> {
    |              ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:450:10
    |
450 | impl<'a, T: ?Sized> Drop for MutexGuard<'a, T> {
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:461:10
    |
461 | impl<'a, T: ?Sized + fmt::Debug> fmt::Debug for MutexGuard<'a, T> {
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:470:10
    |
470 | impl<'a, T: ?Sized + fmt::Display> fmt::Display for MutexGuard<'a, T> {
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:476:23
    |
476 | pub fn guard_lock<'a, T: ?Sized>(guard: &MutexGuard<'a, T>) -> &'a sys::Mutex {
    |                       ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/mutex.rs:480:25
    |
480 | pub fn guard_poison<'a, T: ?Sized>(guard: &MutexGuard<'a, T>) -> &'a poison::Flag {
    |                         ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/sync/rwlock.rs:84:13
   |
84 | unsafe impl<T: ?Sized + Send> Send for RwLock<T> {}
   |             ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/sync/rwlock.rs:86:13
   |
86 | unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}
   |             ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/sync/rwlock.rs:99:32
   |
99 | pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {
   |                                ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:104:10
    |
104 | impl<'a, T: ?Sized> !Send for RwLockReadGuard<'a, T> {}
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:107:17
    |
107 | unsafe impl<'a, T: ?Sized + Sync> Sync for RwLockReadGuard<'a, T> {}
    |                 ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:120:33
    |
120 | pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {
    |                                 ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:126:10
    |
126 | impl<'a, T: ?Sized> !Send for RwLockWriteGuard<'a, T> {}
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:129:17
    |
129 | unsafe impl<'a, T: ?Sized + Sync> Sync for RwLockWriteGuard<'a, T> {}
    |                 ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:151:6
    |
151 | impl<T: ?Sized> RwLock<T> {
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:425:27
    |
425 | unsafe impl<#[may_dangle] T: ?Sized> Drop for RwLock<T> {
    |                           ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:433:6
    |
433 | impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {
    |      ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:469:15
    |
469 | impl<'rwlock, T: ?Sized> RwLockReadGuard<'rwlock, T> {
    |               ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:480:15
    |
480 | impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {
    |               ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:502:10
    |
502 | impl<'a, T: ?Sized + fmt::Display> fmt::Display for RwLockReadGuard<'a, T> {
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:518:10
    |
518 | impl<'a, T: ?Sized + fmt::Display> fmt::Display for RwLockWriteGuard<'a, T> {
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:525:15
    |
525 | impl<'rwlock, T: ?Sized> Deref for RwLockReadGuard<'rwlock, T> {
    |               ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:534:15
    |
534 | impl<'rwlock, T: ?Sized> Deref for RwLockWriteGuard<'rwlock, T> {
    |               ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:543:15
    |
543 | impl<'rwlock, T: ?Sized> DerefMut for RwLockWriteGuard<'rwlock, T> {
    |               ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:550:10
    |
550 | impl<'a, T: ?Sized> Drop for RwLockReadGuard<'a, T> {
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/sync/rwlock.rs:557:10
    |
557 | impl<'a, T: ?Sized> Drop for RwLockWriteGuard<'a, T> {
    |          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/sys_common/mod.rs:78:19
   |
78 | pub trait AsInner<Inner: ?Sized> {
   |                   ^^^^^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
  --> libstd/sys_common/mod.rs:84:22
   |
84 | pub trait AsInnerMut<Inner: ?Sized> {
   |                      ^^^^^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/collections/hash/map.rs:576:18
    |
576 |     fn make_hash<X: ?Sized>(&self, x: &X) -> SafeHash
    |                  ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/collections/hash/map.rs:586:19
    |
586 |     fn search<'a, Q: ?Sized>(&'a self, q: &Q)
    |                   ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/collections/hash/map.rs:601:23
    |
601 |     fn search_mut<'a, Q: ?Sized>(&'a mut self, q: &Q)
    |                       ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
    --> libstd/collections/hash/map.rs:1252:16
     |
1252 |     pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
     |                ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
    --> libstd/collections/hash/map.rs:1280:26
     |
1280 |     pub fn get_key_value<Q: ?Sized>(&self, k: &Q) -> Option<(&K, &V)>
     |                          ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
    --> libstd/collections/hash/map.rs:1307:25
     |
1307 |     pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
     |                         ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
    --> libstd/collections/hash/map.rs:1336:20
     |
1336 |     pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
     |                    ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
    --> libstd/collections/hash/map.rs:1396:19
     |
1396 |     pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
     |                   ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
    --> libstd/collections/hash/map.rs:1426:25
     |
1426 |     pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
     |                         ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/collections/hash/set.rs:545:21
    |
545 |     pub fn contains<Q: ?Sized>(&self, value: &Q) -> bool
    |                     ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/collections/hash/set.rs:571:16
    |
571 |     pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>
    |                ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/collections/hash/set.rs:712:19
    |
712 |     pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool
    |                   ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/collections/hash/set.rs:738:17
    |
738 |     pub fn take<Q: ?Sized>(&mut self, value: &Q) -> Option<T>
    |                 ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
   --> libstd/ffi/os_str.rs:494:16
    |
494 |     pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &OsStr {
    |                ^

warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported
    --> libstd/path.rs:1698:16
     |
1698 |     pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &Path {
     |                ^

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<T>>` cannot be known at compilation time
   --> libstd/thread/local.rs:104:5
    |
104 |     inner: unsafe fn() -> Option<&'static UnsafeCell<Option<T>>>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/thread/local.rs:104:5
    |
104 |     inner: unsafe fn() -> Option<&'static UnsafeCell<Option<T>>>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/thread/local.rs:437:9
    |
437 |         value: UnsafeCell<Option<T>>,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/thread/mod.rs:536:1
    |
536 | / pub fn spawn<F, T>(f: F) -> JoinHandle<T> where
537 | |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static
538 | | {
539 | |     Builder::new().spawn(f).unwrap()
540 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/thread/mod.rs:536:1
    |
536 | / pub fn spawn<F, T>(f: F) -> JoinHandle<T> where
537 | |     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static
538 | | {
539 | |     Builder::new().spawn(f).unwrap()
540 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/thread/mod.rs:984:5
    |
984 |     name: Option<CString>,      // Guaranteed to be UTF-8
    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::result::Result<T, alloc_crate::boxed::Box<(dyn core::any::Any + core::marker::Send + 'static)>>` cannot be known at compilation time
    --> libstd/thread/mod.rs:1209:18
     |
1209 | struct Packet<T>(Arc<UnsafeCell<Option<Result<T>>>>);
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<T, alloc_crate::boxed::Box<(dyn core::any::Any + core::marker::Send + 'static)>>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/thread/mod.rs:1209:18
     |
1209 | struct Packet<T>(Arc<UnsafeCell<Option<Result<T>>>>);
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn core::any::Any + core::marker::Send + 'static)>` cannot be known at compilation time
    --> libstd/thread/mod.rs:1209:18
     |
1209 | struct Packet<T>(Arc<UnsafeCell<Option<Result<T>>>>);
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn core::any::Any + core::marker::Send + 'static)>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::thread::Thread` cannot be known at compilation time
    --> libstd/thread/mod.rs:1216:5
     |
1216 |     native: Option<imp::Thread>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::thread::Thread`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `(alloc_crate::boxed::Box<(dyn core::ops::Fn<(), Output=()> + core::marker::Send + 'static)>,)` cannot be known at compilation time
    --> libstd/thread/mod.rs:1469:5
     |
1469 | /     fn avoid_copying_the_body<F>(spawnfn: F) where F: FnOnce(Box<dyn Fn() + Send>) {
1470 | |         let (tx, rx) = channel();
1471 | |
1472 | |         let x: Box<_> = box 1;
...    |
1481 | |         assert_eq!(x_in_parent, x_in_child);
1482 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(alloc_crate::boxed::Box<(dyn core::ops::Fn<(), Output=()> + core::marker::Send + 'static)>,)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/thread/mod.rs:1469:5
     |
1469 | /     fn avoid_copying_the_body<F>(spawnfn: F) where F: FnOnce(Box<dyn Fn() + Send>) {
1470 | |         let (tx, rx) = channel();
1471 | |
1472 | |         let x: Box<_> = box 1;
...    |
1481 | |         assert_eq!(x_in_parent, x_in_child);
1482 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `collections::hash::table::RawBucket<K, V>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:136:12
    |
136 | impl<K, V> Copy for RawBucket<K, V> {}
    |            ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::RawBucket<K, V>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::table::RawBucket<K, V>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:137:12
    |
137 | impl<K, V> Clone for RawBucket<K, V> {
    |            ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::RawBucket<K, V>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::table::Bucket<K, V, M>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:148:21
    |
148 | impl<K, V, M: Copy> Copy for Bucket<K, V, M> {}
    |                     ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::Bucket<K, V, M>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::table::Bucket<K, V, M>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:149:21
    |
149 | impl<K, V, M: Copy> Clone for Bucket<K, V, M> {
    |                     ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::Bucket<K, V, M>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(core::alloc::Layout, usize)` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:657:1
    |
657 | / fn calculate_layout<K, V>(capacity: usize) -> Result<(Layout, usize), LayoutErr> {
658 | |     let hashes = Layout::array::<HashUint>(capacity)?;
659 | |     let pairs = Layout::array::<(K, V)>(capacity)?;
660 | |     hashes.extend(pairs).map(|(layout, _)| {
...   |
670 | |     })
671 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(core::alloc::Layout, usize)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::alloc::LayoutErr` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:657:1
    |
657 | / fn calculate_layout<K, V>(capacity: usize) -> Result<(Layout, usize), LayoutErr> {
658 | |     let hashes = Layout::array::<HashUint>(capacity)?;
659 | |     let pairs = Layout::array::<(K, V)>(capacity)?;
660 | |     hashes.extend(pairs).map(|(layout, _)| {
...   |
670 | |     })
671 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::alloc::LayoutErr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `collections::hash::table::RawBuckets<'a, K, V>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:871:16
    |
871 | impl<'a, K, V> Clone for RawBuckets<'a, K, V> {
    |                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::RawBuckets<'a, K, V>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

warning: the trait `core::iter::Iterator` cannot be made into an object
   --> /home/tlee1/Desktop/rust-fork/rust/src/libcore/iter/iterator.rs:249:5
    |
249 | /     fn count(self) -> usize where Self: Sized {
250 | |         // Might overflow.
251 | |         self.fold(0, |cnt, _| cnt + 1)
252 | |     }
    | |_____^
    |
    = note: #[warn(where_clauses_object_safety)] on by default
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>
    = note: method `count` references the `Self` type in where clauses

warning: the trait `core::iter::Iterator` cannot be made into an object
   --> /home/tlee1/Desktop/rust-fork/rust/src/libcore/iter/iterator.rs:275:5
    |
275 | /     fn last(self) -> Option<Self::Item> where Self: Sized {
276 | |         let mut last = None;
277 | |         for x in self { last = Some(x); }
278 | |         last
279 | |     }
    | |_____^
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>
    = note: method `last` references the `Self` type in where clauses

warning: the trait `core::iter::Iterator` cannot be made into an object
    --> /home/tlee1/Desktop/rust-fork/rust/src/libcore/iter/iterator.rs:2020:5
     |
2020 | /     fn max(self) -> Option<Self::Item> where Self: Sized, Self::Item: Ord
2021 | |     {
2022 | |         select_fold1(self,
2023 | |                      |_| (),
...    |
2027 | |             .map(|(_, x)| x)
2028 | |     }
     | |_____^
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>
     = note: method `max` references the `Self` type in where clauses

warning: the trait `core::iter::Iterator` cannot be made into an object
    --> /home/tlee1/Desktop/rust-fork/rust/src/libcore/iter/iterator.rs:2050:5
     |
2050 | /     fn min(self) -> Option<Self::Item> where Self: Sized, Self::Item: Ord
2051 | |     {
2052 | |         select_fold1(self,
2053 | |                      |_| (),
...    |
2057 | |             .map(|(_, x)| x)
2058 | |     }
     | |_____^
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>
     = note: method `min` references the `Self` type in where clauses

error[E0277]: the size for values of type `collections::hash::table::RawBucket<K, V>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:882:16
    |
882 | impl<'a, K, V> Iterator for RawBuckets<'a, K, V> {
    |                ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::RawBucket<K, V>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

warning: the trait `core::iter::Iterator` cannot be made into an object
   --> /home/tlee1/Desktop/rust-fork/rust/src/libcore/iter/iterator.rs:249:5
    |
249 | /     fn count(self) -> usize where Self: Sized {
250 | |         // Might overflow.
251 | |         self.fold(0, |cnt, _| cnt + 1)
252 | |     }
    | |_____^
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
    = note: for more information, see issue #51443 <https://github.com/rust-lang/rust/issues/51443>
    = note: method `count` references the `Self` type in where clauses

error[E0277]: the size for values of type `collections::hash::table::Iter<'a, K, V>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:922:16
    |
922 | impl<'a, K, V> Clone for Iter<'a, K, V> {
    |                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::Iter<'a, K, V>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(&K, &V)` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:985:16
    |
985 | impl<'a, K, V> Iterator for Iter<'a, K, V> {
    |                ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(&K, &V)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(&K, &mut V)` cannot be known at compilation time
    --> libstd/collections/hash/table.rs:1006:16
     |
1006 | impl<'a, K, V> Iterator for IterMut<'a, K, V> {
     |                ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(&K, &mut V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(collections::hash::table::SafeHash, K, V)` cannot be known at compilation time
    --> libstd/collections/hash/table.rs:1027:12
     |
1027 | impl<K, V> Iterator for IntoIter<K, V> {
     |            ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(collections::hash::table::SafeHash, K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(collections::hash::table::SafeHash, K, V)` cannot be known at compilation time
    --> libstd/collections/hash/table.rs:1051:16
     |
1051 | impl<'a, K, V> Iterator for Drain<'a, K, V> {
     |                ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(collections::hash::table::SafeHash, K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::table::RawTable<K, V>` cannot be known at compilation time
    --> libstd/collections/hash/table.rs:1082:26
     |
1082 | impl<K: Clone, V: Clone> Clone for RawTable<K, V> {
     |                          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::RawTable<K, V>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::HashMap<K, V, S>` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1522:15
     |
1522 | impl<K, V, S> Default for HashMap<K, V, S>
     |               ^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::HashMap<K, V, S>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::Iter<'a, K, V>` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1565:16
     |
1565 | impl<'a, K, V> Clone for Iter<'a, K, V> {
     |                ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::Iter<'a, K, V>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::Keys<'a, K, V>` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1618:16
     |
1618 | impl<'a, K, V> Clone for Keys<'a, K, V> {
     |                ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::Keys<'a, K, V>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::Values<'a, K, V>` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1647:16
     |
1647 | impl<'a, K, V> Clone for Values<'a, K, V> {
     |                ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::Values<'a, K, V>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `K` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1770:5
     |
1770 |     key: Option<K>,
     |     ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `K`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where K: core::marker::Sized` bound
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `collections::hash::map::Iter<'_, K, V>` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1814:19
     |
1814 | impl<'a, K, V, S> IntoIterator for &'a HashMap<K, V, S>
     |                   ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::Iter<'_, K, V>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(&K, &V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1814:19
     |
1814 | impl<'a, K, V, S> IntoIterator for &'a HashMap<K, V, S>
     |                   ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(&K, &V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::IterMut<'_, K, V>` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1827:19
     |
1827 | impl<'a, K, V, S> IntoIterator for &'a mut HashMap<K, V, S>
     |                   ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::IterMut<'_, K, V>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(&K, &mut V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1827:19
     |
1827 | impl<'a, K, V, S> IntoIterator for &'a mut HashMap<K, V, S>
     |                   ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(&K, &mut V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::IntoIter<K, V>` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1840:15
     |
1840 | impl<K, V, S> IntoIterator for HashMap<K, V, S>
     |               ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::IntoIter<K, V>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(K, V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1840:15
     |
1840 | impl<K, V, S> IntoIterator for HashMap<K, V, S>
     |               ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(&K, &V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1870:16
     |
1870 | impl<'a, K, V> Iterator for Iter<'a, K, V> {
     |                ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(&K, &V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(&K, &mut V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1894:16
     |
1894 | impl<'a, K, V> Iterator for IterMut<'a, K, V> {
     |                ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(&K, &mut V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(K, V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1929:12
     |
1929 | impl<K, V> Iterator for IntoIter<K, V> {
     |            ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&K` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1961:16
     |
1961 | impl<'a, K, V> Iterator for Keys<'a, K, V> {
     |                ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&K`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&V` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1984:16
     |
1984 | impl<'a, K, V> Iterator for Values<'a, K, V> {
     |                ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&V`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&mut V` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2007:16
     |
2007 | impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {
     |                ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&mut V`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(K, V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2042:16
     |
2042 | impl<'a, K, V> Iterator for Drain<'a, K, V> {
     |                ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(K, V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2512:15
     |
2512 | impl<K, V, S> FromIterator<(K, V)> for HashMap<K, V, S>
     |               ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::HashMap<K, V, S>` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2512:15
     |
2512 | impl<K, V, S> FromIterator<(K, V)> for HashMap<K, V, S>
     |               ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::HashMap<K, V, S>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(K, V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2524:15
     |
2524 | impl<K, V, S> Extend<(K, V)> for HashMap<K, V, S>
     |               ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(&'a K, &'a V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2547:19
     |
2547 | impl<'a, K, V, S> Extend<(&'a K, &'a V)> for HashMap<K, V, S>
     |                   ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(&'a K, &'a V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::DefaultHasher` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2622:6
     |
2622 | impl BuildHasher for RandomState {
     |      ^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::DefaultHasher`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::DefaultHasher` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2657:6
     |
2657 | impl Default for DefaultHasher {
     |      ^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::DefaultHasher`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::RandomState` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2679:6
     |
2679 | impl Default for RandomState {
     |      ^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::RandomState`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::test_map::Droppable` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2869:10
     |
2869 |     impl Clone for Droppable {
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::test_map::Droppable`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:799:12
    |
799 | impl<T, S> FromIterator<T> for HashSet<T, S>
    |            ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound

error[E0277]: the size for values of type `collections::hash::set::HashSet<T, S>` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:799:12
    |
799 | impl<T, S> FromIterator<T> for HashSet<T, S>
    |            ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::HashSet<T, S>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:811:12
    |
811 | impl<T, S> Extend<T> for HashSet<T, S>
    |            ^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound

error[E0277]: the size for values of type `&'a T` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:821:16
    |
821 | impl<'a, T, S> Extend<&'a T> for HashSet<T, S>
    |                ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::set::HashSet<T, S>` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:831:12
    |
831 | impl<T, S> Default for HashSet<T, S>
    |            ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::HashSet<T, S>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::set::HashSet<T, S>` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:842:20
    |
842 | impl<'a, 'b, T, S> BitOr<&'b HashSet<T, S>> for &'a HashSet<T, S>
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::HashSet<T, S>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'b collections::hash::set::HashSet<T, S>` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:842:20
    |
842 | impl<'a, 'b, T, S> BitOr<&'b HashSet<T, S>> for &'a HashSet<T, S>
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'b collections::hash::set::HashSet<T, S>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::set::HashSet<T, S>` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:874:20
    |
874 | impl<'a, 'b, T, S> BitAnd<&'b HashSet<T, S>> for &'a HashSet<T, S>
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::HashSet<T, S>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'b collections::hash::set::HashSet<T, S>` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:874:20
    |
874 | impl<'a, 'b, T, S> BitAnd<&'b HashSet<T, S>> for &'a HashSet<T, S>
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'b collections::hash::set::HashSet<T, S>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::set::HashSet<T, S>` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:906:20
    |
906 | impl<'a, 'b, T, S> BitXor<&'b HashSet<T, S>> for &'a HashSet<T, S>
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::HashSet<T, S>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'b collections::hash::set::HashSet<T, S>` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:906:20
    |
906 | impl<'a, 'b, T, S> BitXor<&'b HashSet<T, S>> for &'a HashSet<T, S>
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'b collections::hash::set::HashSet<T, S>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::set::HashSet<T, S>` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:938:20
    |
938 | impl<'a, 'b, T, S> Sub<&'b HashSet<T, S>> for &'a HashSet<T, S>
    |                    ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::HashSet<T, S>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'b collections::hash::set::HashSet<T, S>` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:938:20
    |
938 | impl<'a, 'b, T, S> Sub<&'b HashSet<T, S>> for &'a HashSet<T, S>
    |                    ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'b collections::hash::set::HashSet<T, S>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::set::Difference<'a, T, S>` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1044:5
     |
1044 |     iter: Chain<Difference<'a, T, S>, Difference<'a, T, S>>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::Difference<'a, T, S>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::iter::Chain`

error[E0277]: the size for values of type `collections::hash::set::Iter<'a, T>` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1056:5
     |
1056 |     iter: Chain<Iter<'a, T>, Difference<'a, T, S>>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::Iter<'a, T>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::iter::Chain`

error[E0277]: the size for values of type `collections::hash::set::Difference<'a, T, S>` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1056:5
     |
1056 |     iter: Chain<Iter<'a, T>, Difference<'a, T, S>>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::Difference<'a, T, S>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::iter::Chain`

error[E0277]: the size for values of type `collections::hash::set::Iter<'_, T>` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1060:16
     |
1060 | impl<'a, T, S> IntoIterator for &'a HashSet<T, S>
     |                ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::Iter<'_, T>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&T` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1060:16
     |
1060 | impl<'a, T, S> IntoIterator for &'a HashSet<T, S>
     |                ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::set::IntoIter<T>` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1073:12
     |
1073 | impl<T, S> IntoIterator for HashSet<T, S>
     |            ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::IntoIter<T>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1073:12
     |
1073 | impl<T, S> IntoIterator for HashSet<T, S>
     |            ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound

error[E0277]: the size for values of type `collections::hash::set::Iter<'a, K>` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1106:13
     |
1106 | impl<'a, K> Clone for Iter<'a, K> {
     |             ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::Iter<'a, K>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&K` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1112:13
     |
1112 | impl<'a, K> Iterator for Iter<'a, K> {
     |             ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&K`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `K` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1139:9
     |
1139 | impl<K> Iterator for IntoIter<K> {
     |         ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `K`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where K: core::marker::Sized` bound

error[E0277]: the size for values of type `K` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1170:13
     |
1170 | impl<'a, K> Iterator for Drain<'a, K> {
     |             ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `K`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where K: core::marker::Sized` bound

error[E0277]: the size for values of type `collections::hash::set::Intersection<'a, T, S>` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1201:16
     |
1201 | impl<'a, T, S> Clone for Intersection<'a, T, S> {
     |                ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::Intersection<'a, T, S>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&T` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1208:16
     |
1208 | impl<'a, T, S> Iterator for Intersection<'a, T, S>
     |                ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::set::Difference<'a, T, S>` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1247:16
     |
1247 | impl<'a, T, S> Clone for Difference<'a, T, S> {
     |                ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::Difference<'a, T, S>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&T` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1254:16
     |
1254 | impl<'a, T, S> Iterator for Difference<'a, T, S>
     |                ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::set::SymmetricDifference<'a, T, S>` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1293:16
     |
1293 | impl<'a, T, S> Clone for SymmetricDifference<'a, T, S> {
     |                ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::SymmetricDifference<'a, T, S>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&T` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1300:16
     |
1300 | impl<'a, T, S> Iterator for SymmetricDifference<'a, T, S>
     |                ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::set::Union<'a, T, S>` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1332:16
     |
1332 | impl<'a, T, S> Clone for Union<'a, T, S> {
     |                ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::Union<'a, T, S>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&T` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1356:16
     |
1356 | impl<'a, T, S> Iterator for Union<'a, T, S>
     |                ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
  --> libstd/env.rs:59:1
   |
59 | / pub fn current_dir() -> io::Result<PathBuf> {
60 | |     os_imp::getcwd()
61 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/env.rs:59:1
   |
59 | / pub fn current_dir() -> io::Result<PathBuf> {
60 | |     os_imp::getcwd()
61 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/env.rs:80:1
   |
80 | / pub fn set_current_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {
81 | |     os_imp::chdir(path.as_ref())
82 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/env.rs:80:1
   |
80 | / pub fn set_current_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {
81 | |     os_imp::chdir(path.as_ref())
82 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `(alloc_crate::prelude::String, alloc_crate::prelude::String)` cannot be known at compilation time
   --> libstd/env.rs:157:6
    |
157 | impl Iterator for Vars {
    |      ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(alloc_crate::prelude::String, alloc_crate::prelude::String)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(ffi::os_str::OsString, ffi::os_str::OsString)` cannot be known at compilation time
   --> libstd/env.rs:175:6
    |
175 | impl Iterator for VarsOs {
    |      ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(ffi::os_str::OsString, ffi::os_str::OsString)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/env.rs:207:1
    |
207 | / pub fn var<K: AsRef<OsStr>>(key: K) -> Result<String, VarError> {
208 | |     _var(key.as_ref())
209 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `env::VarError` cannot be known at compilation time
   --> libstd/env.rs:207:1
    |
207 | / pub fn var<K: AsRef<OsStr>>(key: K) -> Result<String, VarError> {
208 | |     _var(key.as_ref())
209 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `env::VarError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/env.rs:211:1
    |
211 | / fn _var(key: &OsStr) -> Result<String, VarError> {
212 | |     match var_os(key) {
213 | |         Some(s) => s.into_string().map_err(VarError::NotUnicode),
214 | |         None => Err(VarError::NotPresent),
215 | |     }
216 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `env::VarError` cannot be known at compilation time
   --> libstd/env.rs:211:1
    |
211 | / fn _var(key: &OsStr) -> Result<String, VarError> {
212 | |     match var_os(key) {
213 | |         Some(s) => s.into_string().map_err(VarError::NotUnicode),
214 | |         None => Err(VarError::NotPresent),
215 | |     }
216 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `env::VarError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/env.rs:235:1
    |
235 | / pub fn var_os<K: AsRef<OsStr>>(key: K) -> Option<OsString> {
236 | |     _var_os(key.as_ref())
237 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/env.rs:239:1
    |
239 | / fn _var_os(key: &OsStr) -> Option<OsString> {
240 | |     os_imp::getenv(key).unwrap_or_else(|e| {
241 | |         panic!("failed to get environment variable `{:?}`: {}", key, e)
242 | |     })
243 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
   --> libstd/env.rs:405:10
    |
405 | impl<'a> Iterator for SplitPaths<'a> {
    |          ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/env.rs:491:1
    |
491 | / pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>
492 | |     where I: IntoIterator<Item=T>, T: AsRef<OsStr>
493 | | {
494 | |     os_imp::join_paths(paths.into_iter()).map_err(|e| {
495 | |         JoinPathsError { inner: e }
496 | |     })
497 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::iter::IntoIterator`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/env.rs:491:1
    |
491 | / pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>
492 | |     where I: IntoIterator<Item=T>, T: AsRef<OsStr>
493 | | {
494 | |     os_imp::join_paths(paths.into_iter()).map_err(|e| {
495 | |         JoinPathsError { inner: e }
496 | |     })
497 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `env::JoinPathsError` cannot be known at compilation time
   --> libstd/env.rs:491:1
    |
491 | / pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>
492 | |     where I: IntoIterator<Item=T>, T: AsRef<OsStr>
493 | | {
494 | |     os_imp::join_paths(paths.into_iter()).map_err(|e| {
495 | |         JoinPathsError { inner: e }
496 | |     })
497 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `env::JoinPathsError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
   --> libstd/env.rs:546:1
    |
546 | / pub fn home_dir() -> Option<PathBuf> {
547 | |     os_imp::home_dir()
548 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
   --> libstd/env.rs:650:1
    |
650 | / pub fn current_exe() -> io::Result<PathBuf> {
651 | |     os_imp::current_exe()
652 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/env.rs:650:1
    |
650 | / pub fn current_exe() -> io::Result<PathBuf> {
651 | |     os_imp::current_exe()
652 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/env.rs:747:6
    |
747 | impl Iterator for Args {
    |      ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/env.rs:784:6
    |
784 | impl Iterator for ArgsOs {
    |      ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `E` cannot be known at compilation time
   --> libstd/error.rs:219:25
    |
219 | impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {
    |                         ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `E`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where E: core::marker::Sized` bound

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn error::Error + 'a)>` cannot be known at compilation time
   --> libstd/error.rs:219:25
    |
219 | impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {
    |                         ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn error::Error + 'a)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `E` cannot be known at compilation time
   --> libstd/error.rs:255:39
    |
255 | impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a> {
    |                                       ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `E`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where E: core::marker::Sized` bound

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'a)>` cannot be known at compilation time
   --> libstd/error.rs:255:39
    |
255 | impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a> {
    |                                       ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'a)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/error.rs:297:6
    |
297 | impl From<String> for Box<dyn Error + Send + Sync> {
    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'static)>` cannot be known at compilation time
   --> libstd/error.rs:297:6
    |
297 | impl From<String> for Box<dyn Error + Send + Sync> {
    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/error.rs:330:6
    |
330 | impl From<String> for Box<dyn Error> {
    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn error::Error + 'static)>` cannot be known at compilation time
   --> libstd/error.rs:330:6
    |
330 | impl From<String> for Box<dyn Error> {
    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn error::Error + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'b str` cannot be known at compilation time
   --> libstd/error.rs:351:14
    |
351 | impl<'a, 'b> From<&'b str> for Box<dyn Error + Send + Sync + 'a> {
    |              ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'b str`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'a)>` cannot be known at compilation time
   --> libstd/error.rs:351:14
    |
351 | impl<'a, 'b> From<&'b str> for Box<dyn Error + Send + Sync + 'a> {
    |              ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'a)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a str` cannot be known at compilation time
   --> libstd/error.rs:371:10
    |
371 | impl<'a> From<&'a str> for Box<dyn Error> {
    |          ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a str`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn error::Error + 'static)>` cannot be known at compilation time
   --> libstd/error.rs:371:10
    |
371 | impl<'a> From<&'a str> for Box<dyn Error> {
    |          ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn error::Error + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'b, str>` cannot be known at compilation time
   --> libstd/error.rs:390:14
    |
390 | impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {
    |              ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'b, str>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'a)>` cannot be known at compilation time
   --> libstd/error.rs:390:14
    |
390 | impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {
    |              ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'a)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'a, str>` cannot be known at compilation time
   --> libstd/error.rs:411:10
    |
411 | impl<'a> From<Cow<'a, str>> for Box<dyn Error> {
    |          ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'a, str>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn error::Error + 'static)>` cannot be known at compilation time
   --> libstd/error.rs:411:10
    |
411 | impl<'a> From<Cow<'a, str>> for Box<dyn Error> {
    |          ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn error::Error + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:647:6
    |
647 | impl From<CString> for Vec<u8> {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::prelude::Vec<u8>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:647:6
    |
647 | impl From<CString> for Vec<u8> {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::Vec<u8>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:647:6
    |
647 | impl From<CString> for Vec<u8> {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `&'a ffi::c_str::CStr` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:672:10
    |
672 | impl<'a> Default for &'a CStr {
    |          ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::c_str::CStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:680:6
    |
680 | impl Default for CString {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'a, ffi::c_str::CStr>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:695:10
    |
695 | impl<'a> From<Cow<'a, CStr>> for CString {
    |          ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'a, ffi::c_str::CStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:695:10
    |
695 | impl<'a> From<Cow<'a, CStr>> for CString {
    |          ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a ffi::c_str::CStr` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:703:10
    |
703 | impl<'a> From<&'a CStr> for Box<CStr> {
    |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::c_str::CStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<ffi::c_str::CStr>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:703:10
    |
703 | impl<'a> From<&'a CStr> for Box<CStr> {
    |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<ffi::c_str::CStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<ffi::c_str::CStr>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:711:6
    |
711 | impl From<Box<CStr>> for CString {
    |      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<ffi::c_str::CStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:711:6
    |
711 | impl From<Box<CStr>> for CString {
    |      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<ffi::c_str::CStr>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:723:6
    |
723 | impl Clone for Box<CStr> {
    |      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<ffi::c_str::CStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:731:6
    |
731 | impl From<CString> for Box<CStr> {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<ffi::c_str::CStr>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:731:6
    |
731 | impl From<CString> for Box<CStr> {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<ffi::c_str::CStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:743:10
    |
743 | impl<'a> From<CString> for Cow<'a, CStr> {
    |          ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'a, ffi::c_str::CStr>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:743:10
    |
743 | impl<'a> From<CString> for Cow<'a, CStr> {
    |          ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'a, ffi::c_str::CStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a ffi::c_str::CStr` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:751:10
    |
751 | impl<'a> From<&'a CStr> for Cow<'a, CStr> {
    |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::c_str::CStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'a, ffi::c_str::CStr>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:751:10
    |
751 | impl<'a> From<&'a CStr> for Cow<'a, CStr> {
    |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'a, ffi::c_str::CStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a ffi::c_str::CString` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:759:10
    |
759 | impl<'a> From<&'a CString> for Cow<'a, CStr> {
    |          ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'a, ffi::c_str::CStr>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:759:10
    |
759 | impl<'a> From<&'a CString> for Cow<'a, CStr> {
    |          ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'a, ffi::c_str::CStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:767:6
    |
767 | impl From<CString> for Arc<CStr> {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::sync::Arc<ffi::c_str::CStr>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:767:6
    |
767 | impl From<CString> for Arc<CStr> {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::sync::Arc<ffi::c_str::CStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a ffi::c_str::CStr` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:780:10
    |
780 | impl<'a> From<&'a CStr> for Arc<CStr> {
    |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::c_str::CStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::sync::Arc<ffi::c_str::CStr>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:780:10
    |
780 | impl<'a> From<&'a CStr> for Arc<CStr> {
    |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::sync::Arc<ffi::c_str::CStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:789:6
    |
789 | impl From<CString> for Rc<CStr> {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::rc::Rc<ffi::c_str::CStr>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:789:6
    |
789 | impl From<CString> for Rc<CStr> {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::rc::Rc<ffi::c_str::CStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a ffi::c_str::CStr` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:802:10
    |
802 | impl<'a> From<&'a CStr> for Rc<CStr> {
    |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::c_str::CStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::rc::Rc<ffi::c_str::CStr>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:802:10
    |
802 | impl<'a> From<&'a CStr> for Rc<CStr> {
    |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::rc::Rc<ffi::c_str::CStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<ffi::c_str::CStr>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:811:6
    |
811 | impl Default for Box<CStr> {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<ffi::c_str::CStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::NulError` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:866:6
    |
866 | impl From<NulError> for io::Error {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::NulError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:866:6
    |
866 | impl From<NulError> for io::Error {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
    --> libstd/ffi/c_str.rs:1272:6
     |
1272 | impl ToOwned for CStr {
     |      ^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a ffi::c_str::CStr` cannot be known at compilation time
    --> libstd/ffi/c_str.rs:1281:10
     |
1281 | impl<'a> From<&'a CStr> for CString {
     |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::c_str::CStr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
    --> libstd/ffi/c_str.rs:1281:10
     |
1281 | impl<'a> From<&'a CStr> for CString {
     |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:353:6
    |
353 | impl From<String> for OsString {
    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:353:6
    |
353 | impl From<String> for OsString {
    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a T` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:363:36
    |
363 | impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for OsString {
    |                                    ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:363:36
    |
363 | impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for OsString {
    |                                    ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:390:6
    |
390 | impl Default for OsString {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a ffi::os_str::OsStr` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:632:10
    |
632 | impl<'a> From<&'a OsStr> for Box<OsStr> {
    |          ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::os_str::OsStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<ffi::os_str::OsStr>` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:632:10
    |
632 | impl<'a> From<&'a OsStr> for Box<OsStr> {
    |          ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<ffi::os_str::OsStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<ffi::os_str::OsStr>` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:640:6
    |
640 | impl From<Box<OsStr>> for OsString {
    |      ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<ffi::os_str::OsStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:640:6
    |
640 | impl From<Box<OsStr>> for OsString {
    |      ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:651:6
    |
651 | impl From<OsString> for Box<OsStr> {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<ffi::os_str::OsStr>` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:651:6
    |
651 | impl From<OsString> for Box<OsStr> {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<ffi::os_str::OsStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<ffi::os_str::OsStr>` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:662:6
    |
662 | impl Clone for Box<OsStr> {
    |      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<ffi::os_str::OsStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:670:6
    |
670 | impl From<OsString> for Arc<OsStr> {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::sync::Arc<ffi::os_str::OsStr>` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:670:6
    |
670 | impl From<OsString> for Arc<OsStr> {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::sync::Arc<ffi::os_str::OsStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a ffi::os_str::OsStr` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:683:10
    |
683 | impl<'a> From<&'a OsStr> for Arc<OsStr> {
    |          ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::os_str::OsStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::sync::Arc<ffi::os_str::OsStr>` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:683:10
    |
683 | impl<'a> From<&'a OsStr> for Arc<OsStr> {
    |          ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::sync::Arc<ffi::os_str::OsStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:692:6
    |
692 | impl From<OsString> for Rc<OsStr> {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::rc::Rc<ffi::os_str::OsStr>` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:692:6
    |
692 | impl From<OsString> for Rc<OsStr> {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::rc::Rc<ffi::os_str::OsStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a ffi::os_str::OsStr` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:705:10
    |
705 | impl<'a> From<&'a OsStr> for Rc<OsStr> {
    |          ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::os_str::OsStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::rc::Rc<ffi::os_str::OsStr>` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:705:10
    |
705 | impl<'a> From<&'a OsStr> for Rc<OsStr> {
    |          ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::rc::Rc<ffi::os_str::OsStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:714:10
    |
714 | impl<'a> From<OsString> for Cow<'a, OsStr> {
    |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'a, ffi::os_str::OsStr>` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:714:10
    |
714 | impl<'a> From<OsString> for Cow<'a, OsStr> {
    |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'a, ffi::os_str::OsStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a ffi::os_str::OsStr` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:722:10
    |
722 | impl<'a> From<&'a OsStr> for Cow<'a, OsStr> {
    |          ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::os_str::OsStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'a, ffi::os_str::OsStr>` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:722:10
    |
722 | impl<'a> From<&'a OsStr> for Cow<'a, OsStr> {
    |          ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'a, ffi::os_str::OsStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:730:10
    |
730 | impl<'a> From<&'a OsString> for Cow<'a, OsStr> {
    |          ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'a, ffi::os_str::OsStr>` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:730:10
    |
730 | impl<'a> From<&'a OsString> for Cow<'a, OsStr> {
    |          ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'a, ffi::os_str::OsStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'a, ffi::os_str::OsStr>` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:738:10
    |
738 | impl<'a> From<Cow<'a, OsStr>> for OsString {
    |          ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'a, ffi::os_str::OsStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:738:10
    |
738 | impl<'a> From<Cow<'a, OsStr>> for OsString {
    |          ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<ffi::os_str::OsStr>` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:746:6
    |
746 | impl Default for Box<OsStr> {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<ffi::os_str::OsStr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a ffi::os_str::OsStr` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:754:10
    |
754 | impl<'a> Default for &'a OsStr {
    |          ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::os_str::OsStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:884:6
    |
884 | impl ToOwned for OsStr {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::prelude::Vec<u8>` cannot be known at compilation time
   --> libstd/fs.rs:265:1
    |
265 | / pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {
266 | |     let mut file = File::open(path)?;
267 | |     let mut bytes = Vec::with_capacity(initial_buffer_size(&file));
268 | |     file.read_to_end(&mut bytes)?;
269 | |     Ok(bytes)
270 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::Vec<u8>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:265:1
    |
265 | / pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {
266 | |     let mut file = File::open(path)?;
267 | |     let mut bytes = Vec::with_capacity(initial_buffer_size(&file));
268 | |     file.read_to_end(&mut bytes)?;
269 | |     Ok(bytes)
270 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/fs.rs:265:1
    |
265 | / pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {
266 | |     let mut file = File::open(path)?;
267 | |     let mut bytes = Vec::with_capacity(initial_buffer_size(&file));
268 | |     file.read_to_end(&mut bytes)?;
269 | |     Ok(bytes)
270 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/fs.rs:307:1
    |
307 | / pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {
308 | |     let mut file = File::open(path)?;
309 | |     let mut string = String::with_capacity(initial_buffer_size(&file));
310 | |     file.read_to_string(&mut string)?;
311 | |     Ok(string)
312 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:307:1
    |
307 | / pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {
308 | |     let mut file = File::open(path)?;
309 | |     let mut string = String::with_capacity(initial_buffer_size(&file));
310 | |     file.read_to_string(&mut string)?;
311 | |     Ok(string)
312 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/fs.rs:337:1
    |
337 | / pub fn write<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()> {
338 | |     File::create(path)?.write_all(contents.as_ref())
339 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:337:1
    |
337 | / pub fn write<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()> {
338 | |     File::create(path)?.write_all(contents.as_ref())
339 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::result::Result<fs::DirEntry, io::error::Error>` cannot be known at compilation time
    --> libstd/fs.rs:1260:6
     |
1260 | impl Iterator for ReadDir {
     |      ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<fs::DirEntry, io::error::Error>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:1439:1
     |
1439 | / pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {
1440 | |     fs_imp::unlink(path.as_ref())
1441 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1439:1
     |
1439 | / pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {
1440 | |     fs_imp::unlink(path.as_ref())
1441 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::Metadata` cannot be known at compilation time
    --> libstd/fs.rs:1477:1
     |
1477 | / pub fn metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {
1478 | |     fs_imp::stat(path.as_ref()).map(Metadata)
1479 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `fs::Metadata`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1477:1
     |
1477 | / pub fn metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {
1478 | |     fs_imp::stat(path.as_ref()).map(Metadata)
1479 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::Metadata` cannot be known at compilation time
    --> libstd/fs.rs:1511:1
     |
1511 | / pub fn symlink_metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {
1512 | |     fs_imp::lstat(path.as_ref()).map(Metadata)
1513 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `fs::Metadata`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1511:1
     |
1511 | / pub fn symlink_metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {
1512 | |     fs_imp::lstat(path.as_ref()).map(Metadata)
1513 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:1554:1
     |
1554 | / pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()> {
1555 | |     fs_imp::rename(from.as_ref(), to.as_ref())
1556 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1554:1
     |
1554 | / pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()> {
1555 | |     fs_imp::rename(from.as_ref(), to.as_ref())
1556 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `u64` cannot be known at compilation time
    --> libstd/fs.rs:1608:1
     |
1608 | / pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {
1609 | |     fs_imp::copy(from.as_ref(), to.as_ref())
1610 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u64`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1608:1
     |
1608 | / pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {
1609 | |     fs_imp::copy(from.as_ref(), to.as_ref())
1610 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:1643:1
     |
1643 | / pub fn hard_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()> {
1644 | |     fs_imp::link(src.as_ref(), dst.as_ref())
1645 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1643:1
     |
1643 | / pub fn hard_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()> {
1644 | |     fs_imp::link(src.as_ref(), dst.as_ref())
1645 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:1669:1
     |
1669 | / pub fn soft_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()> {
1670 | |     fs_imp::symlink(src.as_ref(), dst.as_ref())
1671 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1669:1
     |
1669 | / pub fn soft_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()> {
1670 | |     fs_imp::symlink(src.as_ref(), dst.as_ref())
1671 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/fs.rs:1703:1
     |
1703 | / pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {
1704 | |     fs_imp::readlink(path.as_ref())
1705 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1703:1
     |
1703 | / pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {
1704 | |     fs_imp::readlink(path.as_ref())
1705 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/fs.rs:1744:1
     |
1744 | / pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {
1745 | |     fs_imp::canonicalize(path.as_ref())
1746 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1744:1
     |
1744 | / pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {
1745 | |     fs_imp::canonicalize(path.as_ref())
1746 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:1777:1
     |
1777 | / pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {
1778 | |     DirBuilder::new().create(path.as_ref())
1779 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1777:1
     |
1777 | / pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {
1778 | |     DirBuilder::new().create(path.as_ref())
1779 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:1819:1
     |
1819 | / pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {
1820 | |     DirBuilder::new().recursive(true).create(path.as_ref())
1821 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1819:1
     |
1819 | / pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {
1820 | |     DirBuilder::new().recursive(true).create(path.as_ref())
1821 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:1852:1
     |
1852 | / pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {
1853 | |     fs_imp::rmdir(path.as_ref())
1854 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1852:1
     |
1852 | / pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {
1853 | |     fs_imp::rmdir(path.as_ref())
1854 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:1886:1
     |
1886 | / pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {
1887 | |     fs_imp::remove_dir_all(path.as_ref())
1888 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1886:1
     |
1886 | / pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {
1887 | |     fs_imp::remove_dir_all(path.as_ref())
1888 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::ReadDir` cannot be known at compilation time
    --> libstd/fs.rs:1939:1
     |
1939 | / pub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {
1940 | |     fs_imp::readdir(path.as_ref()).map(ReadDir)
1941 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `fs::ReadDir`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1939:1
     |
1939 | / pub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {
1940 | |     fs_imp::readdir(path.as_ref()).map(ReadDir)
1941 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:1974:1
     |
1974 | / pub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions)
1975 | |                                        -> io::Result<()> {
1976 | |     fs_imp::set_perm(path.as_ref(), perm.0)
1977 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1974:1
     |
1974 | / pub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions)
1975 | |                                        -> io::Result<()> {
1976 | |     fs_imp::set_perm(path.as_ref(), perm.0)
1977 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `W` cannot be known at compilation time
   --> libstd/io/buffered.rs:392:5
    |
392 |     inner: Option<W>,
    |     ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `W`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where W: core::marker::Sized` bound
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/buffered.rs:393:5
    |
393 |     buf: Vec<u8>,
    |     ^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `io::buffered::IntoInnerError<W>` cannot be known at compilation time
   --> libstd/io/buffered.rs:673:9
    |
673 | impl<W> From<IntoInnerError<W>> for Error {
    |         ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::buffered::IntoInnerError<W>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:673:9
    |
673 | impl<W> From<IntoInnerError<W>> for Error {
    |         ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/buffered.rs:947:9
    |
947 |         lengths: Vec<usize>,
    |         ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/cursor.rs:257:1
    |
257 | / fn slice_write(pos_mut: &mut u64, slice: &mut [u8], buf: &[u8]) -> io::Result<usize> {
258 | |     let pos = cmp::min(*pos_mut, slice.len() as u64);
259 | |     let amt = (&mut slice[(pos as usize)..]).write(buf)?;
260 | |     *pos_mut += amt as u64;
261 | |     Ok(amt)
262 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:257:1
    |
257 | / fn slice_write(pos_mut: &mut u64, slice: &mut [u8], buf: &[u8]) -> io::Result<usize> {
258 | |     let pos = cmp::min(*pos_mut, slice.len() as u64);
259 | |     let amt = (&mut slice[(pos as usize)..]).write(buf)?;
260 | |     *pos_mut += amt as u64;
261 | |     Ok(amt)
262 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/cursor.rs:265:1
    |
265 | / fn vec_write(pos_mut: &mut u64, vec: &mut Vec<u8>, buf: &[u8]) -> io::Result<usize> {
266 | |     let pos: usize = (*pos_mut).try_into().map_err(|_| {
267 | |         Error::new(ErrorKind::InvalidInput,
268 | |                     "cursor position exceeds maximum possible vector length")
...   |
288 | |     Ok(buf.len())
289 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/cursor.rs:265:1
    |
265 | / fn vec_write(pos_mut: &mut u64, vec: &mut Vec<u8>, buf: &[u8]) -> io::Result<usize> {
266 | |     let pos: usize = (*pos_mut).try_into().map_err(|_| {
267 | |         Error::new(ErrorKind::InvalidInput,
268 | |                     "cursor position exceeds maximum possible vector length")
...   |
288 | |     Ok(buf.len())
289 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:265:1
    |
265 | / fn vec_write(pos_mut: &mut u64, vec: &mut Vec<u8>, buf: &[u8]) -> io::Result<usize> {
266 | |     let pos: usize = (*pos_mut).try_into().map_err(|_| {
267 | |         Error::new(ErrorKind::InvalidInput,
268 | |                     "cursor position exceeds maximum possible vector length")
...   |
288 | |     Ok(buf.len())
289 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/cursor.rs:301:10
    |
301 | impl<'a> Write for Cursor<&'a mut Vec<u8>> {
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/cursor.rs:309:6
    |
309 | impl Write for Cursor<Vec<u8>> {
    |      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `io::error::ErrorKind` cannot be known at compilation time
   --> libstd/io/error.rs:214:6
    |
214 | impl From<ErrorKind> for Error {
    |      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::ErrorKind`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/error.rs:214:6
    |
214 | impl From<ErrorKind> for Error {
    |      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/impls.rs:260:6
    |
260 | impl Write for Vec<u8> {
    |      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u64` cannot be known at compilation time
  --> libstd/io/util.rs:53:1
   |
53 | / pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> io::Result<u64>
54 | |     where R: Read, W: Write
55 | | {
56 | |     let mut buf = unsafe {
...  |
72 | |     }
73 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u64`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/util.rs:53:1
   |
53 | / pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> io::Result<u64>
54 | |     where R: Read, W: Write
55 | | {
56 | |     let mut buf = unsafe {
...  |
72 | |     }
73 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::stdio::StdinRaw` cannot be known at compilation time
  --> libstd/io/stdio.rs:54:1
   |
54 | fn stdin_raw() -> io::Result<StdinRaw> { stdio::Stdin::new().map(StdinRaw) }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::stdio::StdinRaw`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/stdio.rs:54:1
   |
54 | fn stdin_raw() -> io::Result<StdinRaw> { stdio::Stdin::new().map(StdinRaw) }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::stdio::StdoutRaw` cannot be known at compilation time
  --> libstd/io/stdio.rs:65:1
   |
65 | fn stdout_raw() -> io::Result<StdoutRaw> { stdio::Stdout::new().map(StdoutRaw) }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::stdio::StdoutRaw`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/stdio.rs:65:1
   |
65 | fn stdout_raw() -> io::Result<StdoutRaw> { stdio::Stdout::new().map(StdoutRaw) }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::stdio::StderrRaw` cannot be known at compilation time
  --> libstd/io/stdio.rs:74:1
   |
74 | fn stderr_raw() -> io::Result<StderrRaw> { stdio::Stderr::new().map(StderrRaw) }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::stdio::StderrRaw`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/stdio.rs:74:1
   |
74 | fn stderr_raw() -> io::Result<StderrRaw> { stdio::Stderr::new().map(StderrRaw) }
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/io/stdio.rs:123:1
    |
123 | / fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {
124 | |     match r {
125 | |         Err(ref e) if stdio::is_ebadf(e) => Ok(default),
126 | |         r => r
127 | |     }
128 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:123:1
    |
123 | / fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {
124 | |     match r {
125 | |         Err(ref e) if stdio::is_ebadf(e) => Ok(default),
126 | |         r => r
127 | |     }
128 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/io/stdio.rs:635:1
    |
635 | / pub fn set_panic(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {
636 | |     use panicking::LOCAL_STDERR;
637 | |     use mem;
638 | |     LOCAL_STDERR.with(move |slot| {
...   |
643 | |     })
644 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0038]: the trait `io::Write` cannot be made into an object
   --> libstd/io/stdio.rs:635:1
    |
635 | pub fn set_panic(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `io::Write` cannot be made into an object
    |
    = note: method `by_ref` references the `Self` type in its arguments or return type

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/io/stdio.rs:659:1
    |
659 | / pub fn set_print(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {
660 | |     use mem;
661 | |     LOCAL_STDOUT.with(move |slot| {
662 | |         mem::replace(&mut *slot.borrow_mut(), sink)
...   |
666 | |     })
667 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0038]: the trait `io::Write` cannot be made into an object
   --> libstd/io/stdio.rs:659:1
    |
659 | pub fn set_print(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `io::Write` cannot be made into an object
    |
    = note: method `by_ref` references the `Self` type in its arguments or return type

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/io/stdio.rs:679:1
    |
679 | / fn print_to<T>(
680 | |     args: fmt::Arguments,
681 | |     local_s: &'static LocalKey<RefCell<Option<Box<dyn Write+Send>>>>,
682 | |     global_s: fn() -> T,
...   |
701 | |     }
702 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0038]: the trait `io::Write` cannot be made into an object
   --> libstd/io/stdio.rs:679:1
    |
679 | / fn print_to<T>(
680 | |     args: fmt::Arguments,
681 | |     local_s: &'static LocalKey<RefCell<Option<Box<dyn Write+Send>>>>,
682 | |     global_s: fn() -> T,
...   |
701 | |     }
702 | | }
    | |_^ the trait `io::Write` cannot be made into an object
    |
    = note: method `by_ref` references the `Self` type in its arguments or return type

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/mod.rs:309:20
    |
309 | struct Guard<'a> { buf: &'a mut Vec<u8>, len: usize }
    |                    ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/mod.rs:335:1
    |
335 | / fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>
336 | |     where F: FnOnce(&mut Vec<u8>) -> Result<usize>
337 | | {
338 | |     unsafe {
...   |
350 | |     }
351 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/mod.rs:335:1
    |
335 | / fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>
336 | |     where F: FnOnce(&mut Vec<u8>) -> Result<usize>
337 | | {
338 | |     unsafe {
...   |
350 | |     }
351 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/mod.rs:362:1
    |
362 | / fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {
363 | |     read_to_end_with_reservation(r, buf, 32)
364 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/mod.rs:362:1
    |
362 | / fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {
363 | |     read_to_end_with_reservation(r, buf, 32)
364 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/mod.rs:362:1
    |
362 | / fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {
363 | |     read_to_end_with_reservation(r, buf, 32)
364 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/mod.rs:366:1
    |
366 | / fn read_to_end_with_reservation<R: Read + ?Sized>(r: &mut R,
367 | |                                                   buf: &mut Vec<u8>,
368 | |                                                   reservation_size: usize) -> Result<usize>
369 | | {
...   |
397 | |     ret
398 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/mod.rs:366:1
    |
366 | / fn read_to_end_with_reservation<R: Read + ?Sized>(r: &mut R,
367 | |                                                   buf: &mut Vec<u8>,
368 | |                                                   reservation_size: usize) -> Result<usize>
369 | | {
...   |
397 | |     ret
398 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/mod.rs:366:1
    |
366 | / fn read_to_end_with_reservation<R: Read + ?Sized>(r: &mut R,
367 | |                                                   buf: &mut Vec<u8>,
368 | |                                                   reservation_size: usize) -> Result<usize>
369 | | {
...   |
397 | |     ret
398 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/mod.rs:1123:13
     |
1123 |             error: Result<()>,
     |             ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1123:13
     |
1123 |             error: Result<()>,
     |             ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
    --> libstd/io/mod.rs:1252:1
     |
1252 | / fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)
1253 | |                                    -> Result<usize> {
1254 | |     let mut read = 0;
1255 | |     loop {
...    |
1278 | |     }
1279 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u8`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/io/mod.rs:1252:1
     |
1252 | / fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)
1253 | |                                    -> Result<usize> {
1254 | |     let mut read = 0;
1255 | |     loop {
...    |
1278 | |     }
1279 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1252:1
     |
1252 | / fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)
1253 | |                                    -> Result<usize> {
1254 | |     let mut read = 0;
1255 | |     loop {
...    |
1278 | |     }
1279 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0038]: the trait `io::Read` cannot be made into an object
    --> libstd/io/mod.rs:1939:1
     |
1939 | fn read_one_byte(reader: &mut dyn Read) -> Option<Result<u8>> {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `io::Read` cannot be made into an object
     |
     = note: method `by_ref` references the `Self` type in its arguments or return type
     = note: method `bytes` references the `Self` type in its arguments or return type
     = note: method `chain` references the `Self` type in its arguments or return type
     = note: method `take` references the `Self` type in its arguments or return type

error[E0277]: the size for values of type `core::result::Result<u8, io::error::Error>` cannot be known at compilation time
    --> libstd/io/mod.rs:1939:1
     |
1939 | / fn read_one_byte(reader: &mut dyn Read) -> Option<Result<u8>> {
1940 | |     let mut buf = [0];
1941 | |     loop {
1942 | |         return match reader.read(&mut buf) {
...    |
1948 | |     }
1949 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<u8, io::error::Error>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
    --> libstd/io/mod.rs:1939:1
     |
1939 | / fn read_one_byte(reader: &mut dyn Read) -> Option<Result<u8>> {
1940 | |     let mut buf = [0];
1941 | |     loop {
1942 | |         return match reader.read(&mut buf) {
...    |
1948 | |     }
1949 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u8`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1939:1
     |
1939 | / fn read_one_byte(reader: &mut dyn Read) -> Option<Result<u8>> {
1940 | |     let mut buf = [0];
1941 | |     loop {
1942 | |         return match reader.read(&mut buf) {
...    |
1948 | |     }
1949 | | }
     | |_^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::result::Result<u8, io::error::Error>` cannot be known at compilation time
    --> libstd/io/mod.rs:1964:15
     |
1964 | impl<R: Read> Iterator for Bytes<R> {
     |               ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<u8, io::error::Error>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `core::result::Result<alloc_crate::prelude::Vec<u8>, io::error::Error>` cannot be known at compilation time
    --> libstd/io/mod.rs:1987:18
     |
1987 | impl<B: BufRead> Iterator for Split<B> {
     |                  ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<alloc_crate::prelude::Vec<u8>, io::error::Error>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `core::result::Result<alloc_crate::prelude::String, io::error::Error>` cannot be known at compilation time
    --> libstd/io/mod.rs:2018:18
     |
2018 | impl<B: BufRead> Iterator for Lines<B> {
     |                  ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<alloc_crate::prelude::String, io::error::Error>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv4Addr` cannot be known at compilation time
   --> libstd/net/ip.rs:671:6
    |
671 | impl From<Ipv4Addr> for IpAddr {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv4Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::IpAddr` cannot be known at compilation time
   --> libstd/net/ip.rs:671:6
    |
671 | impl From<Ipv4Addr> for IpAddr {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::IpAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv6Addr` cannot be known at compilation time
   --> libstd/net/ip.rs:678:6
    |
678 | impl From<Ipv6Addr> for IpAddr {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::IpAddr` cannot be known at compilation time
   --> libstd/net/ip.rs:678:6
    |
678 | impl From<Ipv6Addr> for IpAddr {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::IpAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv4Addr` cannot be known at compilation time
   --> libstd/net/ip.rs:700:6
    |
700 | impl Clone for Ipv4Addr {
    |      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv4Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv4Addr` cannot be known at compilation time
   --> libstd/net/ip.rs:786:6
    |
786 | impl From<Ipv4Addr> for u32 {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv4Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/net/ip.rs:786:6
    |
786 | impl From<Ipv4Addr> for u32 {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/net/ip.rs:804:6
    |
804 | impl From<u32> for Ipv4Addr {
    |      ^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv4Addr` cannot be known at compilation time
   --> libstd/net/ip.rs:804:6
    |
804 | impl From<u32> for Ipv4Addr {
    |      ^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv4Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `[u8; 4]` cannot be known at compilation time
   --> libstd/net/ip.rs:821:6
    |
821 | impl From<[u8; 4]> for Ipv4Addr {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `[u8; 4]`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv4Addr` cannot be known at compilation time
   --> libstd/net/ip.rs:821:6
    |
821 | impl From<[u8; 4]> for Ipv4Addr {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv4Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `[u8; 4]` cannot be known at compilation time
   --> libstd/net/ip.rs:836:6
    |
836 | impl From<[u8; 4]> for IpAddr {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `[u8; 4]`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::IpAddr` cannot be known at compilation time
   --> libstd/net/ip.rs:836:6
    |
836 | impl From<[u8; 4]> for IpAddr {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::IpAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/net/ip.rs:1281:21
     |
1281 | /                     fn fmt_subslice(segments: &[u16], fmt: &mut fmt::Formatter) -> fmt::Result {
1282 | |                         if !segments.is_empty() {
1283 | |                             write!(fmt, "{:x}", segments[0])?;
1284 | |                             for &seg in &segments[1..] {
...    |
1288 | |                         Ok(())
1289 | |                     }
     | |_____________________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/net/ip.rs:1281:21
     |
1281 | /                     fn fmt_subslice(segments: &[u16], fmt: &mut fmt::Formatter) -> fmt::Result {
1282 | |                         if !segments.is_empty() {
1283 | |                             write!(fmt, "{:x}", segments[0])?;
1284 | |                             for &seg in &segments[1..] {
...    |
1288 | |                         Ok(())
1289 | |                     }
     | |_____________________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::ip::Ipv6Addr` cannot be known at compilation time
    --> libstd/net/ip.rs:1312:6
     |
1312 | impl Clone for Ipv6Addr {
     |      ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6Addr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv6Addr` cannot be known at compilation time
    --> libstd/net/ip.rs:1397:6
     |
1397 | impl From<Ipv6Addr> for u128 {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6Addr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u128` cannot be known at compilation time
    --> libstd/net/ip.rs:1397:6
     |
1397 | impl From<Ipv6Addr> for u128 {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u128`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u128` cannot be known at compilation time
    --> libstd/net/ip.rs:1406:6
     |
1406 | impl From<u128> for Ipv6Addr {
     |      ^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u128`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv6Addr` cannot be known at compilation time
    --> libstd/net/ip.rs:1406:6
     |
1406 | impl From<u128> for Ipv6Addr {
     |      ^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6Addr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `[u8; 16]` cannot be known at compilation time
    --> libstd/net/ip.rs:1417:6
     |
1417 | impl From<[u8; 16]> for Ipv6Addr {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `[u8; 16]`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv6Addr` cannot be known at compilation time
    --> libstd/net/ip.rs:1417:6
     |
1417 | impl From<[u8; 16]> for Ipv6Addr {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6Addr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `[u16; 8]` cannot be known at compilation time
    --> libstd/net/ip.rs:1425:6
     |
1425 | impl From<[u16; 8]> for Ipv6Addr {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `[u16; 8]`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv6Addr` cannot be known at compilation time
    --> libstd/net/ip.rs:1425:6
     |
1425 | impl From<[u16; 8]> for Ipv6Addr {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6Addr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `[u8; 16]` cannot be known at compilation time
    --> libstd/net/ip.rs:1434:6
     |
1434 | impl From<[u8; 16]> for IpAddr {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `[u8; 16]`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::IpAddr` cannot be known at compilation time
    --> libstd/net/ip.rs:1434:6
     |
1434 | impl From<[u8; 16]> for IpAddr {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `net::ip::IpAddr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `[u16; 8]` cannot be known at compilation time
    --> libstd/net/ip.rs:1462:6
     |
1462 | impl From<[u16; 8]> for IpAddr {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `[u16; 8]`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::IpAddr` cannot be known at compilation time
    --> libstd/net/ip.rs:1462:6
     |
1462 | impl From<[u16; 8]> for IpAddr {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `net::ip::IpAddr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::addr::SocketAddrV4` cannot be known at compilation time
   --> libstd/net/addr.rs:556:6
    |
556 | impl From<SocketAddrV4> for SocketAddr {
    |      ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddrV4`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:556:6
    |
556 | impl From<SocketAddrV4> for SocketAddr {
    |      ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::addr::SocketAddrV6` cannot be known at compilation time
   --> libstd/net/addr.rs:564:6
    |
564 | impl From<SocketAddrV6> for SocketAddr {
    |      ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddrV6`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:564:6
    |
564 | impl From<SocketAddrV6> for SocketAddr {
    |      ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(I, u16)` cannot be known at compilation time
   --> libstd/net/addr.rs:572:23
    |
572 | impl<I: Into<IpAddr>> From<(I, u16)> for SocketAddr {
    |                       ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(I, u16)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:572:23
    |
572 | impl<I: Into<IpAddr>> From<(I, u16)> for SocketAddr {
    |                       ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::IpAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:572:1
    |
572 | / impl<I: Into<IpAddr>> From<(I, u16)> for SocketAddr {
573 | |     /// Converts a tuple struct (Into<[`IpAddr`]>, `u16`) into a [`SocketAddr`].
574 | |     ///
575 | |     /// This conversion creates a [`SocketAddr::V4`] for a [`IpAddr::V4`]
...   |
581 | |     }
582 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::IpAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::convert::Into`

error[E0277]: the size for values of type `net::addr::SocketAddrV4` cannot be known at compilation time
   --> libstd/net/addr.rs:636:6
    |
636 | impl Clone for SocketAddrV4 {
    |      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddrV4`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::addr::SocketAddrV6` cannot be known at compilation time
   --> libstd/net/addr.rs:640:6
    |
640 | impl Clone for SocketAddrV6 {
    |      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddrV6`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:795:1
    |
795 | / pub trait ToSocketAddrs {
796 | |     /// Returned iterator over socket addresses which this type may correspond
797 | |     /// to.
798 | |     #[stable(feature = "rust1", since = "1.0.0")]
...   |
809 | |     fn to_socket_addrs(&self) -> io::Result<Self::Iter>;
810 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::iter::Iterator`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:813:6
    |
813 | impl ToSocketAddrs for SocketAddr {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required because of the requirements on the impl of `core::iter::Iterator` for `core::option::IntoIter<net::addr::SocketAddr>`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:821:6
    |
821 | impl ToSocketAddrs for SocketAddrV4 {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required because of the requirements on the impl of `core::iter::Iterator` for `core::option::IntoIter<net::addr::SocketAddr>`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:829:6
    |
829 | impl ToSocketAddrs for SocketAddrV6 {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required because of the requirements on the impl of `core::iter::Iterator` for `core::option::IntoIter<net::addr::SocketAddr>`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:837:6
    |
837 | impl ToSocketAddrs for (IpAddr, u16) {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required because of the requirements on the impl of `core::iter::Iterator` for `core::option::IntoIter<net::addr::SocketAddr>`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:849:6
    |
849 | impl ToSocketAddrs for (Ipv4Addr, u16) {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required because of the requirements on the impl of `core::iter::Iterator` for `core::option::IntoIter<net::addr::SocketAddr>`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:858:6
    |
858 | impl ToSocketAddrs for (Ipv6Addr, u16) {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required because of the requirements on the impl of `core::iter::Iterator` for `core::option::IntoIter<net::addr::SocketAddr>`

error[E0277]: the size for values of type `alloc_crate::vec::IntoIter<net::addr::SocketAddr>` cannot be known at compilation time
   --> libstd/net/addr.rs:866:1
    |
866 | / fn resolve_socket_addr(s: &str, p: u16) -> io::Result<vec::IntoIter<SocketAddr>> {
867 | |     let ips = lookup_host(s)?;
868 | |     let v: Vec<_> = ips.map(|mut a| { a.set_port(p); a }).collect();
869 | |     Ok(v.into_iter())
870 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::vec::IntoIter<net::addr::SocketAddr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:866:1
    |
866 | / fn resolve_socket_addr(s: &str, p: u16) -> io::Result<vec::IntoIter<SocketAddr>> {
867 | |     let ips = lookup_host(s)?;
868 | |     let v: Vec<_> = ips.map(|mut a| { a.set_port(p); a }).collect();
869 | |     Ok(v.into_iter())
870 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:866:1
    |
866 | / fn resolve_socket_addr(s: &str, p: u16) -> io::Result<vec::IntoIter<SocketAddr>> {
867 | |     let ips = lookup_host(s)?;
868 | |     let v: Vec<_> = ips.map(|mut a| { a.set_port(p); a }).collect();
869 | |     Ok(v.into_iter())
870 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::vec::IntoIter`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:873:10
    |
873 | impl<'a> ToSocketAddrs for (&'a str, u16) {
    |          ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required because of the requirements on the impl of `core::iter::Iterator` for `alloc_crate::vec::IntoIter<net::addr::SocketAddr>`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:894:6
    |
894 | impl ToSocketAddrs for str {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required because of the requirements on the impl of `core::iter::Iterator` for `alloc_crate::vec::IntoIter<net::addr::SocketAddr>`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:922:10
    |
922 | impl<'a> ToSocketAddrs for &'a [SocketAddr] {
    |          ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required because of the requirements on the impl of `core::iter::Iterator` for `core::iter::Cloned<core::slice::Iter<'_, net::addr::SocketAddr>>`

error[E0277]: the size for values of type `core::slice::Iter<'_, net::addr::SocketAddr>` cannot be known at compilation time
   --> libstd/net/addr.rs:922:10
    |
922 | impl<'a> ToSocketAddrs for &'a [SocketAddr] {
    |          ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::slice::Iter<'_, net::addr::SocketAddr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required because of the requirements on the impl of `core::iter::Iterator` for `core::iter::Cloned<core::slice::Iter<'_, net::addr::SocketAddr>>`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:939:6
    |
939 | impl ToSocketAddrs for String {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required because of the requirements on the impl of `core::iter::Iterator` for `alloc_crate::vec::IntoIter<net::addr::SocketAddr>`

error[E0277]: the size for values of type `core::result::Result<net::tcp::TcpStream, io::error::Error>` cannot be known at compilation time
   --> libstd/net/tcp.rs:891:10
    |
891 | impl<'a> Iterator for Incoming<'a> {
    |          ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<net::tcp::TcpStream, io::error::Error>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/net/parser.rs:115:9
    |
115 | /         fn parse_digit(c: char, radix: u8) -> Option<u8> {
116 | |             let c = c as u8;
117 | |             // assuming radix is either 10 or 16
118 | |             if c >= b'0' && c <= b'9' {
...   |
126 | |             }
127 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::parser::AddrParseError` cannot be known at compilation time
   --> libstd/net/parser.rs:301:6
    |
301 | impl FromStr for IpAddr {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::parser::AddrParseError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::IpAddr` cannot be known at compilation time
   --> libstd/net/parser.rs:301:6
    |
301 | impl FromStr for IpAddr {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::IpAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::parser::AddrParseError` cannot be known at compilation time
   --> libstd/net/parser.rs:312:6
    |
312 | impl FromStr for Ipv4Addr {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::parser::AddrParseError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv4Addr` cannot be known at compilation time
   --> libstd/net/parser.rs:312:6
    |
312 | impl FromStr for Ipv4Addr {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv4Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::parser::AddrParseError` cannot be known at compilation time
   --> libstd/net/parser.rs:323:6
    |
323 | impl FromStr for Ipv6Addr {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::parser::AddrParseError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv6Addr` cannot be known at compilation time
   --> libstd/net/parser.rs:323:6
    |
323 | impl FromStr for Ipv6Addr {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::parser::AddrParseError` cannot be known at compilation time
   --> libstd/net/parser.rs:334:6
    |
334 | impl FromStr for SocketAddrV4 {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::parser::AddrParseError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::addr::SocketAddrV4` cannot be known at compilation time
   --> libstd/net/parser.rs:334:6
    |
334 | impl FromStr for SocketAddrV4 {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddrV4`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::parser::AddrParseError` cannot be known at compilation time
   --> libstd/net/parser.rs:345:6
    |
345 | impl FromStr for SocketAddrV6 {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::parser::AddrParseError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::addr::SocketAddrV6` cannot be known at compilation time
   --> libstd/net/parser.rs:345:6
    |
345 | impl FromStr for SocketAddrV6 {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddrV6`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::parser::AddrParseError` cannot be known at compilation time
   --> libstd/net/parser.rs:356:6
    |
356 | impl FromStr for SocketAddr {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::parser::AddrParseError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/parser.rs:356:6
    |
356 | impl FromStr for SocketAddr {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::prelude::Vec<net::addr::SocketAddr>` cannot be known at compilation time
  --> libstd/net/test.rs:38:1
   |
38 | / pub fn tsa<A: ToSocketAddrs>(a: A) -> Result<Vec<SocketAddr>, String> {
39 | |     match a.to_socket_addrs() {
40 | |         Ok(a) => Ok(a.collect()),
41 | |         Err(e) => Err(e.to_string()),
42 | |     }
43 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::Vec<net::addr::SocketAddr>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
  --> libstd/net/test.rs:38:1
   |
38 | / pub fn tsa<A: ToSocketAddrs>(a: A) -> Result<Vec<SocketAddr>, String> {
39 | |     match a.to_socket_addrs() {
40 | |         Ok(a) => Ok(a.collect()),
41 | |         Err(e) => Err(e.to_string()),
42 | |     }
43 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
  --> libstd/net/test.rs:38:1
   |
38 | / pub fn tsa<A: ToSocketAddrs>(a: A) -> Result<Vec<SocketAddr>, String> {
39 | |     match a.to_socket_addrs() {
40 | |         Ok(a) => Ok(a.collect()),
41 | |         Err(e) => Err(e.to_string()),
42 | |     }
43 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/net/mod.rs:114:1
    |
114 | / fn each_addr<A: ToSocketAddrs, F, T>(addr: A, mut f: F) -> io::Result<T>
115 | |     where F: FnMut(&SocketAddr) -> io::Result<T>
116 | | {
117 | |     let mut last_err = None;
...   |
127 | |     }))
128 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/mod.rs:114:1
    |
114 | / fn each_addr<A: ToSocketAddrs, F, T>(addr: A, mut f: F) -> io::Result<T>
115 | |     where F: FnMut(&SocketAddr) -> io::Result<T>
116 | | {
117 | |     let mut last_err = None;
...   |
127 | |     }))
128 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/panic.rs:290:9
    |
290 | impl<T> RefUnwindSafe for atomic::AtomicPtr<T> {}
    |         ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::sync::atomic::AtomicPtr`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/panic.rs:309:27
    |
309 | impl<R, F: FnOnce() -> R> FnOnce<()> for AssertUnwindSafe<F> {
    |                           ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `R` cannot be known at compilation time
   --> libstd/panic.rs:309:1
    |
309 | / impl<R, F: FnOnce() -> R> FnOnce<()> for AssertUnwindSafe<F> {
310 | |     type Output = R;
311 | |
312 | |     extern "rust-call" fn call_once(self, _args: ()) -> R {
313 | |         (self.0)()
314 | |     }
315 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `R`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where R: core::marker::Sized` bound
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `R` cannot be known at compilation time
   --> libstd/panic.rs:309:27
    |
309 | impl<R, F: FnOnce() -> R> FnOnce<()> for AssertUnwindSafe<F> {
    |                           ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `R`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where R: core::marker::Sized` bound

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/panic.rs:390:1
    |
390 | / pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {
391 | |     unsafe {
392 | |         panicking::try(f)
393 | |     }
394 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `R` cannot be known at compilation time
   --> libstd/panic.rs:390:1
    |
390 | / pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {
391 | |     unsafe {
392 | |         panicking::try(f)
393 | |     }
394 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `R`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where R: core::marker::Sized` bound
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn core::any::Any + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/panic.rs:390:1
    |
390 | / pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {
391 | |     unsafe {
392 | |         panicking::try(f)
393 | |     }
394 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn core::any::Any + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::Component<'a>` cannot be known at compilation time
   --> libstd/path.rs:300:1
    |
300 | / fn iter_after<'a, 'b, I, J>(mut iter: I, mut prefix: J) -> Option<I>
301 | |     where I: Iterator<Item = Component<'a>> + Clone,
302 | |           J: Iterator<Item = Component<'b>>,
303 | | {
...   |
314 | |     }
315 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Component<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::iter::Iterator`

error[E0277]: the size for values of type `path::Prefix<'_>` cannot be known at compilation time
   --> libstd/path.rs:335:1
    |
335 | / fn has_physical_root(s: &[u8], prefix: Option<Prefix>) -> bool {
336 | |     let path = if let Some(p) = prefix {
337 | |         &s[p.len()..]
338 | |     } else {
...   |
341 | |     !path.is_empty() && is_sep_byte(path[0])
342 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Prefix<'_>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&ffi::os_str::OsStr` cannot be known at compilation time
   --> libstd/path.rs:345:1
    |
345 | / fn split_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {
346 | |     unsafe {
347 | |         if os_str_as_u8_slice(file) == b".." {
348 | |             return (Some(file), None);
...   |
365 | |     }
366 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&ffi::os_str::OsStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&ffi::os_str::OsStr` cannot be known at compilation time
   --> libstd/path.rs:892:10
    |
892 | impl<'a> Iterator for Iter<'a> {
    |          ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&ffi::os_str::OsStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::Component<'_>` cannot be known at compilation time
   --> libstd/path.rs:911:10
    |
911 | impl<'a> Iterator for Components<'a> {
    |          ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Component<'_>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&path::Path` cannot be known at compilation time
    --> libstd/path.rs:1063:10
     |
1063 | impl<'a> Iterator for Ancestors<'a> {
     |          ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&path::Path`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a path::Path` cannot be known at compilation time
    --> libstd/path.rs:1388:10
     |
1388 | impl<'a> From<&'a Path> for Box<Path> {
     |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a path::Path`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<path::Path>` cannot be known at compilation time
    --> libstd/path.rs:1388:10
     |
1388 | impl<'a> From<&'a Path> for Box<Path> {
     |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<path::Path>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<path::Path>` cannot be known at compilation time
    --> libstd/path.rs:1397:6
     |
1397 | impl From<Box<Path>> for PathBuf {
     |      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<path::Path>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1397:6
     |
1397 | impl From<Box<Path>> for PathBuf {
     |      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1404:6
     |
1404 | impl From<PathBuf> for Box<Path> {
     |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<path::Path>` cannot be known at compilation time
    --> libstd/path.rs:1404:6
     |
1404 | impl From<PathBuf> for Box<Path> {
     |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<path::Path>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<path::Path>` cannot be known at compilation time
    --> libstd/path.rs:1411:6
     |
1411 | impl Clone for Box<Path> {
     |      ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<path::Path>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a T` cannot be known at compilation time
    --> libstd/path.rs:1419:36
     |
1419 | impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for PathBuf {
     |                                    ^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1419:36
     |
1419 | impl<'a, T: ?Sized + AsRef<OsStr>> From<&'a T> for PathBuf {
     |                                    ^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
    --> libstd/path.rs:1426:6
     |
1426 | impl From<OsString> for PathBuf {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1426:6
     |
1426 | impl From<OsString> for PathBuf {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1433:6
     |
1433 | impl From<PathBuf> for OsString {
     |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
    --> libstd/path.rs:1433:6
     |
1433 | impl From<PathBuf> for OsString {
     |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
    --> libstd/path.rs:1440:6
     |
1440 | impl From<String> for PathBuf {
     |      ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1440:6
     |
1440 | impl From<String> for PathBuf {
     |      ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `P` cannot be known at compilation time
    --> libstd/path.rs:1447:22
     |
1447 | impl<P: AsRef<Path>> iter::FromIterator<P> for PathBuf {
     |                      ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `P`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where P: core::marker::Sized` bound

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1447:22
     |
1447 | impl<P: AsRef<Path>> iter::FromIterator<P> for PathBuf {
     |                      ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `P` cannot be known at compilation time
    --> libstd/path.rs:1456:22
     |
1456 | impl<P: AsRef<Path>> iter::Extend<P> for PathBuf {
     |                      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `P`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where P: core::marker::Sized` bound

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1488:6
     |
1488 | impl Default for PathBuf {
     |      ^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a path::Path` cannot be known at compilation time
    --> libstd/path.rs:1495:10
     |
1495 | impl<'a> From<&'a Path> for Cow<'a, Path> {
     |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a path::Path`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'a, path::Path>` cannot be known at compilation time
    --> libstd/path.rs:1495:10
     |
1495 | impl<'a> From<&'a Path> for Cow<'a, Path> {
     |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'a, path::Path>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1503:10
     |
1503 | impl<'a> From<PathBuf> for Cow<'a, Path> {
     |          ^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'a, path::Path>` cannot be known at compilation time
    --> libstd/path.rs:1503:10
     |
1503 | impl<'a> From<PathBuf> for Cow<'a, Path> {
     |          ^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'a, path::Path>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1511:10
     |
1511 | impl<'a> From<&'a PathBuf> for Cow<'a, Path> {
     |          ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'a, path::Path>` cannot be known at compilation time
    --> libstd/path.rs:1511:10
     |
1511 | impl<'a> From<&'a PathBuf> for Cow<'a, Path> {
     |          ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'a, path::Path>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::borrow::Cow<'a, path::Path>` cannot be known at compilation time
    --> libstd/path.rs:1519:10
     |
1519 | impl<'a> From<Cow<'a, Path>> for PathBuf {
     |          ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::borrow::Cow<'a, path::Path>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1519:10
     |
1519 | impl<'a> From<Cow<'a, Path>> for PathBuf {
     |          ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1527:6
     |
1527 | impl From<PathBuf> for Arc<Path> {
     |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::sync::Arc<path::Path>` cannot be known at compilation time
    --> libstd/path.rs:1527:6
     |
1527 | impl From<PathBuf> for Arc<Path> {
     |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::sync::Arc<path::Path>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a path::Path` cannot be known at compilation time
    --> libstd/path.rs:1536:10
     |
1536 | impl<'a> From<&'a Path> for Arc<Path> {
     |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a path::Path`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::sync::Arc<path::Path>` cannot be known at compilation time
    --> libstd/path.rs:1536:10
     |
1536 | impl<'a> From<&'a Path> for Arc<Path> {
     |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::sync::Arc<path::Path>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1545:6
     |
1545 | impl From<PathBuf> for Rc<Path> {
     |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::rc::Rc<path::Path>` cannot be known at compilation time
    --> libstd/path.rs:1545:6
     |
1545 | impl From<PathBuf> for Rc<Path> {
     |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::rc::Rc<path::Path>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a path::Path` cannot be known at compilation time
    --> libstd/path.rs:1554:10
     |
1554 | impl<'a> From<&'a Path> for Rc<Path> {
     |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a path::Path`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::rc::Rc<path::Path>` cannot be known at compilation time
    --> libstd/path.rs:1554:10
     |
1554 | impl<'a> From<&'a Path> for Rc<Path> {
     |          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::rc::Rc<path::Path>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1563:6
     |
1563 | impl ToOwned for Path {
     |      ^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::Iter<'_>` cannot be known at compilation time
    --> libstd/path.rs:2616:10
     |
2616 | impl<'a> IntoIterator for &'a PathBuf {
     |          ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::Iter<'_>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&ffi::os_str::OsStr` cannot be known at compilation time
    --> libstd/path.rs:2616:10
     |
2616 | impl<'a> IntoIterator for &'a PathBuf {
     |          ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&ffi::os_str::OsStr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::Iter<'_>` cannot be known at compilation time
    --> libstd/path.rs:2623:10
     |
2623 | impl<'a> IntoIterator for &'a Path {
     |          ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::Iter<'_>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&ffi::os_str::OsStr` cannot be known at compilation time
    --> libstd/path.rs:2623:10
     |
2623 | impl<'a> IntoIterator for &'a Path {
     |          ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&ffi::os_str::OsStr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `process::ChildStdin` cannot be known at compilation time
   --> libstd/process.rs:173:5
    |
173 |     pub stdin: Option<ChildStdin>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `process::ChildStdin`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `process::ChildStdout` cannot be known at compilation time
   --> libstd/process.rs:178:5
    |
178 |     pub stdout: Option<ChildStdout>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `process::ChildStdout`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `process::ChildStderr` cannot be known at compilation time
   --> libstd/process.rs:183:5
    |
183 |     pub stderr: Option<ChildStderr>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `process::ChildStderr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `process::ChildStdin` cannot be known at compilation time
    --> libstd/process.rs:1018:6
     |
1018 | impl From<ChildStdin> for Stdio {
     |      ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::ChildStdin`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `process::Stdio` cannot be known at compilation time
    --> libstd/process.rs:1018:6
     |
1018 | impl From<ChildStdin> for Stdio {
     |      ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::Stdio`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `process::ChildStdout` cannot be known at compilation time
    --> libstd/process.rs:1047:6
     |
1047 | impl From<ChildStdout> for Stdio {
     |      ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::ChildStdout`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `process::Stdio` cannot be known at compilation time
    --> libstd/process.rs:1047:6
     |
1047 | impl From<ChildStdout> for Stdio {
     |      ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::Stdio`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `process::ChildStderr` cannot be known at compilation time
    --> libstd/process.rs:1076:6
     |
1076 | impl From<ChildStderr> for Stdio {
     |      ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::ChildStderr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `process::Stdio` cannot be known at compilation time
    --> libstd/process.rs:1076:6
     |
1076 | impl From<ChildStderr> for Stdio {
     |      ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::Stdio`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `fs::File` cannot be known at compilation time
    --> libstd/process.rs:1107:6
     |
1107 | impl From<fs::File> for Stdio {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `fs::File`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `process::Stdio` cannot be known at compilation time
    --> libstd/process.rs:1107:6
     |
1107 | impl From<fs::File> for Stdio {
     |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::Stdio`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/process.rs:1600:21
     |
1600 | impl<E: fmt::Debug> Termination for Result<(), E> {
     |                     ^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `E` cannot be known at compilation time
    --> libstd/process.rs:1600:21
     |
1600 | impl<E: fmt::Debug> Termination for Result<(), E> {
     |                     ^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `E`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where E: core::marker::Sized` bound
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `!` cannot be known at compilation time
    --> libstd/process.rs:1615:21
     |
1615 | impl<E: fmt::Debug> Termination for Result<!, E> {
     |                     ^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `!`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `E` cannot be known at compilation time
    --> libstd/process.rs:1615:21
     |
1615 | impl<E: fmt::Debug> Termination for Result<!, E> {
     |                     ^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `E`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where E: core::marker::Sized` bound
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> libstd/sync/mpsc/oneshot.rs:61:5
   |
61 |     data: UnsafeCell<Option<T>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `T`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where T: core::marker::Sized` bound
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `*mut sync::mpsc::select::Handle<'static, ()>` cannot be known at compilation time
   --> libstd/sync/mpsc/select.rs:341:6
    |
341 | impl Iterator for Packets {
    |      ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `*mut sync::mpsc::select::Handle<'static, ()>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'static mut bool` cannot be known at compilation time
  --> libstd/sync/mpsc/sync.rs:77:5
   |
77 |     canceled: Option<&'static mut bool>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `&'static mut bool`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `sync::mpsc::blocking::SignalToken` cannot be known at compilation time
  --> libstd/sync/mpsc/sync.rs:97:5
   |
97 |     token: Option<SignalToken>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::blocking::SignalToken`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::option::Option<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:105:5
    |
105 |     buf: Vec<Option<T>>,
    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:105:5
    |
105 |     buf: Vec<Option<T>>,
    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `sync::mpsc::mpsc_queue::Node<T>` cannot be known at compilation time
  --> libstd/sync/mpsc/mpsc_queue.rs:45:5
   |
45 |     next: AtomicPtr<Node<T>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::mpsc_queue::Node<T>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::sync::atomic::AtomicPtr`

error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> libstd/sync/mpsc/mpsc_queue.rs:46:5
   |
46 |     value: Option<T>,
   |     ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `T`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where T: core::marker::Sized` bound
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `sync::mpsc::mpsc_queue::Node<T>` cannot be known at compilation time
  --> libstd/sync/mpsc/mpsc_queue.rs:53:5
   |
53 |     head: AtomicPtr<Node<T>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::mpsc_queue::Node<T>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::sync::atomic::AtomicPtr`

error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> libstd/sync/mpsc/spsc_queue.rs:32:5
   |
32 |     value: Option<T>,           // nullable for re-use of nodes
   |     ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `T`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where T: core::marker::Sized` bound
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `sync::mpsc::spsc_queue::Node<T>` cannot be known at compilation time
  --> libstd/sync/mpsc/spsc_queue.rs:34:5
   |
34 |     next: AtomicPtr<Node<T>>,   // next node in the queue
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::spsc_queue::Node<T>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::sync::atomic::AtomicPtr`

error[E0277]: the size for values of type `sync::mpsc::spsc_queue::Node<T>` cannot be known at compilation time
  --> libstd/sync/mpsc/spsc_queue.rs:51:5
   |
51 |     tail_prev: AtomicPtr<Node<T>>, // where to pop from
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::spsc_queue::Node<T>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::sync::atomic::AtomicPtr`

error[E0277]: the size for values of type `sync::mpsc::Sender<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:863:9
    |
863 | impl<T> Clone for Sender<T> {
    |         ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::Sender<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::SyncSender<T>` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1037:9
     |
1037 | impl<T> Clone for SyncSender<T> {
     |         ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::SyncSender<T>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1593:13
     |
1593 | impl<'a, T> Iterator for Iter<'a, T> {
     |             ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1600:13
     |
1600 | impl<'a, T> Iterator for TryIter<'a, T> {
     |             ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound

error[E0277]: the size for values of type `sync::mpsc::Iter<'_, T>` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1607:13
     |
1607 | impl<'a, T> IntoIterator for &'a Receiver<T> {
     |             ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::Iter<'_, T>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1607:13
     |
1607 | impl<'a, T> IntoIterator for &'a Receiver<T> {
     |             ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1615:9
     |
1615 | impl<T> Iterator for IntoIter<T> {
     |         ^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound

error[E0277]: the size for values of type `sync::mpsc::IntoIter<T>` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1621:10
     |
1621 | impl <T> IntoIterator for Receiver<T> {
     |          ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::IntoIter<T>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1621:10
     |
1621 | impl <T> IntoIterator for Receiver<T> {
     |          ^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound

error[E0277]: the size for values of type `sync::mpsc::SendError<T>` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1718:9
     |
1718 | impl<T> From<SendError<T>> for TrySendError<T> {
     |         ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::SendError<T>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::TrySendError<T>` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1718:9
     |
1718 | impl<T> From<SendError<T>> for TrySendError<T> {
     |         ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::TrySendError<T>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::RecvError` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1779:6
     |
1779 | impl From<RecvError> for TryRecvError {
     |      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::RecvError`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::TryRecvError` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1779:6
     |
1779 | impl From<RecvError> for TryRecvError {
     |      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::TryRecvError`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::RecvError` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1820:6
     |
1820 | impl From<RecvError> for RecvTimeoutError {
     |      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::RecvError`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::RecvTimeoutError` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1820:6
     |
1820 | impl From<RecvError> for RecvTimeoutError {
     |      ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::RecvTimeoutError`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::condvar::Condvar` cannot be known at compilation time
   --> libstd/sync/condvar.rs:608:6
    |
608 | impl Default for Condvar {
    |      ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::condvar::Condvar`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mutex.rs:386:9
    |
386 | impl<T> From<T> for Mutex<T> {
    |         ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound

error[E0277]: the size for values of type `sync::mutex::Mutex<T>` cannot be known at compilation time
   --> libstd/sync/mutex.rs:386:9
    |
386 | impl<T> From<T> for Mutex<T> {
    |         ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mutex::Mutex<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mutex::Mutex<T>` cannot be known at compilation time
   --> libstd/sync/mutex.rs:395:27
    |
395 | impl<T: ?Sized + Default> Default for Mutex<T> {
    |                           ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mutex::Mutex<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `thread::Thread` cannot be known at compilation time
   --> libstd/sync/once.rs:143:5
    |
143 |     thread: Option<Thread>,
    |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::Thread`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `sync::rwlock::RwLock<T>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:453:18
    |
453 | impl<T: Default> Default for RwLock<T> {
    |                  ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::rwlock::RwLock<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:461:9
    |
461 | impl<T> From<T> for RwLock<T> {
    |         ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound

error[E0277]: the size for values of type `sync::rwlock::RwLock<T>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:461:9
    |
461 | impl<T> From<T> for RwLock<T> {
    |         ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::rwlock::RwLock<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `time::Instant` cannot be known at compilation time
   --> libstd/time.rs:214:6
    |
214 | impl Add<Duration> for Instant {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::Instant`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/time.rs:214:6
    |
214 | impl Add<Duration> for Instant {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/time.rs:223:6
    |
223 | impl AddAssign<Duration> for Instant {
    |      ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `time::Instant` cannot be known at compilation time
   --> libstd/time.rs:230:6
    |
230 | impl Sub<Duration> for Instant {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::Instant`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/time.rs:230:6
    |
230 | impl Sub<Duration> for Instant {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/time.rs:239:6
    |
239 | impl SubAssign<Duration> for Instant {
    |      ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/time.rs:246:6
    |
246 | impl Sub<Instant> for Instant {
    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `time::Instant` cannot be known at compilation time
   --> libstd/time.rs:246:6
    |
246 | impl Sub<Instant> for Instant {
    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::Instant`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `time::SystemTime` cannot be known at compilation time
   --> libstd/time.rs:363:6
    |
363 | impl Add<Duration> for SystemTime {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::SystemTime`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/time.rs:363:6
    |
363 | impl Add<Duration> for SystemTime {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/time.rs:372:6
    |
372 | impl AddAssign<Duration> for SystemTime {
    |      ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `time::SystemTime` cannot be known at compilation time
   --> libstd/time.rs:379:6
    |
379 | impl Sub<Duration> for SystemTime {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::SystemTime`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/time.rs:379:6
    |
379 | impl Sub<Duration> for SystemTime {
    |      ^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/time.rs:388:6
    |
388 | impl SubAssign<Duration> for SystemTime {
    |      ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:29:1
   |
29 | / pub fn from_generator<T: Generator<Yield = ()>>(x: T) -> impl Future<Output = T::Return> {
30 | |     GenFuture(x)
31 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Generator`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:43:1
   |
43 | / impl<T: Generator<Yield = ()>> Future for GenFuture<T> {
44 | |     type Output = T::Return;
45 | |     fn poll(self: Pin<&mut Self>, lw: &LocalWaker) -> Poll<Self::Output> {
46 | |         set_task_waker(lw, || match unsafe { Pin::get_mut_unchecked(self).0.resume() } {
...  |
50 | |     }
51 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Generator`

error[E0277]: the size for values of type `core::ptr::NonNull<core::task::LocalWaker>` cannot be known at compilation time
  --> libstd/future.rs:57:18
   |
57 | struct SetOnDrop(Option<NonNull<LocalWaker>>);
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::ptr::NonNull<core::task::LocalWaker>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:69:1
   |
69 | / pub fn set_task_waker<F, R>(lw: &LocalWaker, f: F) -> R
70 | | where
71 | |     F: FnOnce() -> R
72 | | {
...  |
77 | |     f()
78 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `R` cannot be known at compilation time
  --> libstd/future.rs:69:1
   |
69 | / pub fn set_task_waker<F, R>(lw: &LocalWaker, f: F) -> R
70 | | where
71 | |     F: FnOnce() -> R
72 | | {
...  |
77 | |     f()
78 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `R`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where R: core::marker::Sized` bound
   = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `&mut F` cannot be known at compilation time
   --> libstd/future.rs:106:1
    |
106 | / pub fn poll_with_tls_waker<F>(f: Pin<&mut F>) -> Poll<F::Output>
107 | | where
108 | |     F: Future
109 | | {
110 | |     get_task_waker(|lw| F::poll(f, lw))
111 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&mut F`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::pin::Pin`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn alloc_crate::boxed::FnBox<(), Output=()> + 'static)>` cannot be known at compilation time
  --> libstd/sys_common/at_exit_imp.rs:29:19
   |
29 | static mut QUEUE: *mut Queue = ptr::null_mut();
   |                   ^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn alloc_crate::boxed::FnBox<(), Output=()> + 'static)>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn alloc_crate::boxed::FnBox<(), Output=()> + 'static)>` cannot be known at compilation time
  --> libstd/sys_common/at_exit_imp.rs:31:13
   |
31 | const DONE: *mut Queue = 1_usize as *mut _;
   |             ^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn alloc_crate::boxed::FnBox<(), Output=()> + 'static)>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<T>` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:219:9
    |
219 | impl<T> From<PoisonError<T>> for TryLockError<T> {
    |         ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys_common::poison::TryLockError<T>` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:219:9
    |
219 | impl<T> From<PoisonError<T>> for TryLockError<T> {
    |         ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::TryLockError<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(T,)` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:262:1
    |
262 | / pub fn map_result<T, U, F>(result: LockResult<T>, f: F)
263 | |                            -> LockResult<U>
264 | |                            where F: FnOnce(T) -> U {
265 | |     match result {
...   |
268 | |     }
269 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(T,)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `U` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:262:1
    |
262 | / pub fn map_result<T, U, F>(result: LockResult<T>, f: F)
263 | |                            -> LockResult<U>
264 | |                            where F: FnOnce(T) -> U {
265 | |     match result {
...   |
268 | |     }
269 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `U`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where U: core::marker::Sized` bound
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:262:1
    |
262 | / pub fn map_result<T, U, F>(result: LockResult<T>, f: F)
263 | |                            -> LockResult<U>
264 | |                            where F: FnOnce(T) -> U {
265 | |     match result {
...   |
268 | |     }
269 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<T>` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:262:1
    |
262 | / pub fn map_result<T, U, F>(result: LockResult<T>, f: F)
263 | |                            -> LockResult<U>
264 | |                            where F: FnOnce(T) -> U {
265 | |     match result {
...   |
268 | |     }
269 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<U>` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:262:1
    |
262 | / pub fn map_result<T, U, F>(result: LockResult<T>, f: F)
263 | |                            -> LockResult<U>
264 | |                            where F: FnOnce(T) -> U {
265 | |     match result {
...   |
268 | |     }
269 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<U>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::ops::Range<usize>` cannot be known at compilation time
  --> libstd/sys_common/thread_info.rs:18:5
   |
18 |     stack_guard: Option<Guard>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::ops::Range<usize>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys_common/thread_info.rs:18:5
   |
18 |     stack_guard: Option<Guard>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Range`

error[E0277]: the size for values of type `thread::Thread` cannot be known at compilation time
  --> libstd/sys_common/thread_info.rs:38:1
   |
38 | / pub fn current_thread() -> Option<Thread> {
39 | |     ThreadInfo::with(|info| info.thread.clone())
40 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `thread::Thread`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::ops::Range<usize>` cannot be known at compilation time
  --> libstd/sys_common/thread_info.rs:42:1
   |
42 | / pub fn stack_guard() -> Option<Guard> {
43 | |     ThreadInfo::with(|info| info.stack_guard.clone()).and_then(|o| o)
44 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::ops::Range<usize>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys_common/thread_info.rs:42:1
   |
42 | / pub fn stack_guard() -> Option<Guard> {
43 | |     ThreadInfo::with(|info| info.stack_guard.clone()).and_then(|o| o)
44 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Range`

error[E0277]: the size for values of type `core::ops::Range<usize>` cannot be known at compilation time
  --> libstd/sys_common/thread_info.rs:46:1
   |
46 | / pub fn set(stack_guard: Option<Guard>, thread: Thread) {
47 | |     THREAD_INFO.with(|c| assert!(c.borrow().is_none()));
48 | |     THREAD_INFO.with(move |c| *c.borrow_mut() = Some(ThreadInfo{
49 | |         stack_guard,
50 | |         thread,
51 | |     }));
52 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::ops::Range<usize>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys_common/thread_info.rs:46:1
   |
46 | / pub fn set(stack_guard: Option<Guard>, thread: Thread) {
47 | |     THREAD_INFO.with(|c| assert!(c.borrow().is_none()));
48 | |     THREAD_INFO.with(move |c| *c.borrow_mut() = Some(ThreadInfo{
49 | |         stack_guard,
50 | |         thread,
51 | |     }));
52 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Range`

error[E0277]: the size for values of type `core::ops::Range<usize>` cannot be known at compilation time
  --> libstd/sys_common/thread_info.rs:54:1
   |
54 | / pub fn reset_guard(stack_guard: Option<Guard>) {
55 | |     THREAD_INFO.with(move |c| c.borrow_mut().as_mut().unwrap().stack_guard = stack_guard);
56 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::ops::Range<usize>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys_common/thread_info.rs:54:1
   |
54 | / pub fn reset_guard(stack_guard: Option<Guard>) {
55 | |     THREAD_INFO.with(move |c| c.borrow_mut().as_mut().unwrap().stack_guard = stack_guard);
56 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Range`

error[E0277]: the size for values of type `unsafe extern "C" fn(*mut u8)` cannot be known at compilation time
  --> libstd/sys_common/thread_local.rs:94:5
   |
94 |     dtor: Option<unsafe extern fn(*mut u8)>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `unsafe extern "C" fn(*mut u8)`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `sys_common::wtf8::CodePoint` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:383:6
    |
383 | impl FromIterator<CodePoint> for Wtf8Buf {
    |      ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::CodePoint`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys_common::wtf8::Wtf8Buf` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:383:6
    |
383 | impl FromIterator<CodePoint> for Wtf8Buf {
    |      ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::Wtf8Buf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys_common::wtf8::CodePoint` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:395:6
    |
395 | impl Extend<CodePoint> for Wtf8Buf {
    |      ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::CodePoint`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:425:9
    |
425 | /         fn write_str_escaped(f: &mut fmt::Formatter, s: &str) -> fmt::Result {
426 | |             use fmt::Write;
427 | |             for c in s.chars().flat_map(|c| c.escape_debug()) {
428 | |                 f.write_char(c)?
429 | |             }
430 | |             Ok(())
431 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:425:9
    |
425 | /         fn write_str_escaped(f: &mut fmt::Formatter, s: &str) -> fmt::Result {
426 | |             use fmt::Write;
427 | |             for c in s.chars().flat_map(|c| c.escape_debug()) {
428 | |                 f.write_char(c)?
429 | |             }
430 | |             Ok(())
431 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:683:6
    |
683 | impl ops::Index<ops::Range<usize>> for Wtf8 {
    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::Range`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:705:6
    |
705 | impl ops::Index<ops::RangeFrom<usize>> for Wtf8 {
    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::RangeFrom`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:725:6
    |
725 | impl ops::Index<ops::RangeTo<usize>> for Wtf8 {
    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::RangeTo`

error[E0277]: the size for values of type `sys_common::wtf8::CodePoint` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:796:10
    |
796 | impl<'a> Iterator for Wtf8CodePoints<'a> {
    |          ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::CodePoint`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u16` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:821:10
    |
821 | impl<'a> Iterator for EncodeWide<'a> {
    |          ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u16`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys_common/bytestring.rs:16:1
   |
16 | / pub fn debug_fmt_bytestring(slice: &[u8], f: &mut Formatter) -> Result {
17 | |     // Writes out a valid unicode string with the correct escape sequences
18 | |     fn write_str_escaped(f: &mut Formatter, s: &str) -> Result {
19 | |         for c in s.chars().flat_map(|c| c.escape_debug()) {
...  |
32 | |     f.write_str("\"")
33 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys_common/bytestring.rs:16:1
   |
16 | / pub fn debug_fmt_bytestring(slice: &[u8], f: &mut Formatter) -> Result {
17 | |     // Writes out a valid unicode string with the correct escape sequences
18 | |     fn write_str_escaped(f: &mut Formatter, s: &str) -> Result {
19 | |         for c in s.chars().flat_map(|c| c.escape_debug()) {
...  |
32 | |     f.write_str("\"")
33 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys_common/bytestring.rs:18:5
   |
18 | /     fn write_str_escaped(f: &mut Formatter, s: &str) -> Result {
19 | |         for c in s.chars().flat_map(|c| c.escape_debug()) {
20 | |             f.write_char(c)?
21 | |         }
22 | |         Ok(())
23 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys_common/bytestring.rs:18:5
   |
18 | /     fn write_str_escaped(f: &mut Formatter, s: &str) -> Result {
19 | |         for c in s.chars().flat_map(|c| c.escape_debug()) {
20 | |             f.write_char(c)?
21 | |         }
22 | |         Ok(())
23 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
  --> libstd/sys_common/process.rs:19:1
   |
19 | / pub trait EnvKey:
20 | |     From<OsString> + Into<OsString> +
21 | |     Borrow<OsStr> + Borrow<Self> + AsRef<OsStr> +
22 | |     Ord + Clone {}
   | |__________________^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::convert::Into`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
  --> libstd/sys_common/process.rs:28:6
   |
28 | impl From<OsString> for DefaultEnvKey {
   |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys_common::process::DefaultEnvKey` cannot be known at compilation time
  --> libstd/sys_common/process.rs:28:6
   |
28 | impl From<OsString> for DefaultEnvKey {
   |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys_common::process::DefaultEnvKey`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys_common::process::DefaultEnvKey` cannot be known at compilation time
  --> libstd/sys_common/process.rs:32:6
   |
32 | impl From<DefaultEnvKey> for OsString {
   |      ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys_common::process::DefaultEnvKey`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
  --> libstd/sys_common/process.rs:32:6
   |
32 | impl From<DefaultEnvKey> for OsString {
   |      ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys_common::process::DefaultEnvKey` cannot be known at compilation time
  --> libstd/sys_common/process.rs:44:6
   |
44 | impl EnvKey for DefaultEnvKey {}
   |      ^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys_common::process::DefaultEnvKey`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
  --> libstd/sys_common/process.rs:44:6
   |
44 | impl EnvKey for DefaultEnvKey {}
   |      ^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required because of the requirements on the impl of `core::convert::Into<ffi::os_str::OsString>` for `sys_common::process::DefaultEnvKey`

error[E0277]: the size for values of type `sys_common::process::CommandEnv<K>` cannot be known at compilation time
  --> libstd/sys_common/process.rs:54:17
   |
54 | impl<K: EnvKey> Default for CommandEnv<K> {
   |                 ^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys_common::process::CommandEnv<K>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/mod.rs:110:1
    |
110 | / pub fn at_exit<F: FnOnce() + Send + 'static>(f: F) -> Result<(), ()> {
111 | |     if at_exit_imp::push(Box::new(f)) {Ok(())} else {Err(())}
112 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/alloc.rs:89:14
   |
89 | static HOOK: AtomicPtr<()> = AtomicPtr::new(ptr::null_mut());
   |              ^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::sync::atomic::AtomicPtr`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/panicking.rs:251:1
    |
251 | / pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>> {
252 | |     #[allow(unions_with_drop_fields)]
253 | |     union Data<F, R> {
254 | |         f: F,
...   |
312 | |     }
313 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `R` cannot be known at compilation time
   --> libstd/panicking.rs:251:1
    |
251 | / pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>> {
252 | |     #[allow(unions_with_drop_fields)]
253 | |     union Data<F, R> {
254 | |         f: F,
...   |
312 | |     }
313 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `R`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where R: core::marker::Sized` bound
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn core::any::Any + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/panicking.rs:251:1
    |
251 | / pub unsafe fn try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>> {
252 | |     #[allow(unions_with_drop_fields)]
253 | |     union Data<F, R> {
254 | |         f: F,
...   |
312 | |     }
313 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn core::any::Any + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/panicking.rs:306:5
    |
306 | /     fn do_call<F: FnOnce() -> R, R>(data: *mut u8) {
307 | |         unsafe {
308 | |             let data = data as *mut Data<F, R>;
309 | |             let f = ptr::read(&mut (*data).f);
310 | |             ptr::write(&mut (*data).r, f());
311 | |         }
312 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `R` cannot be known at compilation time
   --> libstd/panicking.rs:306:5
    |
306 | /     fn do_call<F: FnOnce() -> R, R>(data: *mut u8) {
307 | |         unsafe {
308 | |             let data = data as *mut Data<F, R>;
309 | |             let f = ptr::read(&mut (*data).f);
310 | |             ptr::write(&mut (*data).r, f());
311 | |         }
312 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `R`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where R: core::marker::Sized` bound
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/panicking.rs:351:9
    |
351 |         string: Option<String>,
    |         ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `A` cannot be known at compilation time
   --> libstd/panicking.rs:413:9
    |
413 |         inner: Option<A>,
    |         ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `A`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where A: core::marker::Sized` bound
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&core::fmt::Arguments<'_>` cannot be known at compilation time
   --> libstd/panicking.rs:445:1
    |
445 | / fn rust_panic_with_hook(payload: &mut dyn BoxMeUp,
446 | |                         message: Option<&fmt::Arguments>,
447 | |                         file_line_col: &(&str, u32, u32)) -> ! {
448 | |     let (file, line, col) = *file_line_col;
...   |
496 | |     rust_panic(payload)
497 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&core::fmt::Arguments<'_>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/memchr.rs:34:1
   |
34 | / pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
35 | |     ::sys::memchr::memchr(needle, haystack)
36 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/memchr.rs:54:1
   |
54 | / pub fn memrchr(needle: u8, haystack: &[u8]) -> Option<usize> {
55 | |     ::sys::memchr::memrchr(needle, haystack)
56 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::Cell<i32>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
502 |           thread_local!(static FOO: Cell<i32> = Cell::new(1));
    |           ---------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::Cell<i32>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::Cell<i32>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
502 |           thread_local!(static FOO: Cell<i32> = Cell::new(1));
    |           ---------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cell::Cell<i32>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<thread::local::tests::states::Foo>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
530 |           thread_local!(static FOO: Foo = Foo);
    |           ------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<thread::local::tests::states::Foo>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::states::Foo` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
530 |           thread_local!(static FOO: Foo = Foo);
    |           ------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::states::Foo`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::Foo` cannot be known at compilation time
   --> libstd/thread/local.rs:203:40
    |
203 |         $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
539 |         thread_local!(static FOO: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));
    |         --------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::Foo`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::Foo` cannot be known at compilation time
   --> libstd/thread/local.rs:169:13
    |
169 |             fn __init() -> $t { $init }
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
539 |         thread_local!(static FOO: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));
    |         --------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::Foo`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::UnsafeCell<core::option::Option<thread::local::tests::Foo>>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
539 |           thread_local!(static FOO: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));
    |           --------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::UnsafeCell<core::option::Option<thread::local::tests::Foo>>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::UnsafeCell<core::option::Option<thread::local::tests::Foo>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
539 |           thread_local!(static FOO: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));
    |           --------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cell::UnsafeCell<core::option::Option<thread::local::tests::Foo>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::Foo` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
539 |           thread_local!(static FOO: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));
    |           --------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::Foo`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::Foo` cannot be known at compilation time
   --> libstd/thread/local.rs:191:31
    |
191 |                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
539 |         thread_local!(static FOO: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));
    |         --------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::Foo`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::circular::S1` cannot be known at compilation time
   --> libstd/thread/local.rs:203:40
    |
203 |         $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
555 |         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |         ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::circular::S1`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::circular::S1` cannot be known at compilation time
   --> libstd/thread/local.rs:169:13
    |
169 |             fn __init() -> $t { $init }
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
555 |         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |         ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::circular::S1`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::UnsafeCell<core::option::Option<thread::local::tests::circular::S1>>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
555 |           thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |           ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::UnsafeCell<core::option::Option<thread::local::tests::circular::S1>>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::UnsafeCell<core::option::Option<thread::local::tests::circular::S1>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
555 |           thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |           ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cell::UnsafeCell<core::option::Option<thread::local::tests::circular::S1>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::circular::S1` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
555 |           thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |           ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::circular::S1`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::circular::S1` cannot be known at compilation time
   --> libstd/thread/local.rs:191:31
    |
191 |                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
555 |         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |         ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::circular::S1`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::circular::S2` cannot be known at compilation time
   --> libstd/thread/local.rs:203:40
    |
203 |         $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
556 |         thread_local!(static K2: UnsafeCell<Option<S2>> = UnsafeCell::new(None));
    |         ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::circular::S2`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::circular::S2` cannot be known at compilation time
   --> libstd/thread/local.rs:169:13
    |
169 |             fn __init() -> $t { $init }
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
556 |         thread_local!(static K2: UnsafeCell<Option<S2>> = UnsafeCell::new(None));
    |         ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::circular::S2`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::UnsafeCell<core::option::Option<thread::local::tests::circular::S2>>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
556 |           thread_local!(static K2: UnsafeCell<Option<S2>> = UnsafeCell::new(None));
    |           ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::UnsafeCell<core::option::Option<thread::local::tests::circular::S2>>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::UnsafeCell<core::option::Option<thread::local::tests::circular::S2>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
556 |           thread_local!(static K2: UnsafeCell<Option<S2>> = UnsafeCell::new(None));
    |           ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cell::UnsafeCell<core::option::Option<thread::local::tests::circular::S2>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::circular::S2` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
556 |           thread_local!(static K2: UnsafeCell<Option<S2>> = UnsafeCell::new(None));
    |           ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::circular::S2`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::circular::S2` cannot be known at compilation time
   --> libstd/thread/local.rs:191:31
    |
191 |                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
556 |         thread_local!(static K2: UnsafeCell<Option<S2>> = UnsafeCell::new(None));
    |         ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::circular::S2`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::self_referential::S1` cannot be known at compilation time
   --> libstd/thread/local.rs:203:40
    |
203 |         $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
594 |         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |         ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::self_referential::S1`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::self_referential::S1` cannot be known at compilation time
   --> libstd/thread/local.rs:169:13
    |
169 |             fn __init() -> $t { $init }
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
594 |         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |         ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::self_referential::S1`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::UnsafeCell<core::option::Option<thread::local::tests::self_referential::S1>>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
594 |           thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |           ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::UnsafeCell<core::option::Option<thread::local::tests::self_referential::S1>>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::UnsafeCell<core::option::Option<thread::local::tests::self_referential::S1>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
594 |           thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |           ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cell::UnsafeCell<core::option::Option<thread::local::tests::self_referential::S1>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::self_referential::S1` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
594 |           thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |           ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::self_referential::S1`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::self_referential::S1` cannot be known at compilation time
   --> libstd/thread/local.rs:191:31
    |
191 |                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
594 |         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |         ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::self_referential::S1`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::dtors_in_dtors_in_dtors::S1` cannot be known at compilation time
   --> libstd/thread/local.rs:203:40
    |
203 |         $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
615 |         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |         ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::dtors_in_dtors_in_dtors::S1`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::dtors_in_dtors_in_dtors::S1` cannot be known at compilation time
   --> libstd/thread/local.rs:169:13
    |
169 |             fn __init() -> $t { $init }
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
615 |         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |         ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::dtors_in_dtors_in_dtors::S1`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::UnsafeCell<core::option::Option<thread::local::tests::dtors_in_dtors_in_dtors::S1>>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
615 |           thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |           ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::UnsafeCell<core::option::Option<thread::local::tests::dtors_in_dtors_in_dtors::S1>>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::UnsafeCell<core::option::Option<thread::local::tests::dtors_in_dtors_in_dtors::S1>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
615 |           thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |           ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cell::UnsafeCell<core::option::Option<thread::local::tests::dtors_in_dtors_in_dtors::S1>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::dtors_in_dtors_in_dtors::S1` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
615 |           thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |           ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::dtors_in_dtors_in_dtors::S1`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::dtors_in_dtors_in_dtors::S1` cannot be known at compilation time
   --> libstd/thread/local.rs:191:31
    |
191 |                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
615 |         thread_local!(static K1: UnsafeCell<Option<S1>> = UnsafeCell::new(None));
    |         ------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::dtors_in_dtors_in_dtors::S1`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::Foo` cannot be known at compilation time
   --> libstd/thread/local.rs:203:40
    |
203 |         $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
616 |         thread_local!(static K2: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));
    |         -------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::Foo`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::Foo` cannot be known at compilation time
   --> libstd/thread/local.rs:169:13
    |
169 |             fn __init() -> $t { $init }
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
616 |         thread_local!(static K2: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));
    |         -------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::Foo`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::UnsafeCell<core::option::Option<thread::local::tests::Foo>>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
616 |           thread_local!(static K2: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));
    |           -------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::UnsafeCell<core::option::Option<thread::local::tests::Foo>>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::UnsafeCell<core::option::Option<thread::local::tests::Foo>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
616 |           thread_local!(static K2: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));
    |           -------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cell::UnsafeCell<core::option::Option<thread::local::tests::Foo>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::Foo` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
616 |           thread_local!(static K2: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));
    |           -------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::Foo`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::local::tests::Foo` cannot be known at compilation time
   --> libstd/thread/local.rs:191:31
    |
191 |                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
616 |         thread_local!(static K2: UnsafeCell<Option<Foo>> = UnsafeCell::new(None));
    |         -------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::tests::Foo`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<i32>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
644 |           thread_local!(static FOO: i32 = square(3));
    |           ------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<i32>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `i32` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
644 |           thread_local!(static FOO: i32 = square(3));
    |           ------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `i32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::RefCell<collections::hash::map::HashMap<i32, i32>>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
658 |           thread_local!(static FOO: RefCell<HashMap<i32, i32>> = map());
    |           -------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::RefCell<collections::hash::map::HashMap<i32, i32>>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::RefCell<collections::hash::map::HashMap<i32, i32>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
658 |           thread_local!(static FOO: RefCell<HashMap<i32, i32>> = map());
    |           -------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cell::RefCell<collections::hash::map::HashMap<i32, i32>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/thread/local.rs:203:40
    |
203 |         $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
667 |         thread_local!(static FOO: RefCell<Vec<u32>> = RefCell::new(vec![1, 2, 3]));
    |         --------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/thread/local.rs:169:13
    |
169 |             fn __init() -> $t { $init }
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
667 |         thread_local!(static FOO: RefCell<Vec<u32>> = RefCell::new(vec![1, 2, 3]));
    |         --------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::RefCell<alloc_crate::prelude::Vec<u32>>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
667 |           thread_local!(static FOO: RefCell<Vec<u32>> = RefCell::new(vec![1, 2, 3]));
    |           --------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::RefCell<alloc_crate::prelude::Vec<u32>>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::RefCell<alloc_crate::prelude::Vec<u32>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
667 |           thread_local!(static FOO: RefCell<Vec<u32>> = RefCell::new(vec![1, 2, 3]));
    |           --------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cell::RefCell<alloc_crate::prelude::Vec<u32>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
667 |           thread_local!(static FOO: RefCell<Vec<u32>> = RefCell::new(vec![1, 2, 3]));
    |           --------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/thread/local.rs:191:31
    |
191 |                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
667 |         thread_local!(static FOO: RefCell<Vec<u32>> = RefCell::new(vec![1, 2, 3]));
    |         --------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/thread/mod.rs:264:5
    |
264 |     name: Option<String>,
    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/thread/mod.rs:266:5
    |
266 |     stack_size: Option<usize>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `thread::ThreadId` cannot be known at compilation time
   --> libstd/thread/mod.rs:950:32
    |
950 | #[derive(Eq, PartialEq, Clone, Copy, Hash, Debug)]
    |                                ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::ThreadId`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `thread::ThreadId` cannot be known at compilation time
   --> libstd/thread/mod.rs:950:25
    |
950 | #[derive(Eq, PartialEq, Clone, Copy, Hash, Debug)]
    |                         ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::ThreadId`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `thread::Thread` cannot be known at compilation time
   --> libstd/thread/mod.rs:993:10
    |
993 | #[derive(Clone)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::Thread`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::table::SafeHash` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:182:27
    |
182 | #[derive(PartialEq, Copy, Clone)]
    |                           ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::SafeHash`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::table::SafeHash` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:182:21
    |
182 | #[derive(PartialEq, Copy, Clone)]
    |                     ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::SafeHash`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::DefaultResizePolicy` cannot be known at compilation time
  --> libstd/collections/hash/map.rs:34:10
   |
34 | #[derive(Clone)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::DefaultResizePolicy`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::HashMap<K, V, S>` cannot be known at compilation time
   --> libstd/collections/hash/map.rs:413:10
    |
413 | #[derive(Clone)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::HashMap<K, V, S>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `collections::hash::map::RandomState` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2576:10
     |
2576 | #[derive(Clone)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::RandomState`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::Cell<(u64, u64)>>>` cannot be known at compilation time
    --> libstd/thread/local.rs:171:13
     |
171  | /             unsafe fn __getit() -> $crate::option::Option<
172  | |                 &'static $crate::cell::UnsafeCell<
173  | |                     $crate::option::Option<$t>>>
174  | |             {
...    |
194  | |                 __KEY.get()
195  | |             }
     | |_____________^ doesn't have a size known at compile-time
     | 
    ::: libstd/collections/hash/map.rs:2609:9
     |
2609 | /         thread_local!(static KEYS: Cell<(u64, u64)> = {
2610 | |             Cell::new(sys::hashmap_random_keys())
2611 | |         });
     | |___________- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::Cell<(u64, u64)>>>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::Cell<(u64, u64)>` cannot be known at compilation time
    --> libstd/thread/local.rs:171:13
     |
171  | /             unsafe fn __getit() -> $crate::option::Option<
172  | |                 &'static $crate::cell::UnsafeCell<
173  | |                     $crate::option::Option<$t>>>
174  | |             {
...    |
194  | |                 __KEY.get()
195  | |             }
     | |_____________^ doesn't have a size known at compile-time
     | 
    ::: libstd/collections/hash/map.rs:2609:9
     |
2609 | /         thread_local!(static KEYS: Cell<(u64, u64)> = {
2610 | |             Cell::new(sys::hashmap_random_keys())
2611 | |         });
     | |___________- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cell::Cell<(u64, u64)>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `collections::hash::map::DefaultHasher` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2640:10
     |
2640 | #[derive(Clone, Debug)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::DefaultHasher`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `i32` cannot be known at compilation time
    --> libstd/thread/local.rs:203:40
     |
203  |         $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     | 
    ::: libstd/collections/hash/map.rs:2844:5
     |
2844 |     thread_local! { static DROP_VECTOR: RefCell<Vec<i32>> = RefCell::new(Vec::new()) }
     |     ---------------------------------------------------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `i32`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `i32` cannot be known at compilation time
    --> libstd/thread/local.rs:169:13
     |
169  |             fn __init() -> $t { $init }
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     | 
    ::: libstd/collections/hash/map.rs:2844:5
     |
2844 |     thread_local! { static DROP_VECTOR: RefCell<Vec<i32>> = RefCell::new(Vec::new()) }
     |     ---------------------------------------------------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `i32`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::RefCell<alloc_crate::prelude::Vec<i32>>>>` cannot be known at compilation time
    --> libstd/thread/local.rs:171:13
     |
171  | /             unsafe fn __getit() -> $crate::option::Option<
172  | |                 &'static $crate::cell::UnsafeCell<
173  | |                     $crate::option::Option<$t>>>
174  | |             {
...    |
194  | |                 __KEY.get()
195  | |             }
     | |_____________^ doesn't have a size known at compile-time
     | 
    ::: libstd/collections/hash/map.rs:2844:5
     |
2844 |       thread_local! { static DROP_VECTOR: RefCell<Vec<i32>> = RefCell::new(Vec::new()) }
     |       ---------------------------------------------------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::RefCell<alloc_crate::prelude::Vec<i32>>>>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::RefCell<alloc_crate::prelude::Vec<i32>>` cannot be known at compilation time
    --> libstd/thread/local.rs:171:13
     |
171  | /             unsafe fn __getit() -> $crate::option::Option<
172  | |                 &'static $crate::cell::UnsafeCell<
173  | |                     $crate::option::Option<$t>>>
174  | |             {
...    |
194  | |                 __KEY.get()
195  | |             }
     | |_____________^ doesn't have a size known at compile-time
     | 
    ::: libstd/collections/hash/map.rs:2844:5
     |
2844 |       thread_local! { static DROP_VECTOR: RefCell<Vec<i32>> = RefCell::new(Vec::new()) }
     |       ---------------------------------------------------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cell::RefCell<alloc_crate::prelude::Vec<i32>>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `i32` cannot be known at compilation time
    --> libstd/thread/local.rs:171:13
     |
171  | /             unsafe fn __getit() -> $crate::option::Option<
172  | |                 &'static $crate::cell::UnsafeCell<
173  | |                     $crate::option::Option<$t>>>
174  | |             {
...    |
194  | |                 __KEY.get()
195  | |             }
     | |_____________^ doesn't have a size known at compile-time
     | 
    ::: libstd/collections/hash/map.rs:2844:5
     |
2844 |       thread_local! { static DROP_VECTOR: RefCell<Vec<i32>> = RefCell::new(Vec::new()) }
     |       ---------------------------------------------------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `i32`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `i32` cannot be known at compilation time
    --> libstd/thread/local.rs:191:31
     |
191  |                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     | 
    ::: libstd/collections/hash/map.rs:2844:5
     |
2844 |     thread_local! { static DROP_VECTOR: RefCell<Vec<i32>> = RefCell::new(Vec::new()) }
     |     ---------------------------------------------------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `i32`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `collections::hash::set::HashSet<T, S>` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:119:10
    |
119 | #[derive(Clone)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::set::HashSet<T, S>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `env::VarError` cannot be known at compilation time
   --> libstd/env.rs:249:32
    |
249 | #[derive(Debug, PartialEq, Eq, Clone)]
    |                                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `env::VarError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:124:48
    |
124 | #[derive(PartialEq, PartialOrd, Eq, Ord, Hash, Clone)]
    |                                                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:234:28
    |
234 | pub struct NulError(usize, Vec<u8>);
    |                            ^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `ffi::c_str::NulError` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:232:10
    |
232 | #[derive(Clone, PartialEq, Eq, Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::NulError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::FromBytesWithNulError` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:255:10
    |
255 | #[derive(Clone, PartialEq, Eq, Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::FromBytesWithNulError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::FromBytesWithNulErrorKind` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:261:10
    |
261 | #[derive(Clone, PartialEq, Eq, Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::FromBytesWithNulErrorKind`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::c_str::IntoStringError` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:293:10
    |
293 | #[derive(Clone, PartialEq, Eq, Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::IntoStringError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
  --> libstd/ffi/os_str.rs:81:10
   |
81 | #[derive(Clone)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `fs::Metadata` cannot be known at compilation time
   --> libstd/fs.rs:112:10
    |
112 | #[derive(Clone)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `fs::Metadata`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `fs::OpenOptions` cannot be known at compilation time
   --> libstd/fs.rs:189:10
    |
189 | #[derive(Clone, Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `fs::OpenOptions`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `fs::Permissions` cannot be known at compilation time
   --> libstd/fs.rs:201:10
    |
201 | #[derive(Clone, PartialEq, Eq, Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `fs::Permissions`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `fs::FileType` cannot be known at compilation time
   --> libstd/fs.rs:210:16
    |
210 | #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
    |                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `fs::FileType`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `fs::FileType` cannot be known at compilation time
   --> libstd/fs.rs:210:10
    |
210 | #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
    |          ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `fs::FileType`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `io::cursor::Cursor<T>` cannot be known at compilation time
  --> libstd/io/cursor.rs:84:10
   |
84 | #[derive(Clone, Debug)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::cursor::Cursor<T>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `io::error::ErrorKind` cannot be known at compilation time
  --> libstd/io/error.rs:97:17
   |
97 | #[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
   |                 ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::ErrorKind`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `io::error::ErrorKind` cannot be known at compilation time
  --> libstd/io/error.rs:97:10
   |
97 | #[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::ErrorKind`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/thread/local.rs:203:40
    |
203 |           $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    | 
   ::: libstd/io/stdio.rs:23:1
    |
23  | / thread_local! {
24  | |     static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {
25  | |         RefCell::new(None)
26  | |     }
27  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0038]: the trait `io::Write` cannot be made into an object
   --> libstd/thread/local.rs:203:40
    |
203 |           $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `io::Write` cannot be made into an object
    | 
   ::: libstd/io/stdio.rs:23:1
    |
23  | / thread_local! {
24  | |     static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {
25  | |         RefCell::new(None)
26  | |     }
27  | | }
    | |_- in this macro invocation
    |
    = note: method `by_ref` references the `Self` type in its arguments or return type

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/thread/local.rs:169:13
    |
169 |               fn __init() -> $t { $init }
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    | 
   ::: libstd/io/stdio.rs:23:1
    |
23  | / thread_local! {
24  | |     static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {
25  | |         RefCell::new(None)
26  | |     }
27  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0038]: the trait `io::Write` cannot be made into an object
   --> libstd/thread/local.rs:169:13
    |
169 |               fn __init() -> $t { $init }
    |               ^^^^^^^^^^^^^^^^^ the trait `io::Write` cannot be made into an object
    | 
   ::: libstd/io/stdio.rs:23:1
    |
23  | / thread_local! {
24  | |     static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {
25  | |         RefCell::new(None)
26  | |     }
27  | | }
    | |_- in this macro invocation
    |
    = note: method `by_ref` references the `Self` type in its arguments or return type

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::RefCell<core::option::Option<alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>>>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
    | 
   ::: libstd/io/stdio.rs:23:1
    |
23  | / thread_local! {
24  | |     static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {
25  | |         RefCell::new(None)
26  | |     }
27  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::RefCell<core::option::Option<alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>>>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::RefCell<core::option::Option<alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
    | 
   ::: libstd/io/stdio.rs:23:1
    |
23  | / thread_local! {
24  | |     static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {
25  | |         RefCell::new(None)
26  | |     }
27  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cell::RefCell<core::option::Option<alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
    | 
   ::: libstd/io/stdio.rs:23:1
    |
23  | / thread_local! {
24  | |     static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {
25  | |         RefCell::new(None)
26  | |     }
27  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0038]: the trait `io::Write` cannot be made into an object
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ the trait `io::Write` cannot be made into an object
    | 
   ::: libstd/io/stdio.rs:23:1
    |
23  | / thread_local! {
24  | |     static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {
25  | |         RefCell::new(None)
26  | |     }
27  | | }
    | |_- in this macro invocation
    |
    = note: method `by_ref` references the `Self` type in its arguments or return type

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/thread/local.rs:191:31
    |
191 |                   static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    | 
   ::: libstd/io/stdio.rs:23:1
    |
23  | / thread_local! {
24  | |     static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {
25  | |         RefCell::new(None)
26  | |     }
27  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0038]: the trait `io::Write` cannot be made into an object
   --> libstd/thread/local.rs:191:31
    |
191 |                   static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `io::Write` cannot be made into an object
    | 
   ::: libstd/io/stdio.rs:23:1
    |
23  | / thread_local! {
24  | |     static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {
25  | |         RefCell::new(None)
26  | |     }
27  | | }
    | |_- in this macro invocation
    |
    = note: method `by_ref` references the `Self` type in its arguments or return type

error[E0277]: the size for values of type `io::SeekFrom` cannot be known at compilation time
    --> libstd/io/mod.rs:1228:31
     |
1228 | #[derive(Copy, PartialEq, Eq, Clone, Debug)]
     |                               ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::SeekFrom`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `io::SeekFrom` cannot be known at compilation time
    --> libstd/io/mod.rs:1228:10
     |
1228 | #[derive(Copy, PartialEq, Eq, Clone, Debug)]
     |          ^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::SeekFrom`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::IpAddr` cannot be known at compilation time
  --> libstd/net/ip.rs:48:16
   |
48 | #[derive(Copy, Clone, Eq, PartialEq, Debug, Hash, PartialOrd, Ord)]
   |                ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `net::ip::IpAddr`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::IpAddr` cannot be known at compilation time
  --> libstd/net/ip.rs:48:10
   |
48 | #[derive(Copy, Clone, Eq, PartialEq, Debug, Hash, PartialOrd, Ord)]
   |          ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `net::ip::IpAddr`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv4Addr` cannot be known at compilation time
  --> libstd/net/ip.rs:87:10
   |
87 | #[derive(Copy)]
   |          ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv4Addr`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv6Addr` cannot be known at compilation time
   --> libstd/net/ip.rs:125:10
    |
125 | #[derive(Copy)]
    |          ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv6MulticastScope` cannot be known at compilation time
   --> libstd/net/ip.rs:132:31
    |
132 | #[derive(Copy, PartialEq, Eq, Clone, Hash, Debug)]
    |                               ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6MulticastScope`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv6MulticastScope` cannot be known at compilation time
   --> libstd/net/ip.rs:132:10
    |
132 | #[derive(Copy, PartialEq, Eq, Clone, Hash, Debug)]
    |          ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6MulticastScope`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::ip::Ipv6MulticastScope` cannot be known at compilation time
    --> libstd/net/ip.rs:1756:9
     |
1756 | /         fn check(str_addr: &str, octets: &[u8; 16], unspec: bool, loopback: bool,
1757 | |                  unique_local: bool, global: bool,
1758 | |                  u_link_local: bool, u_site_local: bool, u_global: bool, u_doc: bool,
1759 | |                  m_scope: Option<Ipv6MulticastScope>) {
...    |
1774 | |             assert_eq!(ip.is_multicast(), m_scope.is_some());
1775 | |         }
     | |_________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6MulticastScope`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
  --> libstd/net/addr.rs:48:16
   |
48 | #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
   |                ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
  --> libstd/net/addr.rs:48:10
   |
48 | #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
   |          ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::addr::SocketAddrV4` cannot be known at compilation time
  --> libstd/net/addr.rs:84:10
   |
84 | #[derive(Copy)]
   |          ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddrV4`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::addr::SocketAddrV6` cannot be known at compilation time
   --> libstd/net/addr.rs:114:10
    |
114 | #[derive(Copy)]
    |          ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddrV6`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::parser::AddrParseError` cannot be known at compilation time
   --> libstd/net/parser.rs:399:17
    |
399 | #[derive(Debug, Clone, PartialEq, Eq)]
    |                 ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::parser::AddrParseError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::Shutdown` cannot be known at compilation time
  --> libstd/net/mod.rs:67:16
   |
67 | #[derive(Copy, Clone, PartialEq, Eq, Debug)]
   |                ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `net::Shutdown`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `net::Shutdown` cannot be known at compilation time
  --> libstd/net/mod.rs:67:10
   |
67 | #[derive(Copy, Clone, PartialEq, Eq, Debug)]
   |          ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `net::Shutdown`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `os::vxworks::raw::stat` cannot be known at compilation time
  --> libstd/os/vxworks/raw.rs:43:10
   |
43 | #[derive(Clone)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `os::vxworks::raw::stat`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::Prefix<'a>` cannot be known at compilation time
   --> libstd/path.rs:146:16
    |
146 | #[derive(Copy, Clone, Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    |                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Prefix<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::Prefix<'a>` cannot be known at compilation time
   --> libstd/path.rs:146:10
    |
146 | #[derive(Copy, Clone, Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    |          ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Prefix<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::State` cannot be known at compilation time
   --> libstd/path.rs:378:16
    |
378 | #[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]
    |                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::State`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::State` cannot be known at compilation time
   --> libstd/path.rs:378:10
    |
378 | #[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]
    |          ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::State`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PrefixComponent<'a>` cannot be known at compilation time
   --> libstd/path.rs:423:16
    |
423 | #[derive(Copy, Clone, Eq, Debug)]
    |                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PrefixComponent<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PrefixComponent<'a>` cannot be known at compilation time
   --> libstd/path.rs:423:10
    |
423 | #[derive(Copy, Clone, Eq, Debug)]
    |          ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PrefixComponent<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::Component<'a>` cannot be known at compilation time
   --> libstd/path.rs:507:16
    |
507 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
    |                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Component<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::Component<'a>` cannot be known at compilation time
   --> libstd/path.rs:507:10
    |
507 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
    |          ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Component<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::Prefix<'a>` cannot be known at compilation time
   --> libstd/path.rs:612:5
    |
612 |     prefix: Option<Prefix<'a>>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Prefix<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `path::Components<'a>` cannot be known at compilation time
   --> libstd/path.rs:605:10
    |
605 | #[derive(Clone)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Components<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::Iter<'a>` cannot be known at compilation time
   --> libstd/path.rs:634:10
    |
634 | #[derive(Clone)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Iter<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `&'a path::Path` cannot be known at compilation time
    --> libstd/path.rs:1059:5
     |
1059 |     next: Option<&'a Path>,
     |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a path::Path`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `path::Ancestors<'a>` cannot be known at compilation time
    --> libstd/path.rs:1056:16
     |
1056 | #[derive(Copy, Clone, Debug)]
     |                ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::Ancestors<'a>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::Ancestors<'a>` cannot be known at compilation time
    --> libstd/path.rs:1056:10
     |
1056 | #[derive(Copy, Clone, Debug)]
     |          ^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::Ancestors<'a>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:1131:10
     |
1131 | #[derive(Clone)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `path::StripPrefixError` cannot be known at compilation time
    --> libstd/path.rs:1660:17
     |
1660 | #[derive(Debug, Clone, PartialEq, Eq)]
     |                 ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::StripPrefixError`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/process.rs:846:5
    |
846 |     pub stdout: Vec<u8>,
    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `process::Output` cannot be known at compilation time
   --> libstd/process.rs:838:25
    |
838 | #[derive(PartialEq, Eq, Clone)]
    |                         ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `process::Output`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `process::ExitStatus` cannot be known at compilation time
    --> libstd/process.rs:1141:32
     |
1141 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
     |                                ^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::ExitStatus`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `process::ExitStatus` cannot be known at compilation time
    --> libstd/process.rs:1141:25
     |
1141 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
     |                         ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::ExitStatus`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `process::ExitCode` cannot be known at compilation time
    --> libstd/process.rs:1231:17
     |
1231 | #[derive(Clone, Copy, Debug)]
     |                 ^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::ExitCode`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `process::ExitCode` cannot be known at compilation time
    --> libstd/process.rs:1231:10
     |
1231 | #[derive(Clone, Copy, Debug)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::ExitCode`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::blocking::SignalToken` cannot be known at compilation time
  --> libstd/sync/mpsc/blocking.rs:27:10
   |
27 | #[derive(Clone)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::blocking::SignalToken`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::cache_aligned::Aligner` cannot be known at compilation time
  --> libstd/sync/mpsc/cache_aligned.rs:13:23
   |
13 | #[derive(Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
   |                       ^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::cache_aligned::Aligner`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::cache_aligned::Aligner` cannot be known at compilation time
  --> libstd/sync/mpsc/cache_aligned.rs:13:16
   |
13 | #[derive(Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
   |                ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::cache_aligned::Aligner`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::cache_aligned::Aligner` cannot be known at compilation time
  --> libstd/sync/mpsc/cache_aligned.rs:13:10
   |
13 | #[derive(Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
   |          ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::cache_aligned::Aligner`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::cache_aligned::CacheAligned<T>` cannot be known at compilation time
  --> libstd/sync/mpsc/cache_aligned.rs:17:23
   |
17 | #[derive(Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
   |                       ^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::cache_aligned::CacheAligned<T>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::cache_aligned::CacheAligned<T>` cannot be known at compilation time
  --> libstd/sync/mpsc/cache_aligned.rs:17:16
   |
17 | #[derive(Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
   |                ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::cache_aligned::CacheAligned<T>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::cache_aligned::CacheAligned<T>` cannot be known at compilation time
  --> libstd/sync/mpsc/cache_aligned.rs:17:10
   |
17 | #[derive(Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
   |          ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::cache_aligned::CacheAligned<T>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::SendError<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:568:32
    |
568 | #[derive(PartialEq, Eq, Clone, Copy)]
    |                                ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::SendError<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::SendError<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:568:25
    |
568 | #[derive(PartialEq, Eq, Clone, Copy)]
    |                         ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::SendError<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::RecvError` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:581:32
    |
581 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::RecvError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::RecvError` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:581:25
    |
581 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                         ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::RecvError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::TryRecvError` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:592:32
    |
592 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::TryRecvError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::TryRecvError` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:592:25
    |
592 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                         ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::TryRecvError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::RecvTimeoutError` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:613:32
    |
613 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::RecvTimeoutError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::RecvTimeoutError` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:613:25
    |
613 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                         ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::RecvTimeoutError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::TrySendError<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:631:32
    |
631 | #[derive(PartialEq, Eq, Clone, Copy)]
    |                                ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::TrySendError<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::mpsc::TrySendError<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:631:25
    |
631 | #[derive(PartialEq, Eq, Clone, Copy)]
    |                         ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::TrySendError<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::condvar::WaitTimeoutResult` cannot be known at compilation time
  --> libstd/sync/condvar.rs:25:38
   |
25 | #[derive(Debug, PartialEq, Eq, Copy, Clone)]
   |                                      ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::condvar::WaitTimeoutResult`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sync::condvar::WaitTimeoutResult` cannot be known at compilation time
  --> libstd/sync/condvar.rs:25:32
   |
25 | #[derive(Debug, PartialEq, Eq, Copy, Clone)]
   |                                ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sync::condvar::WaitTimeoutResult`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `time::Instant` cannot be known at compilation time
  --> libstd/time.rs:70:16
   |
70 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
   |                ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `time::Instant`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `time::Instant` cannot be known at compilation time
  --> libstd/time.rs:70:10
   |
70 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
   |          ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `time::Instant`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `time::SystemTime` cannot be known at compilation time
   --> libstd/time.rs:125:16
    |
125 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::SystemTime`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `time::SystemTime` cannot be known at compilation time
   --> libstd/time.rs:125:10
    |
125 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |          ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::SystemTime`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `time::SystemTimeError` cannot be known at compilation time
   --> libstd/time.rs:147:10
    |
147 | #[derive(Clone, Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::SystemTimeError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:36:1
   |
36 | struct GenFuture<T: Generator<Yield = ()>>(T);
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Generator`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:35:62
   |
35 | #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
   |                                                              ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Generator`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:35:50
   |
35 | #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
   |                                                  ^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Generator`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:35:45
   |
35 | #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
   |                                             ^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Generator`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:35:34
   |
35 | #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
   |                                  ^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Generator`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:35:30
   |
35 | #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
   |                              ^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Generator`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:35:23
   |
35 | #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
   |                       ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Generator`

error[E0277]: the size for values of type `future::GenFuture<T>` cannot be known at compilation time
  --> libstd/future.rs:35:16
   |
35 | #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
   |                ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `future::GenFuture<T>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:35:16
   |
35 | #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
   |                ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Generator`

error[E0277]: the size for values of type `future::GenFuture<T>` cannot be known at compilation time
  --> libstd/future.rs:35:10
   |
35 | #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
   |          ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `future::GenFuture<T>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:35:10
   |
35 | #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
   |          ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Generator`

error[E0277]: the size for values of type `core::ptr::NonNull<core::task::LocalWaker>` cannot be known at compilation time
   --> libstd/thread/local.rs:203:40
    |
203 |           $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    | 
   ::: libstd/future.rs:53:1
    |
53  | / thread_local! {
54  | |     static TLS_WAKER: Cell<Option<NonNull<LocalWaker>>> = Cell::new(None);
55  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::ptr::NonNull<core::task::LocalWaker>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::ptr::NonNull<core::task::LocalWaker>` cannot be known at compilation time
   --> libstd/thread/local.rs:169:13
    |
169 |               fn __init() -> $t { $init }
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    | 
   ::: libstd/future.rs:53:1
    |
53  | / thread_local! {
54  | |     static TLS_WAKER: Cell<Option<NonNull<LocalWaker>>> = Cell::new(None);
55  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::ptr::NonNull<core::task::LocalWaker>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::Cell<core::option::Option<core::ptr::NonNull<core::task::LocalWaker>>>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
    | 
   ::: libstd/future.rs:53:1
    |
53  | / thread_local! {
54  | |     static TLS_WAKER: Cell<Option<NonNull<LocalWaker>>> = Cell::new(None);
55  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::Cell<core::option::Option<core::ptr::NonNull<core::task::LocalWaker>>>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::Cell<core::option::Option<core::ptr::NonNull<core::task::LocalWaker>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
    | 
   ::: libstd/future.rs:53:1
    |
53  | / thread_local! {
54  | |     static TLS_WAKER: Cell<Option<NonNull<LocalWaker>>> = Cell::new(None);
55  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cell::Cell<core::option::Option<core::ptr::NonNull<core::task::LocalWaker>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::ptr::NonNull<core::task::LocalWaker>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
    | 
   ::: libstd/future.rs:53:1
    |
53  | / thread_local! {
54  | |     static TLS_WAKER: Cell<Option<NonNull<LocalWaker>>> = Cell::new(None);
55  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::ptr::NonNull<core::task::LocalWaker>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::ptr::NonNull<core::task::LocalWaker>` cannot be known at compilation time
   --> libstd/thread/local.rs:191:31
    |
191 |                   static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    | 
   ::: libstd/future.rs:53:1
    |
53  | / thread_local! {
54  | |     static TLS_WAKER: Cell<Option<NonNull<LocalWaker>>> = Cell::new(None);
55  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::ptr::NonNull<core::task::LocalWaker>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `sys_common::thread_info::ThreadInfo` cannot be known at compilation time
   --> libstd/thread/local.rs:203:40
    |
203 |         $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    | 
   ::: libstd/sys_common/thread_info.rs:22:1
    |
22  | thread_local! { static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(None) }
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::thread_info::ThreadInfo`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `sys_common::thread_info::ThreadInfo` cannot be known at compilation time
   --> libstd/thread/local.rs:169:13
    |
169 |             fn __init() -> $t { $init }
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    | 
   ::: libstd/sys_common/thread_info.rs:22:1
    |
22  | thread_local! { static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(None) }
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::thread_info::ThreadInfo`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::RefCell<core::option::Option<sys_common::thread_info::ThreadInfo>>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
    | 
   ::: libstd/sys_common/thread_info.rs:22:1
    |
22  |   thread_local! { static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(None) }
    |   -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::RefCell<core::option::Option<sys_common::thread_info::ThreadInfo>>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::RefCell<core::option::Option<sys_common::thread_info::ThreadInfo>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
    | 
   ::: libstd/sys_common/thread_info.rs:22:1
    |
22  |   thread_local! { static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(None) }
    |   -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cell::RefCell<core::option::Option<sys_common::thread_info::ThreadInfo>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `sys_common::thread_info::ThreadInfo` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
    | 
   ::: libstd/sys_common/thread_info.rs:22:1
    |
22  |   thread_local! { static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(None) }
    |   -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::thread_info::ThreadInfo`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `sys_common::thread_info::ThreadInfo` cannot be known at compilation time
   --> libstd/thread/local.rs:191:31
    |
191 |                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    | 
   ::: libstd/sys_common/thread_info.rs:22:1
    |
22  | thread_local! { static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(None) }
    | -------------------------------------------------------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::thread_info::ThreadInfo`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `sys_common::wtf8::CodePoint` cannot be known at compilation time
  --> libstd/sys_common/wtf8.rs:50:49
   |
50 | #[derive(Eq, PartialEq, Ord, PartialOrd, Clone, Copy)]
   |                                                 ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::CodePoint`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys_common::wtf8::CodePoint` cannot be known at compilation time
  --> libstd/sys_common/wtf8.rs:50:42
   |
50 | #[derive(Eq, PartialEq, Ord, PartialOrd, Clone, Copy)]
   |                                          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::CodePoint`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:125:5
    |
125 |     bytes: Vec<u8>
    |     ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `sys_common::wtf8::Wtf8Buf` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:123:42
    |
123 | #[derive(Eq, PartialEq, Ord, PartialOrd, Clone)]
    |                                          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::Wtf8Buf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:793:5
    |
793 |     bytes: slice::Iter<'a, u8>
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::slice::Iter`

error[E0277]: the size for values of type `sys_common::wtf8::Wtf8CodePoints<'a>` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:791:10
    |
791 | #[derive(Clone)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::Wtf8CodePoints<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys_common::wtf8::EncodeWide<'a>` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:813:10
    |
813 | #[derive(Clone)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::EncodeWide<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `core::option::Option<char>` cannot be known at compilation time
    --> libstd/sys_common/wtf8.rs:1215:9
     |
1215 | /         fn cp(string: &Wtf8Buf) -> Vec<Option<char>> {
1216 | |             string.code_points().map(|c| c.to_char()).collect::<Vec<_>>()
1217 | |         }
     | |_________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<char>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `char` cannot be known at compilation time
    --> libstd/sys_common/wtf8.rs:1215:9
     |
1215 | /         fn cp(string: &Wtf8Buf) -> Vec<Option<char>> {
1216 | |             string.code_points().map(|c| c.to_char()).collect::<Vec<_>>()
1217 | |         }
     | |_________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `char`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `sys_common::process::DefaultEnvKey` cannot be known at compilation time
  --> libstd/sys_common/process.rs:25:10
   |
25 | #[derive(Clone, Debug, Eq, PartialEq, Ord, PartialOrd)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys_common::process::DefaultEnvKey`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `K` cannot be known at compilation time
  --> libstd/sys_common/process.rs:51:5
   |
51 |     vars: BTreeMap<K, Option<OsString>>
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `K`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where K: core::marker::Sized` bound
   = note: required by `alloc_crate::collections::BTreeMap`

error[E0277]: the size for values of type `core::option::Option<ffi::os_str::OsString>` cannot be known at compilation time
  --> libstd/sys_common/process.rs:51:5
   |
51 |     vars: BTreeMap<K, Option<OsString>>
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<ffi::os_str::OsString>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::collections::BTreeMap`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
  --> libstd/sys_common/process.rs:51:5
   |
51 |     vars: BTreeMap<K, Option<OsString>>
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `sys_common::process::CommandEnv<K>` cannot be known at compilation time
  --> libstd/sys_common/process.rs:47:10
   |
47 | #[derive(Clone, Debug)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys_common::process::CommandEnv<K>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys_common/net.rs:60:1
   |
60 | / pub fn setsockopt<T>(sock: &Socket, opt: c_int, val: c_int,
61 | |                      payload: T) -> io::Result<()> {
62 | |     unsafe {
63 | |         let payload = &payload as *const T as *const c_void;
...  |
67 | |     }
68 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys_common/net.rs:60:1
   |
60 | / pub fn setsockopt<T>(sock: &Socket, opt: c_int, val: c_int,
61 | |                      payload: T) -> io::Result<()> {
62 | |     unsafe {
63 | |         let payload = &payload as *const T as *const c_void;
...  |
67 | |     }
68 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys_common/net.rs:70:1
   |
70 | / pub fn getsockopt<T: Copy>(sock: &Socket, opt: c_int,
71 | |                        val: c_int) -> io::Result<T> {
72 | |     unsafe {
73 | |         let mut slot: T = mem::zeroed();
...  |
80 | |     }
81 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `(*mut libc::sockaddr, *mut i32)` cannot be known at compilation time
  --> libstd/sys_common/net.rs:83:1
   |
83 | / fn sockname<F>(f: F) -> io::Result<SocketAddr>
84 | |     where F: FnOnce(*mut c::sockaddr, *mut c::socklen_t) -> c_int
85 | | {
86 | |     unsafe {
...  |
91 | |     }
92 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `(*mut libc::sockaddr, *mut i32)`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `i32` cannot be known at compilation time
  --> libstd/sys_common/net.rs:83:1
   |
83 | / fn sockname<F>(f: F) -> io::Result<SocketAddr>
84 | |     where F: FnOnce(*mut c::sockaddr, *mut c::socklen_t) -> c_int
85 | | {
86 | |     unsafe {
...  |
91 | |     }
92 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `i32`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
  --> libstd/sys_common/net.rs:83:1
   |
83 | / fn sockname<F>(f: F) -> io::Result<SocketAddr>
84 | |     where F: FnOnce(*mut c::sockaddr, *mut c::socklen_t) -> c_int
85 | | {
86 | |     unsafe {
...  |
91 | |     }
92 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys_common/net.rs:83:1
   |
83 | / fn sockname<F>(f: F) -> io::Result<SocketAddr>
84 | |     where F: FnOnce(*mut c::sockaddr, *mut c::socklen_t) -> c_int
85 | | {
86 | |     unsafe {
...  |
91 | |     }
92 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/sys_common/net.rs:94:1
    |
94  | / pub fn sockaddr_to_addr(storage: &c::sockaddr_storage,
95  | |                     len: usize) -> io::Result<SocketAddr> {
96  | |     match storage.ss_family as c_int {
97  | |         c::AF_INET => {
...   |
112 | |     }
113 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:94:1
    |
94  | / pub fn sockaddr_to_addr(storage: &c::sockaddr_storage,
95  | |                     len: usize) -> io::Result<SocketAddr> {
96  | |     match storage.ss_family as c_int {
97  | |         c::AF_INET => {
...   |
112 | |     }
113 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/sys_common/net.rs:134:6
    |
134 | impl Iterator for LookupHost {
    |      ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys_common::net::LookupHost` cannot be known at compilation time
   --> libstd/sys_common/net.rs:161:1
    |
161 | / pub fn lookup_host(host: &str) -> io::Result<LookupHost> {
162 | |     init();
163 | |
164 | |     let c_host = CString::new(host)?;
...   |
172 | |     }
173 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::net::LookupHost`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:161:1
    |
161 | / pub fn lookup_host(host: &str) -> io::Result<LookupHost> {
162 | |     init();
163 | |
164 | |     let c_host = CString::new(host)?;
...   |
172 | |     }
173 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
  --> libstd/sys/vxworks/args.rs:19:5
   |
19 |     iter: vec::IntoIter<OsString>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::vec::IntoIter`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
  --> libstd/sys/vxworks/args.rs:29:6
   |
29 | impl Iterator for Args {
   |      ^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
  --> libstd/sys/vxworks/args.rs:75:5
   |
75 | /     fn clone() -> Vec<OsString> {
76 | |         unsafe {
77 | |             LOCK.lock();
78 | |             let ret = (0..ARGC).map(|i| {
...  |
84 | |         }
85 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/ext/fs.rs:781:1
    |
781 | / pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>
782 | | {
783 | |     sys::fs::symlink(src.as_ref(), dst.as_ref())
784 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/ext/fs.rs:781:1
    |
781 | / pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>
782 | | {
783 | |     sys::fs::symlink(src.as_ref(), dst.as_ref())
784 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `isize` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:52:9
   |
52 | /         unsafe fn cvt_pread(fd: c_int, buf: *mut c_void, count: usize, offset: i64)
53 | |             -> io::Result<isize>
54 | |         {
55 | |             use libc::pread;
56 | |             cvt(pread(fd, buf, count, offset))
57 | |         }
   | |_________^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `isize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:52:9
   |
52 | /         unsafe fn cvt_pread(fd: c_int, buf: *mut c_void, count: usize, offset: i64)
53 | |             -> io::Result<isize>
54 | |         {
55 | |             use libc::pread;
56 | |             cvt(pread(fd, buf, count, offset))
57 | |         }
   | |_________^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `isize` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:78:9
   |
78 | /         unsafe fn cvt_pwrite(fd: c_int, buf: *const c_void, count: usize, offset: i64)
79 | |             -> io::Result<isize>
80 | |         {
81 | |             use libc::pwrite;
82 | |             cvt(pwrite(fd, buf, count, offset))
83 | |         }
   | |_________^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `isize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:78:9
   |
78 | /         unsafe fn cvt_pwrite(fd: c_int, buf: *const c_void, count: usize, offset: i64)
79 | |             -> io::Result<isize>
80 | |         {
81 | |             use libc::pwrite;
82 | |             cvt(pwrite(fd, buf, count, offset))
83 | |         }
   | |_________^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::result::Result<sys::vxworks::fs::DirEntry, io::error::Error>` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:142:6
    |
142 | impl Iterator for ReadDir {
    |      ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<sys::vxworks::fs::DirEntry, io::error::Error>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:299:9
    |
299 | /         fn ensure_cloexec(_: &FileDesc) -> io::Result<()> {
300 | |             Ok(())
301 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:299:9
    |
299 | /         fn ensure_cloexec(_: &FileDesc) -> io::Result<()> {
300 | |             Ok(())
301 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:396:1
    |
396 | / fn cstr(path: &Path) -> io::Result<CString> {
397 | |     use sys::vxworks::ext::ffi::OsStrExt;
398 | |     Ok(CString::new(path.as_os_str().as_bytes())?)
399 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:396:1
    |
396 | / fn cstr(path: &Path) -> io::Result<CString> {
397 | |     use sys::vxworks::ext::ffi::OsStrExt;
398 | |     Ok(CString::new(path.as_os_str().as_bytes())?)
399 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:409:9
    |
409 | /         fn get_path(_fd: c_int) -> Option<PathBuf> {
410 | |             // FIXME(#:(): implement this for VxWorks
411 | |             None
412 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `(bool, bool)` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:413:9
    |
413 | /         fn get_mode(_fd: c_int) -> Option<(bool, bool)> {
414 | |             // FIXME(#:(): implement this for VxWorks
415 | |             None
416 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(bool, bool)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `sys::vxworks::fs::ReadDir` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:431:1
    |
431 | / pub fn readdir(p: &Path) -> io::Result<ReadDir> {
432 | |     let root = p.to_path_buf();
433 | |     let p = cstr(p)?;
434 | |     unsafe {
...   |
445 | |     }
446 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::ReadDir`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:431:1
    |
431 | / pub fn readdir(p: &Path) -> io::Result<ReadDir> {
432 | |     let root = p.to_path_buf();
433 | |     let p = cstr(p)?;
434 | |     unsafe {
...   |
445 | |     }
446 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:448:1
    |
448 | / pub fn unlink(p: &Path) -> io::Result<()> {
449 | |     let p = cstr(p)?;
450 | |     cvt(unsafe { libc::unlink(p.as_ptr()) })?;
451 | |     Ok(())
452 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:448:1
    |
448 | / pub fn unlink(p: &Path) -> io::Result<()> {
449 | |     let p = cstr(p)?;
450 | |     cvt(unsafe { libc::unlink(p.as_ptr()) })?;
451 | |     Ok(())
452 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:454:1
    |
454 | / pub fn rename(old: &Path, new: &Path) -> io::Result<()> {
455 | |     let old = cstr(old)?;
456 | |     let new = cstr(new)?;
457 | |     cvt(unsafe { libc::rename(old.as_ptr(), new.as_ptr()) })?;
458 | |     Ok(())
459 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:454:1
    |
454 | / pub fn rename(old: &Path, new: &Path) -> io::Result<()> {
455 | |     let old = cstr(old)?;
456 | |     let new = cstr(new)?;
457 | |     cvt(unsafe { libc::rename(old.as_ptr(), new.as_ptr()) })?;
458 | |     Ok(())
459 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:461:1
    |
461 | / pub fn set_perm(p: &Path, perm: FilePermissions) -> io::Result<()> {
462 | |     let p = cstr(p)?;
463 | |     cvt_r(|| unsafe { libc::chmod(p.as_ptr(), perm.mode) })?;
464 | |     Ok(())
465 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:461:1
    |
461 | / pub fn set_perm(p: &Path, perm: FilePermissions) -> io::Result<()> {
462 | |     let p = cstr(p)?;
463 | |     cvt_r(|| unsafe { libc::chmod(p.as_ptr(), perm.mode) })?;
464 | |     Ok(())
465 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:467:1
    |
467 | / pub fn rmdir(p: &Path) -> io::Result<()> {
468 | |     let p = cstr(p)?;
469 | |     cvt(unsafe { libc::rmdir(p.as_ptr()) })?;
470 | |     Ok(())
471 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:467:1
    |
467 | / pub fn rmdir(p: &Path) -> io::Result<()> {
468 | |     let p = cstr(p)?;
469 | |     cvt(unsafe { libc::rmdir(p.as_ptr()) })?;
470 | |     Ok(())
471 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:473:1
    |
473 | / pub fn remove_dir_all(path: &Path) -> io::Result<()> {
474 | |     let filetype = lstat(path)?.file_type();
475 | |     if filetype.is_symlink() {
476 | |         unlink(path)
...   |
479 | |     }
480 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:473:1
    |
473 | / pub fn remove_dir_all(path: &Path) -> io::Result<()> {
474 | |     let filetype = lstat(path)?.file_type();
475 | |     if filetype.is_symlink() {
476 | |         unlink(path)
...   |
479 | |     }
480 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:482:1
    |
482 | / fn remove_dir_all_recursive(path: &Path) -> io::Result<()> {
483 | |     for child in readdir(path)? {
484 | |         let child = child?;
485 | |         if child.file_type()?.is_dir() {
...   |
491 | |     rmdir(path)
492 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:482:1
    |
482 | / fn remove_dir_all_recursive(path: &Path) -> io::Result<()> {
483 | |     for child in readdir(path)? {
484 | |         let child = child?;
485 | |         if child.file_type()?.is_dir() {
...   |
491 | |     rmdir(path)
492 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:495:1
    |
495 | / pub fn readlink(p: &Path) -> io::Result<PathBuf> {
496 | |     unsupported()
497 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:495:1
    |
495 | / pub fn readlink(p: &Path) -> io::Result<PathBuf> {
496 | |     unsupported()
497 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:500:1
    |
500 | / pub fn symlink(src: &Path, dst: &Path) -> io::Result<()> {
501 | |     unsupported()
502 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:500:1
    |
500 | / pub fn symlink(src: &Path, dst: &Path) -> io::Result<()> {
501 | |     unsupported()
502 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:504:1
    |
504 | / pub fn link(src: &Path, dst: &Path) -> io::Result<()> {
505 | |     let src = cstr(src)?;
506 | |     let dst = cstr(dst)?;
507 | |     cvt(unsafe { libc::link(src.as_ptr(), dst.as_ptr()) })?;
508 | |     Ok(())
509 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:504:1
    |
504 | / pub fn link(src: &Path, dst: &Path) -> io::Result<()> {
505 | |     let src = cstr(src)?;
506 | |     let dst = cstr(dst)?;
507 | |     cvt(unsafe { libc::link(src.as_ptr(), dst.as_ptr()) })?;
508 | |     Ok(())
509 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::fs::FileAttr` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:511:1
    |
511 | / pub fn stat(p: &Path) -> io::Result<FileAttr> {
512 | |     let p = cstr(p)?;
513 | |     let mut stat: stat = unsafe { mem::zeroed() };
514 | |     cvt(unsafe {
...   |
517 | |     Ok(FileAttr { stat: stat })
518 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::FileAttr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:511:1
    |
511 | / pub fn stat(p: &Path) -> io::Result<FileAttr> {
512 | |     let p = cstr(p)?;
513 | |     let mut stat: stat = unsafe { mem::zeroed() };
514 | |     cvt(unsafe {
...   |
517 | |     Ok(FileAttr { stat: stat })
518 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::fs::FileAttr` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:520:1
    |
520 | / pub fn lstat(p: &Path) -> io::Result<FileAttr> {
521 | |     let p = cstr(p)?;
522 | |     let mut stat: stat = unsafe { mem::zeroed() };
523 | |     cvt(unsafe {
...   |
526 | |     Ok(FileAttr { stat: stat })
527 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::FileAttr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:520:1
    |
520 | / pub fn lstat(p: &Path) -> io::Result<FileAttr> {
521 | |     let p = cstr(p)?;
522 | |     let mut stat: stat = unsafe { mem::zeroed() };
523 | |     cvt(unsafe {
...   |
526 | |     Ok(FileAttr { stat: stat })
527 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:529:1
    |
529 | / pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {
530 | |     use sys::vxworks::ext::ffi::OsStrExt;
531 | |     let path = CString::new(p.as_os_str().as_bytes())?;
532 | |     let buf;
...   |
541 | |     Ok(PathBuf::from(OsString::from_vec(buf)))
542 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:529:1
    |
529 | / pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {
530 | |     use sys::vxworks::ext::ffi::OsStrExt;
531 | |     let path = CString::new(p.as_os_str().as_bytes())?;
532 | |     let buf;
...   |
541 | |     Ok(PathBuf::from(OsString::from_vec(buf)))
542 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u64` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:544:1
    |
544 | / pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {
545 | |     use fs::File;
546 | |     if !from.is_file() {
547 | |         return Err(Error::new(ErrorKind::InvalidInput,
...   |
557 | |     Ok(ret)
558 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u64`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:544:1
    |
544 | / pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {
545 | |     use fs::File;
546 | |     if !from.is_file() {
547 | |         return Err(Error::new(ErrorKind::InvalidInput,
...   |
557 | |     Ok(ret)
558 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/memchr.rs:1:1
   |
1  | / pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {
2  | |         use libc;
3  | |
4  | |         let p = unsafe {
...  |
14 | |         }
15 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/memchr.rs:17:1
   |
17 | / pub fn memrchr(needle: u8, haystack: &[u8]) -> Option<usize> {
18 | |         fn memrchr_specific(needle: u8, haystack: &[u8]) -> Option<usize> {
19 | |                 ::core::slice::memchr::memrchr(needle, haystack)
20 | |         }
21 | |         memrchr_specific(needle, haystack)
22 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/memchr.rs:18:9
   |
18 | /         fn memrchr_specific(needle: u8, haystack: &[u8]) -> Option<usize> {
19 | |                 ::core::slice::memchr::memrchr(needle, haystack)
20 | |         }
   | |_________^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/net.rs:36:1
   |
36 | / pub fn cvt_gai(err: c_int) -> io::Result<()> {
37 | |     if err == 0 {
38 | |         return Ok(())
39 | |     }
...  |
54 | |                                 detail)[..]))
55 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/net.rs:36:1
   |
36 | / pub fn cvt_gai(err: c_int) -> io::Result<()> {
37 | |     if err == 0 {
38 | |         return Ok(())
39 | |     }
...  |
54 | |                                 detail)[..]))
55 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:84:1
    |
84  | / pub fn getcwd() -> io::Result<PathBuf> {
85  | |     let mut buf = Vec::with_capacity(512);
86  | |     loop {
87  | |         unsafe {
...   |
106 | |     }
107 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:84:1
    |
84  | / pub fn getcwd() -> io::Result<PathBuf> {
85  | |     let mut buf = Vec::with_capacity(512);
86  | |     loop {
87  | |         unsafe {
...   |
106 | |     }
107 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:109:1
    |
109 | / pub fn chdir(p: &path::Path) -> io::Result<()> {
110 | |     let p: &OsStr = p.as_ref();
111 | |     let p = CString::new(p.as_bytes())?;
112 | |     unsafe {
...   |
117 | |     }
118 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:109:1
    |
109 | / pub fn chdir(p: &path::Path) -> io::Result<()> {
110 | |     let p: &OsStr = p.as_ref();
111 | |     let p = CString::new(p.as_bytes())?;
112 | |     unsafe {
...   |
117 | |     }
118 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::slice::Split<'a, u8, for<'r> fn(&'r u8) -> bool>` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:121:2
    |
121 |       iter: iter::Map<slice::Split<'a, u8, fn(&u8) -> bool>,
    |  _____^
122 | |             fn(&'a [u8]) -> PathBuf>,
    | |____________________________________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::slice::Split<'a, u8, for<'r> fn(&'r u8) -> bool>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::iter::Map`

error[E0277]: the size for values of type `fn(&'a [u8]) -> path::PathBuf` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:121:2
    |
121 |       iter: iter::Map<slice::Split<'a, u8, fn(&u8) -> bool>,
    |  _____^
122 | |             fn(&'a [u8]) -> PathBuf>,
    | |____________________________________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `fn(&'a [u8]) -> path::PathBuf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::iter::Map`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:121:2
    |
121 |       iter: iter::Map<slice::Split<'a, u8, fn(&u8) -> bool>,
    |  _____^
122 | |             fn(&'a [u8]) -> PathBuf>,
    | |____________________________________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::slice::Split`

error[E0277]: the size for values of type `for<'r> fn(&'r u8) -> bool` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:121:2
    |
121 |       iter: iter::Map<slice::Split<'a, u8, fn(&u8) -> bool>,
    |  _____^
122 | |             fn(&'a [u8]) -> PathBuf>,
    | |____________________________________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `for<'r> fn(&'r u8) -> bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::slice::Split`

error[E0277]: expected a `core::ops::FnMut<(&u8,)>` closure, found `for<'r> fn(&'r u8) -> bool`
   --> libstd/sys/vxworks/os.rs:121:2
    |
121 |       iter: iter::Map<slice::Split<'a, u8, fn(&u8) -> bool>,
    |  _____^
122 | |             fn(&'a [u8]) -> PathBuf>,
    | |____________________________________^ expected an `FnMut<(&u8,)>` closure, found `for<'r> fn(&'r u8) -> bool`
    |
    = help: the trait `for<'r> core::ops::FnMut<(&'r u8,)>` is not implemented for `for<'r> fn(&'r u8) -> bool`
    = note: required by `core::slice::Split`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:137:10
    |
137 | impl<'a> Iterator for SplitPaths<'a> {
    |          ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:146:1
    |
146 | / pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>
147 | |     where I: Iterator<Item=T>, T: AsRef<OsStr>
148 | | {
149 | |     let mut joined = Vec::new();
...   |
162 | |     Ok(OsStringExt::from_vec(joined))
163 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::iter::Iterator`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:146:1
    |
146 | / pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>
147 | |     where I: Iterator<Item=T>, T: AsRef<OsStr>
148 | | {
149 | |     let mut joined = Vec::new();
...   |
162 | |     Ok(OsStringExt::from_vec(joined))
163 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::os::JoinPathsError` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:146:1
    |
146 | / pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>
147 | |     where I: Iterator<Item=T>, T: AsRef<OsStr>
148 | | {
149 | |     let mut joined = Vec::new();
...   |
162 | |     Ok(OsStringExt::from_vec(joined))
163 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::os::JoinPathsError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:175:1
    |
175 | / pub fn current_exe() -> io::Result<PathBuf> {
176 | |     let selfexe = PathBuf::from("/proc/self/exe");
177 | |     if selfexe.exists() {
178 | |         if cfg!(target_os = "vxworks"){
...   |
197 | |     }
198 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:175:1
    |
175 | / pub fn current_exe() -> io::Result<PathBuf> {
176 | |     let selfexe = PathBuf::from("/proc/self/exe");
177 | |     if selfexe.exists() {
178 | |         if cfg!(target_os = "vxworks"){
...   |
197 | |     }
198 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(ffi::os_str::OsString, ffi::os_str::OsString)` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:201:2
    |
201 |     iter: vec::IntoIter<(OsString, OsString)>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(ffi::os_str::OsString, ffi::os_str::OsString)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::vec::IntoIter`

error[E0277]: the size for values of type `(ffi::os_str::OsString, ffi::os_str::OsString)` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:205:6
    |
205 | impl Iterator for Env {
    |      ^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(ffi::os_str::OsString, ffi::os_str::OsString)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `(ffi::os_str::OsString, ffi::os_str::OsString)` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:239:2
    |
239 |       fn parse(input: &[u8]) -> Option<(OsString, OsString)> {
    |  _____^
240 | |         // Strategy (copied from glibc): Variable name and value are separated
241 | |         // by an ASCII equals sign '='. Since a variable name must not be
242 | |         // empty, allow variable names starting with an equals sign. Skip all
...   |
251 | |         ))
252 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(ffi::os_str::OsString, ffi::os_str::OsString)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::option::Option<ffi::os_str::OsString>` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:255:1
    |
255 | / pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {
256 | |     // environment variables with a nul byte can't be set, so their value is
257 | |     // always None as well
258 | |     let k = CString::new(k.as_bytes())?;
...   |
268 | |     }
269 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<ffi::os_str::OsString>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:255:1
    |
255 | / pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {
256 | |     // environment variables with a nul byte can't be set, so their value is
257 | |     // always None as well
258 | |     let k = CString::new(k.as_bytes())?;
...   |
268 | |     }
269 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:255:1
    |
255 | / pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {
256 | |     // environment variables with a nul byte can't be set, so their value is
257 | |     // always None as well
258 | |     let k = CString::new(k.as_bytes())?;
...   |
268 | |     }
269 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:271:1
    |
271 | / pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {
272 | |     let k = CString::new(k.as_bytes())?;
273 | |     let v = CString::new(v.as_bytes())?;
274 | |
...   |
278 | |     }
279 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:271:1
    |
271 | / pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {
272 | |     let k = CString::new(k.as_bytes())?;
273 | |     let v = CString::new(v.as_bytes())?;
274 | |
...   |
278 | |     }
279 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:281:1
    |
281 | / pub fn unsetenv(n: &OsStr) -> io::Result<()> {
282 | |     let nbuf = CString::new(n.as_bytes())?;
283 | |
284 | |     unsafe {
...   |
287 | |     }
288 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:281:1
    |
281 | / pub fn unsetenv(n: &OsStr) -> io::Result<()> {
282 | |     let nbuf = CString::new(n.as_bytes())?;
283 | |
284 | |     unsafe {
...   |
287 | |     }
288 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:306:1
    |
306 | / pub fn home_dir() -> Option<PathBuf> {
307 | |     return ::env::var_os("HOME").or_else(|| unsafe {
308 | |         fallback()
309 | |     }).map(PathBuf::from);
...   |
328 | |     }
329 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:311:2
    |
311 |       unsafe fn fallback() -> Option<OsString> {
    |  _____^
312 | |         let amt = match libc::sysconf(libc::_SC_GETPW_R_SIZE_MAX) {
313 | |             n if n < 0 => 512 as usize,
314 | |             n => n as usize,
...   |
327 | |         }
328 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/os_str.rs:45:6
   |
45 | impl IntoInner<Vec<u8>> for Buf {
   |      ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `path::Prefix<'_>` cannot be known at compilation time
  --> libstd/sys/vxworks/path.rs:14:1
   |
14 | / pub fn parse_prefix(_: &OsStr) -> Option<Prefix> {
15 | |     None
16 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `path::Prefix<'_>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `(sys::vxworks::pipe::AnonPipe, sys::vxworks::pipe::AnonPipe)` cannot be known at compilation time
  --> libstd/sys/vxworks/pipe.rs:10:1
   |
10 | / pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {
11 | |     static INVALID: AtomicBool = ATOMIC_BOOL_INIT;
12 | |
13 | |     let mut fds = [0; 2];
...  |
25 | |     Ok((AnonPipe(fd0), AnonPipe(fd1)))
26 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `(sys::vxworks::pipe::AnonPipe, sys::vxworks::pipe::AnonPipe)`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/pipe.rs:10:1
   |
10 | / pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {
11 | |     static INVALID: AtomicBool = ATOMIC_BOOL_INIT;
12 | |
13 | |     let mut fds = [0; 2];
...  |
25 | |     Ok((AnonPipe(fd0), AnonPipe(fd1)))
26 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/pipe.rs:44:1
   |
44 | / pub fn read2(p1: AnonPipe,
45 | |              v1: &mut Vec<u8>,
46 | |              p2: AnonPipe,
47 | |              v2: &mut Vec<u8>) -> io::Result<()> {
...  |
92 | |     }
93 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/pipe.rs:44:1
   |
44 | / pub fn read2(p1: AnonPipe,
45 | |              v1: &mut Vec<u8>,
46 | |              p2: AnonPipe,
47 | |              v2: &mut Vec<u8>) -> io::Result<()> {
...  |
92 | |     }
93 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/pipe.rs:44:1
   |
44 | / pub fn read2(p1: AnonPipe,
45 | |              v1: &mut Vec<u8>,
46 | |              p2: AnonPipe,
47 | |              v2: &mut Vec<u8>) -> io::Result<()> {
...  |
92 | |     }
93 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/pipe.rs:80:5
   |
80 | /     fn read(fd: &FileDesc, dst: &mut Vec<u8>) -> Result<bool, io::Error> {
81 | |         match fd.read_to_end(dst) {
82 | |             Ok(_) => Ok(true),
83 | |             Err(e) => {
...  |
91 | |         }
92 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
  --> libstd/sys/vxworks/pipe.rs:80:5
   |
80 | /     fn read(fd: &FileDesc, dst: &mut Vec<u8>) -> Result<bool, io::Error> {
81 | |         match fd.read_to_end(dst) {
82 | |             Ok(_) => Ok(true),
83 | |             Err(e) => {
...  |
91 | |         }
92 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `bool`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/pipe.rs:80:5
   |
80 | /     fn read(fd: &FileDesc, dst: &mut Vec<u8>) -> Result<bool, io::Error> {
81 | |         match fd.read_to_end(dst) {
82 | |             Ok(_) => Ok(true),
83 | |             Err(e) => {
...  |
91 | |         }
92 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
  --> libstd/sys/vxworks/process/process_common.rs:47:5
   |
47 |     args: Vec<CString>,
   |     ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u16` cannot be known at compilation time
  --> libstd/sys/vxworks/process/process_common.rs:52:5
   |
52 |     uid: Option<uid_t>,
   |     ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u16`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn core::ops::FnMut<(), Output=core::result::Result<(), io::error::Error>> + core::marker::Send + core::marker::Sync + 'static)>` cannot be known at compilation time
  --> libstd/sys/vxworks/process/process_common.rs:55:5
   |
55 |     closures: Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn core::ops::FnMut<(), Output=core::result::Result<(), io::error::Error>> + core::marker::Send + core::marker::Sync + 'static)>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/process/process_common.rs:55:5
   |
55 |     closures: Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/process/process_common.rs:55:5
   |
55 |     closures: Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::process::process_common::Stdio` cannot be known at compilation time
  --> libstd/sys/vxworks/process/process_common.rs:56:5
   |
56 |     stdin: Option<Stdio>,
   |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::process::process_common::Stdio`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `*const i8` cannot be known at compilation time
  --> libstd/sys/vxworks/process/process_common.rs:62:13
   |
62 | struct Argv(Vec<*const c_char>);
   |             ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `*const i8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `sys::vxworks::pipe::AnonPipe` cannot be known at compilation time
  --> libstd/sys/vxworks/process/process_common.rs:70:5
   |
70 |     pub stdin: Option<AnonPipe>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::pipe::AnonPipe`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:225:5
    |
225 |     items: Vec<CString>,
    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `*const i8` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:226:5
    |
226 |     ptrs: Vec<*const c_char>
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `*const i8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `sys_common::process::DefaultEnvKey` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:249:1
    |
249 | / fn construct_envp(env: BTreeMap<DefaultEnvKey, OsString>, saw_nul: &mut bool) -> CStringArray {
250 | |     let mut result = CStringArray::with_capacity(env.len());
251 | |     for (k, v) in env {
252 | |         let mut k: OsString = k.into();
...   |
267 | |     result
268 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::process::DefaultEnvKey`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::collections::BTreeMap`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:249:1
    |
249 | / fn construct_envp(env: BTreeMap<DefaultEnvKey, OsString>, saw_nul: &mut bool) -> CStringArray {
250 | |     let mut result = CStringArray::with_capacity(env.len());
251 | |     for (k, v) in env {
252 | |         let mut k: OsString = k.into();
...   |
267 | |     result
268 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::collections::BTreeMap`

error[E0277]: the size for values of type `sys::vxworks::pipe::AnonPipe` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:317:6
    |
317 | impl From<AnonPipe> for Stdio {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::pipe::AnonPipe`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::process::process_common::Stdio` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:317:6
    |
317 | impl From<AnonPipe> for Stdio {
    |      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::process::process_common::Stdio`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::fs::File` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:323:6
    |
323 | impl From<File> for Stdio {
    |      ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::File`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::process::process_common::Stdio` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:323:6
    |
323 | impl From<File> for Stdio {
    |      ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::process::process_common::Stdio`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `i32` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:383:6
    |
383 | impl From<c_int> for ExitStatus {
    |      ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `i32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::process::process_common::ExitStatus` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:383:6
    |
383 | impl From<c_int> for ExitStatus {
    |      ^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::process::process_common::ExitStatus`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::process::process_common::ExitStatus` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_vxworks.rs:117:5
    |
117 |     status: Option<ExitStatus>,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::process::process_common::ExitStatus`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::ops::Range<usize>` cannot be known at compilation time
   --> libstd/sys/vxworks/thread.rs:148:5
    |
148 |     pub unsafe fn current() -> Option<Guard> { None }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::ops::Range<usize>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/thread.rs:148:5
    |
148 |     pub unsafe fn current() -> Option<Guard> { None }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::Range`

error[E0277]: the size for values of type `core::ops::Range<usize>` cannot be known at compilation time
   --> libstd/sys/vxworks/thread.rs:149:5
    |
149 |     pub unsafe fn init() -> Option<Guard> { None }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::ops::Range<usize>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/thread.rs:149:5
    |
149 |     pub unsafe fn init() -> Option<Guard> { None }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::Range`

error[E0277]: the size for values of type `unsafe extern "C" fn(*mut u8)` cannot be known at compilation time
  --> libstd/sys/vxworks/thread_local.rs:8:1
   |
8  | / pub unsafe fn create(dtor: Option<unsafe extern fn(*mut u8)>) -> Key {
9  | |     let mut key = 0;
10 | |     assert_eq!(libc::pthread_key_create(&mut key, mem::transmute(dtor)), 0);
11 | |     key
12 | | }
   | |_^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `unsafe extern "C" fn(*mut u8)`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `libc::timespec` cannot be known at compilation time
   --> libstd/sys/vxworks/time.rs:186:10
    |
186 |     impl From<libc::timespec> for SystemTime {
    |          ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `libc::timespec`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::time::inner::SystemTime` cannot be known at compilation time
   --> libstd/sys/vxworks/time.rs:186:10
    |
186 |     impl From<libc::timespec> for SystemTime {
    |          ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::time::inner::SystemTime`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sys/vxworks/mod.rs:96:1
    |
96  | / pub fn cvt<T: IsMinusOne>(t: T) -> IO::Result<T> {
97  | |     if t.is_minus_one() {
98  | |         Err(IO::Error::last_os_error())
99  | |     } else {
100 | |         Ok(t)
101 | |     }
102 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/mod.rs:96:1
    |
96  | / pub fn cvt<T: IsMinusOne>(t: T) -> IO::Result<T> {
97  | |     if t.is_minus_one() {
98  | |         Err(IO::Error::last_os_error())
99  | |     } else {
100 | |         Ok(t)
101 | |     }
102 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/mod.rs:104:1
    |
104 | / pub fn cvt_r<T, F>(mut f: F) -> IO::Result<T>
105 | |     where T: IsMinusOne,
106 | |           F: FnMut() -> T
107 | | {
...   |
113 | |     }
114 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::FnMut`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sys/vxworks/mod.rs:104:1
    |
104 | / pub fn cvt_r<T, F>(mut f: F) -> IO::Result<T>
105 | |     where T: IsMinusOne,
106 | |           F: FnMut() -> T
107 | | {
...   |
113 | |     }
114 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/mod.rs:104:1
    |
104 | / pub fn cvt_r<T, F>(mut f: F) -> IO::Result<T>
105 | |     where T: IsMinusOne,
106 | |           F: FnMut() -> T
107 | | {
...   |
113 | |     }
114 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sys/vxworks/mod.rs:122:1
    |
122 | / pub fn unsupported<T>() -> IO::Result<T> {
123 | |     Err(unsupported_err())
124 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/mod.rs:122:1
    |
122 | / pub fn unsupported<T>() -> IO::Result<T> {
123 | |     Err(unsupported_err())
124 | | }
    | |_^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::fs::FileAttr` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:18:10
   |
18 | #[derive(Clone)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::FileAttr`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::fs::ReadDir` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:29:10
   |
29 | #[derive(Clone)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::ReadDir`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::fs::OpenOptions` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:45:10
   |
45 | #[derive(Clone, Debug)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::OpenOptions`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::fs::FilePermissions` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:59:10
   |
59 | #[derive(Clone, PartialEq, Eq, Debug)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::FilePermissions`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::fs::FileType` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:62:16
   |
62 | #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
   |                ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::FileType`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::fs::FileType` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:62:10
   |
62 | #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
   |          ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::FileType`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/os_str.rs:14:5
   |
14 |     pub inner: Vec<u8>
   |     ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `sys::vxworks::os_str::Buf` cannot be known at compilation time
  --> libstd/sys/vxworks/os_str.rs:12:10
   |
12 | #[derive(Clone, Hash)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::os_str::Buf`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::process::process_common::ExitStatus` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:350:32
    |
350 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::process::process_common::ExitStatus`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::process::process_common::ExitStatus` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:350:25
    |
350 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                         ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::process::process_common::ExitStatus`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::process::process_common::ExitCode` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:400:32
    |
400 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::process::process_common::ExitCode`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::process::process_common::ExitCode` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:400:25
    |
400 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                         ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::process::process_common::ExitCode`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::time::Timespec` cannot be known at compilation time
  --> libstd/sys/vxworks/time.rs:11:16
   |
11 | #[derive(Copy, Clone)]
   |                ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::time::Timespec`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::time::Timespec` cannot be known at compilation time
  --> libstd/sys/vxworks/time.rs:11:10
   |
11 | #[derive(Copy, Clone)]
   |          ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::time::Timespec`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::time::inner::Instant` cannot be known at compilation time
   --> libstd/sys/vxworks/time.rs:119:20
    |
119 |     #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |                    ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::time::inner::Instant`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::time::inner::Instant` cannot be known at compilation time
   --> libstd/sys/vxworks/time.rs:119:14
    |
119 |     #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |              ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::time::inner::Instant`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::time::inner::SystemTime` cannot be known at compilation time
   --> libstd/sys/vxworks/time.rs:124:20
    |
124 |     #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |                    ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::time::inner::SystemTime`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::time::inner::SystemTime` cannot be known at compilation time
   --> libstd/sys/vxworks/time.rs:124:14
    |
124 |     #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |              ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::time::inner::SystemTime`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::Void` cannot be known at compilation time
   --> libstd/sys/vxworks/mod.rs:131:16
    |
131 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]
    |                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::Void`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `sys::vxworks::Void` cannot be known at compilation time
   --> libstd/sys/vxworks/mod.rs:131:10
    |
131 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]
    |          ^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::Void`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/thread/local.rs:203:40
    |
203 |           $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    | 
   ::: libstd/panicking.rs:38:1
    |
38  | / thread_local! {
39  | |     pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {
40  | |         RefCell::new(None)
41  | |     }
42  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0038]: the trait `io::Write` cannot be made into an object
   --> libstd/thread/local.rs:203:40
    |
203 |           $(#[$attr])* $vis const $name: $crate::thread::LocalKey<$t> =
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `io::Write` cannot be made into an object
    | 
   ::: libstd/panicking.rs:38:1
    |
38  | / thread_local! {
39  | |     pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {
40  | |         RefCell::new(None)
41  | |     }
42  | | }
    | |_- in this macro invocation
    |
    = note: method `by_ref` references the `Self` type in its arguments or return type

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/thread/local.rs:169:13
    |
169 |               fn __init() -> $t { $init }
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    | 
   ::: libstd/panicking.rs:38:1
    |
38  | / thread_local! {
39  | |     pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {
40  | |         RefCell::new(None)
41  | |     }
42  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0038]: the trait `io::Write` cannot be made into an object
   --> libstd/thread/local.rs:169:13
    |
169 |               fn __init() -> $t { $init }
    |               ^^^^^^^^^^^^^^^^^ the trait `io::Write` cannot be made into an object
    | 
   ::: libstd/panicking.rs:38:1
    |
38  | / thread_local! {
39  | |     pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {
40  | |         RefCell::new(None)
41  | |     }
42  | | }
    | |_- in this macro invocation
    |
    = note: method `by_ref` references the `Self` type in its arguments or return type

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<core::cell::RefCell<core::option::Option<alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>>>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
    | 
   ::: libstd/panicking.rs:38:1
    |
38  | / thread_local! {
39  | |     pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {
40  | |         RefCell::new(None)
41  | |     }
42  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<core::cell::RefCell<core::option::Option<alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>>>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cell::RefCell<core::option::Option<alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>>>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
    | 
   ::: libstd/panicking.rs:38:1
    |
38  | / thread_local! {
39  | |     pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {
40  | |         RefCell::new(None)
41  | |     }
42  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cell::RefCell<core::option::Option<alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ doesn't have a size known at compile-time
    | 
   ::: libstd/panicking.rs:38:1
    |
38  | / thread_local! {
39  | |     pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {
40  | |         RefCell::new(None)
41  | |     }
42  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0038]: the trait `io::Write` cannot be made into an object
   --> libstd/thread/local.rs:171:13
    |
171 | /             unsafe fn __getit() -> $crate::option::Option<
172 | |                 &'static $crate::cell::UnsafeCell<
173 | |                     $crate::option::Option<$t>>>
174 | |             {
...   |
194 | |                 __KEY.get()
195 | |             }
    | |_____________^ the trait `io::Write` cannot be made into an object
    | 
   ::: libstd/panicking.rs:38:1
    |
38  | / thread_local! {
39  | |     pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {
40  | |         RefCell::new(None)
41  | |     }
42  | | }
    | |_- in this macro invocation
    |
    = note: method `by_ref` references the `Self` type in its arguments or return type

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/thread/local.rs:191:31
    |
191 |                   static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    | 
   ::: libstd/panicking.rs:38:1
    |
38  | / thread_local! {
39  | |     pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {
40  | |         RefCell::new(None)
41  | |     }
42  | | }
    | |_- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn io::Write + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0038]: the trait `io::Write` cannot be made into an object
   --> libstd/thread/local.rs:191:31
    |
191 |                   static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `io::Write` cannot be made into an object
    | 
   ::: libstd/panicking.rs:38:1
    |
38  | / thread_local! {
39  | |     pub static LOCAL_STDERR: RefCell<Option<Box<dyn Write + Send>>> = {
40  | |         RefCell::new(None)
41  | |     }
42  | | }
    | |_- in this macro invocation
    |
    = note: method `by_ref` references the `Self` type in its arguments or return type

error[E0277]: the size for values of type `panicking::Hook` cannot be known at compilation time
  --> libstd/panicking.rs:64:16
   |
64 | #[derive(Copy, Clone)]
   |                ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `panicking::Hook`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `panicking::Hook` cannot be known at compilation time
  --> libstd/panicking.rs:64:10
   |
64 | #[derive(Copy, Clone)]
   |          ^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `panicking::Hook`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>

error[E0277]: the size for values of type `u8` cannot be known at compilation time
    --> libstd/io/buffered.rs:1154:36
     |
1154 |         struct FailFlushWriter<'a>(&'a mut Vec<u8>);
     |                                    ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u8`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `&<Self as collections::hash::Recover<Q>>::Key` cannot be known at compilation time
  --> libstd/collections/hash/mod.rs:21:5
   |
21 |     fn get(&self, key: &Q) -> Option<&Self::Key>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `&<Self as collections::hash::Recover<Q>>::Key`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `<Self as collections::hash::Recover<Q>>::Key` cannot be known at compilation time
  --> libstd/collections/hash/mod.rs:22:5
   |
22 |     fn take(&mut self, key: &Q) -> Option<Self::Key>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `<Self as collections::hash::Recover<Q>>::Key`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where <Self as collections::hash::Recover<Q>>::Key: core::marker::Sized` bound
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `<Self as collections::hash::Recover<Q>>::Key` cannot be known at compilation time
  --> libstd/collections/hash/mod.rs:23:5
   |
23 |     fn replace(&mut self, key: Self::Key) -> Option<Self::Key>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `<Self as collections::hash::Recover<Q>>::Key`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where <Self as collections::hash::Recover<Q>>::Key: core::marker::Sized` bound
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `&dyn error::Error` cannot be known at compilation time
   --> libstd/error.rs:143:5
    |
143 | /     fn cause(&self) -> Option<&dyn Error> {
144 | |         self.source()
145 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&dyn error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&(dyn error::Error + 'static)` cannot be known at compilation time
   --> libstd/error.rs:206:5
    |
206 |     fn source(&self) -> Option<&(dyn Error + 'static)> { None }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&(dyn error::Error + 'static)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/mod.rs:530:5
    |
530 |     fn read(&mut self, buf: &mut [u8]) -> Result<usize>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/mod.rs:530:5
    |
530 |     fn read(&mut self, buf: &mut [u8]) -> Result<usize>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/mod.rs:608:5
    |
608 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {
609 | |         read_to_end(self, buf)
610 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/mod.rs:608:5
    |
608 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {
609 | |         read_to_end(self, buf)
610 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/mod.rs:608:5
    |
608 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {
609 | |         read_to_end(self, buf)
610 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/mod.rs:651:5
    |
651 | /     fn read_to_string(&mut self, buf: &mut String) -> Result<usize> {
652 | |         // Note that we do *not* call `.read_to_end()` here. We are passing
653 | |         // `&mut Vec<u8>` (the raw contents of `buf`) into the `read_to_end`
654 | |         // method to fill it up. An arbitrary implementation could overwrite the
...   |
661 | |         append_to_string(buf, |b| read_to_end(self, b))
662 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/mod.rs:651:5
    |
651 | /     fn read_to_string(&mut self, buf: &mut String) -> Result<usize> {
652 | |         // Note that we do *not* call `.read_to_end()` here. We are passing
653 | |         // `&mut Vec<u8>` (the raw contents of `buf`) into the `read_to_end`
654 | |         // method to fill it up. An arbitrary implementation could overwrite the
...   |
661 | |         append_to_string(buf, |b| read_to_end(self, b))
662 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/mod.rs:714:5
    |
714 | /     fn read_exact(&mut self, mut buf: &mut [u8]) -> Result<()> {
715 | |         while !buf.is_empty() {
716 | |             match self.read(buf) {
717 | |                 Ok(0) => break,
...   |
728 | |         }
729 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/mod.rs:714:5
    |
714 | /     fn read_exact(&mut self, mut buf: &mut [u8]) -> Result<()> {
715 | |         while !buf.is_empty() {
716 | |             match self.read(buf) {
717 | |                 Ok(0) => break,
...   |
728 | |         }
729 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `Self` cannot be known at compilation time
   --> libstd/io/mod.rs:803:5
    |
803 | /     fn bytes(self) -> Bytes<Self> where Self: Sized {
804 | |         Bytes { inner: self }
805 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `realstd::marker::Sized` is not implemented for `Self`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where Self: realstd::marker::Sized` bound
note: required by `io::Bytes`
   --> libstd/io/mod.rs:1959:1
    |
1959| pub struct Bytes<R> {
    | ^^^^^^^^^^^^^^^^^^^

error[E0277]: the size for values of type `Self` cannot be known at compilation time
   --> libstd/io/mod.rs:838:5
    |
838 | /     fn chain<R: Read>(self, next: R) -> Chain<Self, R> where Self: Sized {
839 | |         Chain { first: self, second: next, done_first: false }
840 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `realstd::marker::Sized` is not implemented for `Self`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where Self: realstd::marker::Sized` bound
note: required by `io::Chain`
   --> libstd/io/mod.rs:1607:1
    |
1607| pub struct Chain<T, U> {
    | ^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the size for values of type `Self` cannot be known at compilation time
   --> libstd/io/mod.rs:874:5
    |
874 | /     fn take(self, limit: u64) -> Take<Self> where Self: Sized {
875 | |         Take { inner: self, limit: limit }
876 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `realstd::marker::Sized` is not implemented for `Self`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where Self: realstd::marker::Sized` bound
note: required by `io::Take`
   --> libstd/io/mod.rs:1749:1
    |
1749| pub struct Take<T> {
    | ^^^^^^^^^^^^^^^^^^

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/io/mod.rs:1007:5
     |
1007 |     fn write(&mut self, buf: &[u8]) -> Result<usize>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1007:5
     |
1007 |     fn write(&mut self, buf: &[u8]) -> Result<usize>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/mod.rs:1033:5
     |
1033 |     fn flush(&mut self) -> Result<()>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1033:5
     |
1033 |     fn flush(&mut self) -> Result<()>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/mod.rs:1066:5
     |
1066 | /     fn write_all(&mut self, mut buf: &[u8]) -> Result<()> {
1067 | |         while !buf.is_empty() {
1068 | |             match self.write(buf) {
1069 | |                 Ok(0) => return Err(Error::new(ErrorKind::WriteZero,
...    |
1076 | |         Ok(())
1077 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1066:5
     |
1066 | /     fn write_all(&mut self, mut buf: &[u8]) -> Result<()> {
1067 | |         while !buf.is_empty() {
1068 | |             match self.write(buf) {
1069 | |                 Ok(0) => return Err(Error::new(ErrorKind::WriteZero,
...    |
1076 | |         Ok(())
1077 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/mod.rs:1118:5
     |
1118 | /     fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<()> {
1119 | |         // Create a shim which translates a Write to a fmt::Write and saves
1120 | |         // off I/O errors. instead of discarding them
1121 | |         struct Adaptor<'a, T: ?Sized + 'a> {
...    |
1149 | |         }
1150 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1118:5
     |
1118 | /     fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<()> {
1119 | |         // Create a shim which translates a Write to a fmt::Write and saves
1120 | |         // off I/O errors. instead of discarding them
1121 | |         struct Adaptor<'a, T: ?Sized + 'a> {
...    |
1149 | |         }
1150 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `u64` cannot be known at compilation time
    --> libstd/io/mod.rs:1220:5
     |
1220 |     fn seek(&mut self, pos: SeekFrom) -> Result<u64>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u64`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1220:5
     |
1220 |     fn seek(&mut self, pos: SeekFrom) -> Result<u64>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&[u8]` cannot be known at compilation time
    --> libstd/io/mod.rs:1378:5
     |
1378 |     fn fill_buf(&mut self) -> Result<&[u8]>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&[u8]`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1378:5
     |
1378 |     fn fill_buf(&mut self) -> Result<&[u8]>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
    --> libstd/io/mod.rs:1456:5
     |
1456 | /     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> Result<usize> {
1457 | |         read_until(self, byte, buf)
1458 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u8`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/io/mod.rs:1456:5
     |
1456 | /     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> Result<usize> {
1457 | |         read_until(self, byte, buf)
1458 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1456:5
     |
1456 | /     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> Result<usize> {
1457 | |         read_until(self, byte, buf)
1458 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/io/mod.rs:1515:5
     |
1515 | /     fn read_line(&mut self, buf: &mut String) -> Result<usize> {
1516 | |         // Note that we are not calling the `.read_until` method here, but
1517 | |         // rather our hardcoded implementation. For more details as to why, see
1518 | |         // the comments in `read_to_end`.
1519 | |         append_to_string(buf, |b| read_until(self, b'\n', b))
1520 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1515:5
     |
1515 | /     fn read_line(&mut self, buf: &mut String) -> Result<usize> {
1516 | |         // Note that we are not calling the `.read_until` method here, but
1517 | |         // rather our hardcoded implementation. For more details as to why, see
1518 | |         // the comments in `read_to_end`.
1519 | |         append_to_string(buf, |b| read_until(self, b'\n', b))
1520 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `Self` cannot be known at compilation time
    --> libstd/io/mod.rs:1556:5
     |
1556 | /     fn split(self, byte: u8) -> Split<Self> where Self: Sized {
1557 | |         Split { buf: self, delim: byte }
1558 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `realstd::marker::Sized` is not implemented for `Self`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where Self: realstd::marker::Sized` bound
note: required by `io::Split`
    --> libstd/io/mod.rs:1981:1
     |
1981 | pub struct Split<B> {
     | ^^^^^^^^^^^^^^^^^^^

error[E0277]: the size for values of type `Self` cannot be known at compilation time
    --> libstd/io/mod.rs:1595:5
     |
1595 | /     fn lines(self) -> Lines<Self> where Self: Sized {
1596 | |         Lines { buf: self }
1597 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `realstd::marker::Sized` is not implemented for `Self`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where Self: realstd::marker::Sized` bound
note: required by `io::Lines`
    --> libstd/io/mod.rs:2013:1
     |
2013 | pub struct Lines<B> {
     | ^^^^^^^^^^^^^^^^^^^

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:809:5
    |
809 |     fn to_socket_addrs(&self) -> io::Result<Self::Iter>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::iter::Iterator`

error[E0277]: the size for values of type `<Self as net::addr::ToSocketAddrs>::Iter` cannot be known at compilation time
   --> libstd/net/addr.rs:809:5
    |
809 |     fn to_socket_addrs(&self) -> io::Result<Self::Iter>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `<Self as net::addr::ToSocketAddrs>::Iter`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where <Self as net::addr::ToSocketAddrs>::Iter: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:809:5
    |
809 |     fn to_socket_addrs(&self) -> io::Result<Self::Iter>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/ext/ffi.rs:28:5
   |
28 |     fn from_vec(vec: Vec<u8>) -> Self;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/ext/ffi.rs:46:5
   |
46 |     fn into_vec(self) -> Vec<u8>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/ext/fs.rs:60:5
   |
60 |     fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/ext/fs.rs:60:5
   |
60 |     fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/ext/fs.rs:113:5
    |
113 | /     fn read_exact_at(&self, mut buf: &mut [u8], mut offset: u64) -> io::Result<()> {
114 | |         while !buf.is_empty() {
115 | |             match self.read_at(buf, offset) {
116 | |                 Ok(0) => break,
...   |
131 | |         }
132 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/ext/fs.rs:113:5
    |
113 | /     fn read_exact_at(&self, mut buf: &mut [u8], mut offset: u64) -> io::Result<()> {
114 | |         while !buf.is_empty() {
115 | |             match self.read_at(buf, offset) {
116 | |                 Ok(0) => break,
...   |
131 | |         }
132 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/ext/fs.rs:167:5
    |
167 |     fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/ext/fs.rs:167:5
    |
167 |     fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/ext/fs.rs:208:5
    |
208 | /     fn write_all_at(&self, mut buf: &[u8], mut offset: u64) -> io::Result<()> {
209 | |         while !buf.is_empty() {
210 | |             match self.write_at(buf, offset) {
211 | |                 Ok(0) => return Err(io::Error::new(io::ErrorKind::WriteZero,
...   |
221 | |         Ok(())
222 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/ext/fs.rs:208:5
    |
208 | /     fn write_all_at(&self, mut buf: &[u8], mut offset: u64) -> io::Result<()> {
209 | |         while !buf.is_empty() {
210 | |             match self.write_at(buf, offset) {
211 | |                 Ok(0) => return Err(io::Error::new(io::ErrorKind::WriteZero,
...   |
221 | |         Ok(())
222 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/ffi.rs:26:2
   |
26 |     fn from_vec(vec: Vec<u8>) -> Self;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/ffi.rs:44:2
   |
44 |     fn into_vec(self) -> Vec<u8>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
 --> libstd/sys/vxworks/ffifix.rs:7:5
  |
7 |     fn from_vec(vec: Vec<u8>) -> Self;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
  |
  = help: the trait `core::marker::Sized` is not implemented for `u8`
  = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
  = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
 --> libstd/sys/vxworks/ffifix.rs:8:5
  |
8 |     fn into_vec(self) -> Vec<u8>;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
  |
  = help: the trait `core::marker::Sized` is not implemented for `u8`
  = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
  = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/os.rs:28:5
   |
28 |     fn from_vec(vec: Vec<u8>) -> Self;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/os.rs:29:5
   |
29 |     fn into_vec(self) -> Vec<u8>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/thread/local.rs:112:5
    |
112 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
113 | |         f.pad("LocalKey { .. }")
114 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/thread/local.rs:112:5
    |
112 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
113 | |         f.pad("LocalKey { .. }")
114 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/thread/local.rs:216:5
    |
216 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
217 | |         f.debug_struct("AccessError").finish()
218 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/thread/local.rs:216:5
    |
216 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
217 | |         f.debug_struct("AccessError").finish()
218 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/thread/local.rs:223:5
    |
223 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
224 | |         fmt::Display::fmt("already destroyed", f)
225 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/thread/local.rs:223:5
    |
223 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
224 | |         fmt::Display::fmt("already destroyed", f)
225 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<T>>` cannot be known at compilation time
   --> libstd/thread/local.rs:233:5
    |
233 | /     pub const unsafe fn new(inner: unsafe fn() -> Option<&'static UnsafeCell<Option<T>>>,
234 | |                             init: fn() -> T) -> LocalKey<T> {
235 | |         LocalKey {
236 | |             inner,
237 | |             init,
238 | |         }
239 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/thread/local.rs:233:5
    |
233 | /     pub const unsafe fn new(inner: unsafe fn() -> Option<&'static UnsafeCell<Option<T>>>,
234 | |                             init: fn() -> T) -> LocalKey<T> {
235 | |         LocalKey {
236 | |             inner,
237 | |             init,
238 | |         }
239 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/thread/local.rs:258:5
    |
258 | /     unsafe fn init(&self, slot: &UnsafeCell<Option<T>>) -> &T {
259 | |         // Execute the initialization up front, *then* move it into our slot,
260 | |         // just in case initialization fails.
261 | |         let value = (self.init)();
...   |
278 | |         (*ptr).as_ref().unwrap()
279 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `R` cannot be known at compilation time
   --> libstd/thread/local.rs:292:5
    |
292 | /     pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>
293 | |     where
294 | |         F: FnOnce(&T) -> R,
295 | |     {
...   |
304 | |         }
305 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `R`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where R: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `thread::local::AccessError` cannot be known at compilation time
   --> libstd/thread/local.rs:292:5
    |
292 | /     pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>
293 | |     where
294 | |         F: FnOnce(&T) -> R,
295 | |     {
...   |
304 | |         }
305 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::local::AccessError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/thread/local.rs:428:9
    |
428 | /         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
429 | |             f.pad("Key { .. }")
430 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/thread/local.rs:428:9
    |
428 | /         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
429 | |             f.pad("Key { .. }")
430 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&'static core::cell::UnsafeCell<core::option::Option<T>>` cannot be known at compilation time
   --> libstd/thread/local.rs:448:9
    |
448 | /         pub unsafe fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {
449 | |             let ptr = self.os.get() as *mut Value<T>;
450 | |             if !ptr.is_null() {
451 | |                 if ptr as usize == 1 {
...   |
465 | |             Some(&(*ptr).value)
466 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'static core::cell::UnsafeCell<core::option::Option<T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/thread/local.rs:448:9
    |
448 | /         pub unsafe fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {
449 | |             let ptr = self.os.get() as *mut Value<T>;
450 | |             if !ptr.is_null() {
451 | |                 if ptr as usize == 1 {
...   |
465 | |             Some(&(*ptr).value)
466 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/thread/mod.rs:387:5
    |
387 | /     pub fn spawn<F, T>(self, f: F) -> io::Result<JoinHandle<T>> where
388 | |         F: FnOnce() -> T, F: Send + 'static, T: Send + 'static
389 | |     {
390 | |         let Builder { name, stack_size } = self;
...   |
423 | |         }))
424 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/thread/mod.rs:387:5
    |
387 | /     pub fn spawn<F, T>(self, f: F) -> io::Result<JoinHandle<T>> where
388 | |         F: FnOnce() -> T, F: Send + 'static, T: Send + 'static
389 | |     {
390 | |         let Builder { name, stack_size } = self;
...   |
423 | |         }))
424 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `thread::JoinHandle<T>` cannot be known at compilation time
   --> libstd/thread/mod.rs:387:5
    |
387 | /     pub fn spawn<F, T>(self, f: F) -> io::Result<JoinHandle<T>> where
388 | |         F: FnOnce() -> T, F: Send + 'static, T: Send + 'static
389 | |     {
390 | |         let Builder { name, stack_size } = self;
...   |
423 | |         }))
424 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `thread::JoinHandle<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/thread/mod.rs:387:5
    |
387 | /     pub fn spawn<F, T>(self, f: F) -> io::Result<JoinHandle<T>> where
388 | |         F: FnOnce() -> T, F: Send + 'static, T: Send + 'static
389 | |     {
390 | |         let Builder { name, stack_size } = self;
...   |
423 | |         }))
424 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
    --> libstd/thread/mod.rs:1025:5
     |
1025 | /     pub(crate) fn new(name: Option<String>) -> Thread {
1026 | |         let cname = name.map(|n| {
1027 | |             CString::new(n).expect("thread name may not contain interior null bytes")
1028 | |         });
...    |
1037 | |         }
1038 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `&str` cannot be known at compilation time
    --> libstd/thread/mod.rs:1149:5
     |
1149 | /     pub fn name(&self) -> Option<&str> {
1150 | |         self.cname().map(|s| unsafe { str::from_utf8_unchecked(s.to_bytes()) } )
1151 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&str`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `&ffi::c_str::CStr` cannot be known at compilation time
    --> libstd/thread/mod.rs:1153:5
     |
1153 | /     fn cname(&self) -> Option<&CStr> {
1154 | |         self.inner.name.as_ref().map(|s| &**s)
1155 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&ffi::c_str::CStr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/thread/mod.rs:1160:5
     |
1160 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1161 | |         fmt::Debug::fmt(&self.name(), f)
1162 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/thread/mod.rs:1160:5
     |
1160 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1161 | |         fmt::Debug::fmt(&self.name(), f)
1162 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/thread/mod.rs:1222:5
     |
1222 | /     fn join(&mut self) -> Result<T> {
1223 | |         self.native.take().unwrap().join();
1224 | |         unsafe {
1225 | |             (*self.packet.0.get()).take().unwrap()
1226 | |         }
1227 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn core::any::Any + core::marker::Send + 'static)>` cannot be known at compilation time
    --> libstd/thread/mod.rs:1222:5
     |
1222 | /     fn join(&mut self) -> Result<T> {
1223 | |         self.native.take().unwrap().join();
1224 | |         unsafe {
1225 | |             (*self.packet.0.get()).take().unwrap()
1226 | |         }
1227 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn core::any::Any + core::marker::Send + 'static)>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/thread/mod.rs:1355:5
     |
1355 | /     pub fn join(mut self) -> Result<T> {
1356 | |         self.0.join()
1357 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn core::any::Any + core::marker::Send + 'static)>` cannot be known at compilation time
    --> libstd/thread/mod.rs:1355:5
     |
1355 | /     pub fn join(mut self) -> Result<T> {
1356 | |         self.0.join()
1357 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn core::any::Any + core::marker::Send + 'static)>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/thread/mod.rs:1370:5
     |
1370 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1371 | |         f.pad("JoinHandle { .. }")
1372 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/thread/mod.rs:1370:5
     |
1370 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1371 | |         f.pad("JoinHandle { .. }")
1372 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/ascii.rs:200:5
    |
200 |     type Owned = Vec<u8>;
    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `collections::hash::table::GapThenFull<K, V, M>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:446:5
    |
446 | /     pub fn gap_peek(self) -> Result<GapThenFull<K, V, M>, Bucket<K, V, M>> {
447 | |         let gap = EmptyBucket {
448 | |             raw: self.raw,
449 | |             table: (),
...   |
460 | |         }
461 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::GapThenFull<K, V, M>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `collections::hash::table::Bucket<K, V, M>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:446:5
    |
446 | /     pub fn gap_peek(self) -> Result<GapThenFull<K, V, M>, Bucket<K, V, M>> {
447 | |         let gap = EmptyBucket {
448 | |             raw: self.raw,
449 | |             table: (),
...   |
460 | |         }
461 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::Bucket<K, V, M>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `collections::hash::table::GapThenFull<K, V, M>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:632:5
    |
632 | /     pub fn shift(mut self) -> Result<GapThenFull<K, V, M>, Bucket<K, V, M>> {
633 | |         unsafe {
634 | |             let (gap_hash, gap_pair) = self.gap.raw.hash_pair();
635 | |             let (full_hash, full_pair) = self.full.raw.hash_pair();
...   |
651 | |         }
652 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::GapThenFull<K, V, M>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `collections::hash::table::Bucket<K, V, M>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:632:5
    |
632 | /     pub fn shift(mut self) -> Result<GapThenFull<K, V, M>, Bucket<K, V, M>> {
633 | |         unsafe {
634 | |             let (gap_hash, gap_pair) = self.gap.raw.hash_pair();
635 | |             let (full_hash, full_pair) = self.full.raw.hash_pair();
...   |
651 | |         }
652 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::Bucket<K, V, M>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `collections::hash::table::RawTable<K, V>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:684:5
    |
684 | /     unsafe fn new_uninitialized_internal(
685 | |         capacity: usize,
686 | |         fallibility: Fallibility,
687 | |     ) -> Result<RawTable<K, V>, CollectionAllocErr> {
...   |
712 | |         })
713 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::RawTable<K, V>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::collections::CollectionAllocErr` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:684:5
    |
684 | /     unsafe fn new_uninitialized_internal(
685 | |         capacity: usize,
686 | |         fallibility: Fallibility,
687 | |     ) -> Result<RawTable<K, V>, CollectionAllocErr> {
...   |
712 | |         })
713 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::collections::CollectionAllocErr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `collections::hash::table::RawTable<K, V>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:739:5
    |
739 | /     fn new_internal(
740 | |         capacity: usize,
741 | |         fallibility: Fallibility,
742 | |     ) -> Result<RawTable<K, V>, CollectionAllocErr> {
...   |
749 | |         }
750 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::RawTable<K, V>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::collections::CollectionAllocErr` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:739:5
    |
739 | /     fn new_internal(
740 | |         capacity: usize,
741 | |         fallibility: Fallibility,
742 | |     ) -> Result<RawTable<K, V>, CollectionAllocErr> {
...   |
749 | |         }
750 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::collections::CollectionAllocErr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `collections::hash::table::RawTable<K, V>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:754:5
    |
754 | /     pub fn try_new(capacity: usize) -> Result<RawTable<K, V>, CollectionAllocErr> {
755 | |         Self::new_internal(capacity, Fallible)
756 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::RawTable<K, V>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::collections::CollectionAllocErr` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:754:5
    |
754 | /     pub fn try_new(capacity: usize) -> Result<RawTable<K, V>, CollectionAllocErr> {
755 | |         Self::new_internal(capacity, Fallible)
756 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::collections::CollectionAllocErr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `collections::hash::table::RawBucket<K, V>` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:885:5
    |
885 | /     fn next(&mut self) -> Option<RawBucket<K, V>> {
886 | |         if self.elems_left == 0 {
887 | |             return None;
888 | |         }
...   |
899 | |         }
900 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::RawBucket<K, V>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:902:5
    |
902 | /     fn size_hint(&self) -> (usize, Option<usize>) {
903 | |         (self.elems_left, Some(self.elems_left))
904 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `(&'a K, &'a V)` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:988:5
    |
988 | /     fn next(&mut self) -> Option<(&'a K, &'a V)> {
989 | |         self.iter.next().map(|raw| unsafe {
990 | |             let pair_ptr = raw.pair();
991 | |             (&(*pair_ptr).0, &(*pair_ptr).1)
992 | |         })
993 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(&'a K, &'a V)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/collections/hash/table.rs:995:5
    |
995 | /     fn size_hint(&self) -> (usize, Option<usize>) {
996 | |         self.iter.size_hint()
997 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `(&'a K, &'a mut V)` cannot be known at compilation time
    --> libstd/collections/hash/table.rs:1009:5
     |
1009 | /     fn next(&mut self) -> Option<(&'a K, &'a mut V)> {
1010 | |         self.iter.next().map(|raw| unsafe {
1011 | |             let pair_ptr = raw.pair();
1012 | |             (&(*pair_ptr).0, &mut (*pair_ptr).1)
1013 | |         })
1014 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(&'a K, &'a mut V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/table.rs:1016:5
     |
1016 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1017 | |         self.iter.size_hint()
1018 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `(collections::hash::table::SafeHash, K, V)` cannot be known at compilation time
    --> libstd/collections/hash/table.rs:1030:5
     |
1030 | /     fn next(&mut self) -> Option<(SafeHash, K, V)> {
1031 | |         self.iter.next().map(|raw| {
1032 | |             self.table.size -= 1;
1033 | |             unsafe {
...    |
1037 | |         })
1038 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(collections::hash::table::SafeHash, K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/table.rs:1040:5
     |
1040 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1041 | |         self.iter.size_hint()
1042 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `(collections::hash::table::SafeHash, K, V)` cannot be known at compilation time
    --> libstd/collections/hash/table.rs:1055:5
     |
1055 | /     fn next(&mut self) -> Option<(SafeHash, K, V)> {
1056 | |         self.iter.next().map(|raw| {
1057 | |             unsafe {
1058 | |                 self.table.as_mut().size -= 1;
...    |
1062 | |         })
1063 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(collections::hash::table::SafeHash, K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/table.rs:1065:5
     |
1065 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1066 | |         self.iter.size_hint()
1067 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/collections/hash/map.rs:48:5
   |
48 | /     fn try_raw_capacity(&self, len: usize) -> Result<usize, CollectionAllocErr> {
49 | |         if len == 0 {
50 | |             Ok(0)
51 | |         } else {
...  |
62 | |         }
63 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::collections::CollectionAllocErr` cannot be known at compilation time
  --> libstd/collections/hash/map.rs:48:5
   |
48 | /     fn try_raw_capacity(&self, len: usize) -> Result<usize, CollectionAllocErr> {
49 | |         if len == 0 {
50 | |             Ok(0)
51 | |         } else {
...  |
62 | |         }
63 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::collections::CollectionAllocErr`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `collections::hash::table::FullBucket<K, V, &'a collections::hash::table::RawTable<K, V>>` cannot be known at compilation time
   --> libstd/collections/hash/map.rs:586:5
    |
586 | /     fn search<'a, Q: ?Sized>(&'a self, q: &Q)
587 | |         -> Option<FullBucket<K, V, &'a RawTable<K, V>>>
588 | |         where K: Borrow<Q>,
589 | |               Q: Eq + Hash
...   |
597 | |             .into_occupied_bucket()
598 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::FullBucket<K, V, &'a collections::hash::table::RawTable<K, V>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `collections::hash::table::FullBucket<K, V, &'a mut collections::hash::table::RawTable<K, V>>` cannot be known at compilation time
   --> libstd/collections/hash/map.rs:601:5
    |
601 | /     fn search_mut<'a, Q: ?Sized>(&'a mut self, q: &Q)
602 | |         -> Option<FullBucket<K, V, &'a mut RawTable<K, V>>>
603 | |         where K: Borrow<Q>,
604 | |               Q: Eq + Hash
...   |
612 | |             .into_occupied_bucket()
613 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::FullBucket<K, V, &'a mut collections::hash::table::RawTable<K, V>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/collections/hash/map.rs:827:5
    |
827 | /     pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
828 | |         self.reserve_internal(additional, Fallible)
829 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::collections::CollectionAllocErr` cannot be known at compilation time
   --> libstd/collections/hash/map.rs:827:5
    |
827 | /     pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
828 | |         self.reserve_internal(additional, Fallible)
829 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::collections::CollectionAllocErr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/collections/hash/map.rs:831:5
    |
831 | /     fn reserve_internal(&mut self, additional: usize, fallibility: Fallibility)
832 | |         -> Result<(), CollectionAllocErr> {
833 | |
834 | |         let remaining = self.capacity() - self.len(); // this can't overflow
...   |
847 | |         Ok(())
848 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::collections::CollectionAllocErr` cannot be known at compilation time
   --> libstd/collections/hash/map.rs:831:5
    |
831 | /     fn reserve_internal(&mut self, additional: usize, fallibility: Fallibility)
832 | |         -> Result<(), CollectionAllocErr> {
833 | |
834 | |         let remaining = self.capacity() - self.len(); // this can't overflow
...   |
847 | |         Ok(())
848 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::collections::CollectionAllocErr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/collections/hash/map.rs:857:5
    |
857 | /     fn try_resize(
858 | |         &mut self,
859 | |         new_raw_cap: usize,
860 | |         fallibility: Fallibility,
...   |
910 | |         Ok(())
911 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::collections::CollectionAllocErr` cannot be known at compilation time
   --> libstd/collections/hash/map.rs:857:5
    |
857 | /     fn try_resize(
858 | |         &mut self,
859 | |         new_raw_cap: usize,
860 | |         fallibility: Fallibility,
...   |
910 | |         Ok(())
911 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::collections::CollectionAllocErr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `V` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:991:5
     |
991  | /     fn insert_hashed_nocheck(&mut self, hash: SafeHash, k: K, v: V) -> Option<V> {
992  | |         let entry = search_hashed(&mut self.table, hash, |key| *key == k).into_entry(k);
993  | |         match entry {
994  | |             Some(Occupied(mut elem)) => Some(elem.insert(v)),
...    |
1000 | |         }
1001 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `V`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where V: core::marker::Sized` bound
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `&V` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1252:5
     |
1252 | /     pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
1253 | |         where K: Borrow<Q>,
1254 | |               Q: Hash + Eq
1255 | |     {
1256 | |         self.search(k).map(|bucket| bucket.into_refs().1)
1257 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&V`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `(&K, &V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1280:5
     |
1280 | /     pub fn get_key_value<Q: ?Sized>(&self, k: &Q) -> Option<(&K, &V)>
1281 | |         where K: Borrow<Q>,
1282 | |               Q: Hash + Eq
1283 | |     {
1284 | |         self.search(k).map(|bucket| bucket.into_refs())
1285 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(&K, &V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `&mut V` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1336:5
     |
1336 | /     pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
1337 | |         where K: Borrow<Q>,
1338 | |               Q: Hash + Eq
1339 | |     {
1340 | |         self.search_mut(k).map(|bucket| bucket.into_mut_refs().1)
1341 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&mut V`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `V` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1369:5
     |
1369 | /     pub fn insert(&mut self, k: K, v: V) -> Option<V> {
1370 | |         let hash = self.make_hash(&k);
1371 | |         self.reserve(1);
1372 | |         self.insert_hashed_nocheck(hash, k, v)
1373 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `V`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where V: core::marker::Sized` bound
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `V` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1396:5
     |
1396 | /     pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
1397 | |         where K: Borrow<Q>,
1398 | |               Q: Hash + Eq
1399 | |     {
1400 | |         self.search_mut(k).map(|bucket| pop_internal(bucket).1)
1401 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `V`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where V: core::marker::Sized` bound
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `(K, V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1426:5
     |
1426 | /     pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
1427 | |         where K: Borrow<Q>,
1428 | |               Q: Hash + Eq
1429 | |     {
...    |
1434 | |             })
1435 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1516:5
     |
1516 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1517 | |         f.debug_map().entries(self.iter()).finish()
1518 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1516:5
     |
1516 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1517 | |         f.debug_map().entries(self.iter()).finish()
1518 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1573:5
     |
1573 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1574 | |         f.debug_list()
1575 | |             .entries(self.clone())
1576 | |             .finish()
1577 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1573:5
     |
1573 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1574 | |         f.debug_list()
1575 | |             .entries(self.clone())
1576 | |             .finish()
1577 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1626:5
     |
1626 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1627 | |         f.debug_list()
1628 | |             .entries(self.clone())
1629 | |             .finish()
1630 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1626:5
     |
1626 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1627 | |         f.debug_list()
1628 | |             .entries(self.clone())
1629 | |             .finish()
1630 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1655:5
     |
1655 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1656 | |         f.debug_list()
1657 | |             .entries(self.clone())
1658 | |             .finish()
1659 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1655:5
     |
1655 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1656 | |         f.debug_list()
1657 | |             .entries(self.clone())
1658 | |             .finish()
1659 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `collections::hash::table::FullBucket<K, V, M>` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1697:5
     |
1697 | /     fn into_occupied_bucket(self) -> Option<FullBucket<K, V, M>> {
1698 | |         match self {
1699 | |             InternalEntry::Occupied { elem } => Some(elem),
1700 | |             _ => None,
1701 | |         }
1702 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::table::FullBucket<K, V, M>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `collections::hash::map::Entry<'a, K, V>` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1707:5
     |
1707 | /     fn into_entry(self, key: K) -> Option<Entry<'a, K, V>> {
1708 | |         match self {
1709 | |             InternalEntry::Occupied { elem } => {
1710 | |                 Some(Occupied(OccupiedEntry {
...    |
1723 | |         }
1724 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `collections::hash::map::Entry<'a, K, V>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1748:5
     |
1748 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1749 | |         match *self {
1750 | |             Vacant(ref v) => {
1751 | |                 f.debug_tuple("Entry")
...    |
1760 | |         }
1761 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1748:5
     |
1748 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1749 | |         match *self {
1750 | |             Vacant(ref v) => {
1751 | |                 f.debug_tuple("Entry")
...    |
1760 | |         }
1761 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1776:5
     |
1776 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1777 | |         f.debug_struct("OccupiedEntry")
1778 | |             .field("key", self.key())
1779 | |             .field("value", self.get())
1780 | |             .finish()
1781 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1776:5
     |
1776 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1777 | |         f.debug_struct("OccupiedEntry")
1778 | |             .field("key", self.key())
1779 | |             .field("value", self.get())
1780 | |             .finish()
1781 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1797:5
     |
1797 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1798 | |         f.debug_tuple("VacantEntry")
1799 | |             .field(self.key())
1800 | |             .finish()
1801 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1797:5
     |
1797 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1798 | |         f.debug_tuple("VacantEntry")
1799 | |             .field(self.key())
1800 | |             .finish()
1801 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `(&'a K, &'a V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1874:5
     |
1874 | /     fn next(&mut self) -> Option<(&'a K, &'a V)> {
1875 | |         self.inner.next()
1876 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(&'a K, &'a V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1878:5
     |
1878 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1879 | |         self.inner.size_hint()
1880 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `(&'a K, &'a mut V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1898:5
     |
1898 | /     fn next(&mut self) -> Option<(&'a K, &'a mut V)> {
1899 | |         self.inner.next()
1900 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(&'a K, &'a mut V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1902:5
     |
1902 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1903 | |         self.inner.size_hint()
1904 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1921:5
     |
1921 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1922 | |         f.debug_list()
1923 | |             .entries(self.inner.iter())
1924 | |             .finish()
1925 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1921:5
     |
1921 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1922 | |         f.debug_list()
1923 | |             .entries(self.inner.iter())
1924 | |             .finish()
1925 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `(K, V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1933:5
     |
1933 | /     fn next(&mut self) -> Option<(K, V)> {
1934 | |         self.inner.next().map(|(_, k, v)| (k, v))
1935 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1937:5
     |
1937 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1938 | |         self.inner.size_hint()
1939 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1953:5
     |
1953 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1954 | |         f.debug_list()
1955 | |             .entries(self.inner.iter())
1956 | |             .finish()
1957 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1953:5
     |
1953 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1954 | |         f.debug_list()
1955 | |             .entries(self.inner.iter())
1956 | |             .finish()
1957 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&'a K` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1965:5
     |
1965 | /     fn next(&mut self) -> Option<(&'a K)> {
1966 | |         self.inner.next().map(|(k, _)| k)
1967 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a K`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1969:5
     |
1969 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1970 | |         self.inner.size_hint()
1971 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'a V` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1988:5
     |
1988 | /     fn next(&mut self) -> Option<(&'a V)> {
1989 | |         self.inner.next().map(|(_, v)| v)
1990 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a V`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:1992:5
     |
1992 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1993 | |         self.inner.size_hint()
1994 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'a mut V` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2011:5
     |
2011 | /     fn next(&mut self) -> Option<(&'a mut V)> {
2012 | |         self.inner.next().map(|(_, v)| v)
2013 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a mut V`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2015:5
     |
2015 | /     fn size_hint(&self) -> (usize, Option<usize>) {
2016 | |         self.inner.size_hint()
2017 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2034:5
     |
2034 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
2035 | |         f.debug_list()
2036 | |             .entries(self.inner.inner.iter())
2037 | |             .finish()
2038 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2034:5
     |
2034 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
2035 | |         f.debug_list()
2036 | |             .entries(self.inner.inner.iter())
2037 | |             .finish()
2038 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `(K, V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2046:5
     |
2046 | /     fn next(&mut self) -> Option<(K, V)> {
2047 | |         self.inner.next().map(|(_, k, v)| (k, v))
2048 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2050:5
     |
2050 | /     fn size_hint(&self) -> (usize, Option<usize>) {
2051 | |         self.inner.size_hint()
2052 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2069:5
     |
2069 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
2070 | |         f.debug_list()
2071 | |             .entries(self.inner.iter())
2072 | |             .finish()
2073 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2069:5
     |
2069 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
2070 | |         f.debug_list()
2071 | |             .entries(self.inner.iter())
2072 | |             .finish()
2073 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2117:5
     |
2117 | /     pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {
2118 | |         match self {
2119 | |             Occupied(entry) => entry.into_mut(),
2120 | |             Vacant(entry) => entry.insert(default()),
2121 | |         }
2122 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `V` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2117:5
     |
2117 | /     pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {
2118 | |         match self {
2119 | |             Occupied(entry) => entry.into_mut(),
2120 | |             Vacant(entry) => entry.insert(default()),
2121 | |         }
2122 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `V`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where V: core::marker::Sized` bound
     = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `K` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2372:5
     |
2372 | /     fn take_key(&mut self) -> Option<K> {
2373 | |         self.key.take()
2374 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `K`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where K: core::marker::Sized` bound
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `(K, V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2516:5
     |
2516 | /     fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> HashMap<K, V, S> {
2517 | |         let mut map = HashMap::with_hasher(Default::default());
2518 | |         map.extend(iter);
2519 | |         map
2520 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::iter::IntoIterator`

error[E0277]: the size for values of type `(K, V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2528:5
     |
2528 | /     fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
2529 | |         // Keys may be already present or show multiple times in the iterator.
2530 | |         // Reserve the entire hint lower bound if the map is empty.
2531 | |         // Otherwise reserve half the hint (rounded up), so the map
...    |
2542 | |         }
2543 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(K, V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::iter::IntoIterator`

error[E0277]: the size for values of type `(&'a K, &'a V)` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2552:5
     |
2552 | /     fn extend<T: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iter: T) {
2553 | |         self.extend(iter.into_iter().map(|(&key, &value)| (key, value)));
2554 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `(&'a K, &'a V)`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::iter::IntoIterator`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2689:5
     |
2689 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
2690 | |         f.pad("RandomState { .. }")
2691 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2689:5
     |
2689 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
2690 | |         f.pad("RandomState { .. }")
2691 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&K` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2702:5
     |
2702 | /     fn get(&self, key: &Q) -> Option<&K> {
2703 | |         self.search(key).map(|bucket| bucket.into_refs().0)
2704 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&K`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `K` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2706:5
     |
2706 | /     fn take(&mut self, key: &Q) -> Option<K> {
2707 | |         self.search_mut(key).map(|bucket| pop_internal(bucket).0)
2708 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `K`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where K: core::marker::Sized` bound
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `K` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2711:5
     |
2711 | /     fn replace(&mut self, key: K) -> Option<K> {
2712 | |         self.reserve(1);
2713 | |
2714 | |         match self.entry(key) {
...    |
2723 | |         }
2724 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `K`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where K: core::marker::Sized` bound
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `&T` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:571:5
    |
571 | /     pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>
572 | |         where T: Borrow<Q>,
573 | |               Q: Hash + Eq
574 | |     {
575 | |         Recover::get(&self.map, value)
576 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:686:5
    |
686 | /     pub fn replace(&mut self, value: T) -> Option<T> {
687 | |         Recover::replace(&mut self.map, value)
688 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:738:5
    |
738 | /     pub fn take<Q: ?Sized>(&mut self, value: &Q) -> Option<T>
739 | |         where T: Borrow<Q>,
740 | |               Q: Hash + Eq
741 | |     {
742 | |         Recover::take(&mut self.map, value)
743 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:793:5
    |
793 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
794 | |         f.debug_set().entries(self.iter()).finish()
795 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:793:5
    |
793 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
794 | |         f.debug_set().entries(self.iter()).finish()
795 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:803:5
    |
803 | /     fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> HashSet<T, S> {
804 | |         let mut set = HashSet::with_hasher(Default::default());
805 | |         set.extend(iter);
806 | |         set
807 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::iter::IntoIterator`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:815:5
    |
815 | /     fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
816 | |         self.map.extend(iter.into_iter().map(|k| (k, ())));
817 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::iter::IntoIterator`

error[E0277]: the size for values of type `&'a T` cannot be known at compilation time
   --> libstd/collections/hash/set.rs:825:5
    |
825 | /     fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
826 | |         self.extend(iter.into_iter().cloned());
827 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::iter::IntoIterator`

error[E0277]: the size for values of type `&'a K` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1115:5
     |
1115 | /     fn next(&mut self) -> Option<&'a K> {
1116 | |         self.iter.next()
1117 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a K`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1118:5
     |
1118 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1119 | |         self.iter.size_hint()
1120 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1133:5
     |
1133 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1134 | |         f.debug_list().entries(self.clone()).finish()
1135 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1133:5
     |
1133 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1134 | |         f.debug_list().entries(self.clone()).finish()
1135 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `K` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1142:5
     |
1142 | /     fn next(&mut self) -> Option<K> {
1143 | |         self.iter.next().map(|(k, _)| k)
1144 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `K`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where K: core::marker::Sized` bound
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1145:5
     |
1145 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1146 | |         self.iter.size_hint()
1147 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1160:5
     |
1160 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1161 | |         let entries_iter = self.iter
1162 | |             .inner
1163 | |             .iter()
1164 | |             .map(|(k, _)| k);
1165 | |         f.debug_list().entries(entries_iter).finish()
1166 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1160:5
     |
1160 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1161 | |         let entries_iter = self.iter
1162 | |             .inner
1163 | |             .iter()
1164 | |             .map(|(k, _)| k);
1165 | |         f.debug_list().entries(entries_iter).finish()
1166 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `K` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1173:5
     |
1173 | /     fn next(&mut self) -> Option<K> {
1174 | |         self.iter.next().map(|(k, _)| k)
1175 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `K`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where K: core::marker::Sized` bound
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1176:5
     |
1176 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1177 | |         self.iter.size_hint()
1178 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1191:5
     |
1191 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1192 | |         let entries_iter = self.iter
1193 | |             .inner
1194 | |             .iter()
1195 | |             .map(|(k, _)| k);
1196 | |         f.debug_list().entries(entries_iter).finish()
1197 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1191:5
     |
1191 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1192 | |         let entries_iter = self.iter
1193 | |             .inner
1194 | |             .iter()
1195 | |             .map(|(k, _)| k);
1196 | |         f.debug_list().entries(entries_iter).finish()
1197 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&'a T` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1214:5
     |
1214 | /     fn next(&mut self) -> Option<&'a T> {
1215 | |         loop {
1216 | |             let elt = self.iter.next()?;
1217 | |             if self.other.contains(elt) {
...    |
1220 | |         }
1221 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1223:5
     |
1223 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1224 | |         let (_, upper) = self.iter.size_hint();
1225 | |         (0, upper)
1226 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1234:5
     |
1234 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1235 | |         f.debug_list().entries(self.clone()).finish()
1236 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1234:5
     |
1234 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1235 | |         f.debug_list().entries(self.clone()).finish()
1236 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&'a T` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1260:5
     |
1260 | /     fn next(&mut self) -> Option<&'a T> {
1261 | |         loop {
1262 | |             let elt = self.iter.next()?;
1263 | |             if !self.other.contains(elt) {
...    |
1266 | |         }
1267 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1269:5
     |
1269 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1270 | |         let (_, upper) = self.iter.size_hint();
1271 | |         (0, upper)
1272 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1287:5
     |
1287 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1288 | |         f.debug_list().entries(self.clone()).finish()
1289 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1287:5
     |
1287 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1288 | |         f.debug_list().entries(self.clone()).finish()
1289 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&'a T` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1306:5
     |
1306 | /     fn next(&mut self) -> Option<&'a T> {
1307 | |         self.iter.next()
1308 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1309:5
     |
1309 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1310 | |         self.iter.size_hint()
1311 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1326:5
     |
1326 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1327 | |         f.debug_list().entries(self.clone()).finish()
1328 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1326:5
     |
1326 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1327 | |         f.debug_list().entries(self.clone()).finish()
1328 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1350:5
     |
1350 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1351 | |         f.debug_list().entries(self.clone()).finish()
1352 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1350:5
     |
1350 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1351 | |         f.debug_list().entries(self.clone()).finish()
1352 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&'a T` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1362:5
     |
1362 | /     fn next(&mut self) -> Option<&'a T> {
1363 | |         self.iter.next()
1364 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&'a T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1365:5
     |
1365 | /     fn size_hint(&self) -> (usize, Option<usize>) {
1366 | |         self.iter.size_hint()
1367 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `(alloc_crate::prelude::String, alloc_crate::prelude::String)` cannot be known at compilation time
   --> libstd/env.rs:159:5
    |
159 | /     fn next(&mut self) -> Option<(String, String)> {
160 | |         self.inner.next().map(|(a, b)| {
161 | |             (a.into_string().unwrap(), b.into_string().unwrap())
162 | |         })
163 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(alloc_crate::prelude::String, alloc_crate::prelude::String)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/env.rs:164:5
    |
164 |     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/env.rs:169:5
    |
169 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
170 | |         f.pad("Vars { .. }")
171 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/env.rs:169:5
    |
169 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
170 | |         f.pad("Vars { .. }")
171 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(ffi::os_str::OsString, ffi::os_str::OsString)` cannot be known at compilation time
   --> libstd/env.rs:177:5
    |
177 |     fn next(&mut self) -> Option<(OsString, OsString)> { self.inner.next() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(ffi::os_str::OsString, ffi::os_str::OsString)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/env.rs:178:5
    |
178 |     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/env.rs:183:5
    |
183 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
184 | |         f.pad("VarsOs { .. }")
185 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/env.rs:183:5
    |
183 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
184 | |         f.pad("VarsOs { .. }")
185 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/env.rs:266:5
    |
266 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
267 | |         match *self {
268 | |             VarError::NotPresent => write!(f, "environment variable not found"),
269 | |             VarError::NotUnicode(ref s) => {
...   |
272 | |         }
273 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/env.rs:266:5
    |
266 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
267 | |         match *self {
268 | |             VarError::NotPresent => write!(f, "environment variable not found"),
269 | |             VarError::NotUnicode(ref s) => {
...   |
272 | |         }
273 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
   --> libstd/env.rs:407:5
    |
407 |     fn next(&mut self) -> Option<PathBuf> { self.inner.next() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/env.rs:408:5
    |
408 |     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/env.rs:413:5
    |
413 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
414 | |         f.pad("SplitPaths { .. }")
415 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/env.rs:413:5
    |
413 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
414 | |         f.pad("SplitPaths { .. }")
415 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/env.rs:501:5
    |
501 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
502 | |         self.inner.fmt(f)
503 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/env.rs:501:5
    |
501 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
502 | |         self.inner.fmt(f)
503 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/env.rs:749:5
    |
749 | /     fn next(&mut self) -> Option<String> {
750 | |         self.inner.next().map(|s| s.into_string().unwrap())
751 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/env.rs:752:5
    |
752 |     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/env.rs:763:5
    |
763 | /     fn next_back(&mut self) -> Option<String> {
764 | |         self.inner.next_back().map(|s| s.into_string().unwrap())
765 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/env.rs:770:5
    |
770 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
771 | |         f.debug_struct("Args")
772 | |             .field("inner", &self.inner.inner.inner_debug())
773 | |             .finish()
774 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/env.rs:770:5
    |
770 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
771 | |         f.debug_struct("Args")
772 | |             .field("inner", &self.inner.inner.inner_debug())
773 | |             .finish()
774 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/env.rs:786:5
    |
786 |     fn next(&mut self) -> Option<OsString> { self.inner.next() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/env.rs:787:5
    |
787 |     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/env.rs:798:5
    |
798 |     fn next_back(&mut self) -> Option<OsString> { self.inner.next_back() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/env.rs:803:5
    |
803 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
804 | |         f.debug_struct("ArgsOs")
805 | |             .field("inner", &self.inner.inner_debug())
806 | |             .finish()
807 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/env.rs:803:5
    |
803 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
804 | |         f.debug_struct("ArgsOs")
805 | |             .field("inner", &self.inner.inner_debug())
806 | |             .finish()
807 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/error.rs:320:13
    |
320 | /             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
321 | |                 Display::fmt(&self.0, f)
322 | |             }
    | |_____________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/error.rs:320:13
    |
320 | /             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
321 | |                 Display::fmt(&self.0, f)
322 | |             }
    | |_____________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&dyn error::Error` cannot be known at compilation time
   --> libstd/error.rs:536:5
    |
536 | /     fn cause(&self) -> Option<&dyn Error> {
537 | |         Error::cause(&**self)
538 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&dyn error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&T` cannot be known at compilation time
   --> libstd/error.rs:596:5
    |
596 | /     pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {
597 | |         if self.is::<T>() {
598 | |             unsafe {
599 | |                 Some(&*(self as *const dyn Error as *const T))
...   |
603 | |         }
604 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&mut T` cannot be known at compilation time
   --> libstd/error.rs:610:5
    |
610 | /     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {
611 | |         if self.is::<T>() {
612 | |             unsafe {
613 | |                 Some(&mut *(self as *mut dyn Error as *mut T))
...   |
617 | |         }
618 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&mut T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&T` cannot be known at compilation time
   --> libstd/error.rs:632:5
    |
632 | /     pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {
633 | |         <dyn Error + 'static>::downcast_ref::<T>(self)
634 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&mut T` cannot be known at compilation time
   --> libstd/error.rs:639:5
    |
639 | /     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {
640 | |         <dyn Error + 'static>::downcast_mut::<T>(self)
641 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&mut T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&T` cannot be known at compilation time
   --> libstd/error.rs:655:5
    |
655 | /     pub fn downcast_ref<T: Error + 'static>(&self) -> Option<&T> {
656 | |         <dyn Error + 'static>::downcast_ref::<T>(self)
657 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&mut T` cannot be known at compilation time
   --> libstd/error.rs:662:5
    |
662 | /     pub fn downcast_mut<T: Error + 'static>(&mut self) -> Option<&mut T> {
663 | |         <dyn Error + 'static>::downcast_mut::<T>(self)
664 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&mut T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<T>` cannot be known at compilation time
   --> libstd/error.rs:671:5
    |
671 | /     pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<dyn Error>> {
672 | |         if self.is::<T>() {
673 | |             unsafe {
674 | |                 let raw: *mut dyn Error = Box::into_raw(self);
...   |
679 | |         }
680 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn error::Error + 'static)>` cannot be known at compilation time
   --> libstd/error.rs:671:5
    |
671 | /     pub fn downcast<T: Error + 'static>(self: Box<Self>) -> Result<Box<T>, Box<dyn Error>> {
672 | |         if self.is::<T>() {
673 | |             unsafe {
674 | |                 let raw: *mut dyn Error = Box::into_raw(self);
...   |
679 | |         }
680 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn error::Error + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<T>` cannot be known at compilation time
   --> libstd/error.rs:687:5
    |
687 | /     pub fn downcast<T: Error + 'static>(self: Box<Self>)
688 | |                                         -> Result<Box<T>, Box<dyn Error + Send>> {
689 | |         let err: Box<dyn Error> = self;
690 | |         <dyn Error>::downcast(err).map_err(|s| unsafe {
...   |
693 | |         })
694 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + 'static)>` cannot be known at compilation time
   --> libstd/error.rs:687:5
    |
687 | /     pub fn downcast<T: Error + 'static>(self: Box<Self>)
688 | |                                         -> Result<Box<T>, Box<dyn Error + Send>> {
689 | |         let err: Box<dyn Error> = self;
690 | |         <dyn Error>::downcast(err).map_err(|s| unsafe {
...   |
693 | |         })
694 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<T>` cannot be known at compilation time
   --> libstd/error.rs:701:5
    |
701 | /     pub fn downcast<T: Error + 'static>(self: Box<Self>)
702 | |                                         -> Result<Box<T>, Box<Self>> {
703 | |         let err: Box<dyn Error> = self;
704 | |         <dyn Error>::downcast(err).map_err(|s| unsafe {
...   |
707 | |         })
708 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'static)>` cannot be known at compilation time
   --> libstd/error.rs:701:5
    |
701 | /     pub fn downcast<T: Error + 'static>(self: Box<Self>)
702 | |                                         -> Result<Box<T>, Box<Self>> {
703 | |         let err: Box<dyn Error> = self;
704 | |         <dyn Error>::downcast(err).map_err(|s| unsafe {
...   |
707 | |         })
708 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/error.rs:722:9
    |
722 | /         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
723 | |             write!(f, "A")
724 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/error.rs:722:9
    |
722 | /         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
723 | |             write!(f, "A")
724 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/error.rs:727:9
    |
727 | /         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
728 | |             write!(f, "B")
729 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/error.rs:727:9
    |
727 | /         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
728 | |             write!(f, "B")
729 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::prelude::Vec<u8>` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:331:5
    |
331 | /     pub fn new<T: Into<Vec<u8>>>(t: T) -> Result<CString, NulError> {
332 | |         Self::_new(t.into())
333 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::Vec<u8>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::convert::Into`

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:331:5
    |
331 | /     pub fn new<T: Into<Vec<u8>>>(t: T) -> Result<CString, NulError> {
332 | |         Self::_new(t.into())
333 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `ffi::c_str::NulError` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:331:5
    |
331 | /     pub fn new<T: Into<Vec<u8>>>(t: T) -> Result<CString, NulError> {
332 | |         Self::_new(t.into())
333 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::NulError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:331:5
    |
331 | /     pub fn new<T: Into<Vec<u8>>>(t: T) -> Result<CString, NulError> {
332 | |         Self::_new(t.into())
333 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:335:5
    |
335 | /     fn _new(bytes: Vec<u8>) -> Result<CString, NulError> {
336 | |         match memchr::memchr(0, &bytes) {
337 | |             Some(i) => Err(NulError(i, bytes)),
338 | |             None => Ok(unsafe { CString::from_vec_unchecked(bytes) }),
339 | |         }
340 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:335:5
    |
335 | /     fn _new(bytes: Vec<u8>) -> Result<CString, NulError> {
336 | |         match memchr::memchr(0, &bytes) {
337 | |             Some(i) => Err(NulError(i, bytes)),
338 | |             None => Ok(unsafe { CString::from_vec_unchecked(bytes) }),
339 | |         }
340 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `ffi::c_str::NulError` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:335:5
    |
335 | /     fn _new(bytes: Vec<u8>) -> Result<CString, NulError> {
336 | |         match memchr::memchr(0, &bytes) {
337 | |             Some(i) => Err(NulError(i, bytes)),
338 | |             None => Ok(unsafe { CString::from_vec_unchecked(bytes) }),
339 | |         }
340 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::NulError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:362:5
    |
362 | /     pub unsafe fn from_vec_unchecked(mut v: Vec<u8>) -> CString {
363 | |         v.reserve_exact(1);
364 | |         v.push(0);
365 | |         CString { inner: v.into_boxed_slice() }
366 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:473:5
    |
473 | /     pub fn into_string(self) -> Result<String, IntoStringError> {
474 | |         String::from_utf8(self.into_bytes())
475 | |             .map_err(|e| IntoStringError {
476 | |                 error: e.utf8_error(),
477 | |                 inner: unsafe { CString::from_vec_unchecked(e.into_bytes()) },
478 | |             })
479 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `ffi::c_str::IntoStringError` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:473:5
    |
473 | /     pub fn into_string(self) -> Result<String, IntoStringError> {
474 | |         String::from_utf8(self.into_bytes())
475 | |             .map_err(|e| IntoStringError {
476 | |                 error: e.utf8_error(),
477 | |                 inner: unsafe { CString::from_vec_unchecked(e.into_bytes()) },
478 | |             })
479 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::IntoStringError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:497:5
    |
497 | /     pub fn into_bytes(self) -> Vec<u8> {
498 | |         let mut vec = self.into_inner().into_vec();
499 | |         let _nul = vec.pop();
500 | |         debug_assert_eq!(_nul, Some(0u8));
501 | |         vec
502 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:519:5
    |
519 | /     pub fn into_bytes_with_nul(self) -> Vec<u8> {
520 | |         self.into_inner().into_vec()
521 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:641:5
    |
641 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
642 | |         fmt::Debug::fmt(&**self, f)
643 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:641:5
    |
641 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
642 | |         fmt::Debug::fmt(&**self, f)
643 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:655:5
    |
655 | /     fn from(s: CString) -> Vec<u8> {
656 | |         s.into_bytes()
657 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:662:5
    |
662 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
663 | |         write!(f, "\"")?;
664 | |         for byte in self.to_bytes().iter().flat_map(|&b| ascii::escape_default(b)) {
665 | |             f.write_char(byte as char)?;
666 | |         }
667 | |         write!(f, "\"")
668 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:662:5
    |
662 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
663 | |         write!(f, "\"")?;
664 | |         for byte in self.to_bytes().iter().flat_map(|&b| ascii::escape_default(b)) {
665 | |             f.write_char(byte as char)?;
666 | |         }
667 | |         write!(f, "\"")
668 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:850:5
    |
850 |     pub fn into_vec(self) -> Vec<u8> { self.1 }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:860:5
    |
860 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
861 | |         write!(f, "nul byte found in provided data at position: {}", self.0)
862 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:860:5
    |
860 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
861 | |         write!(f, "nul byte found in provided data at position: {}", self.0)
862 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:891:5
    |
891 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
892 | |         f.write_str(self.description())?;
893 | |         if let FromBytesWithNulErrorKind::InteriorNul(pos) = self.kind {
894 | |             write!(f, " at byte pos {}", pos)?;
895 | |         }
896 | |         Ok(())
897 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:891:5
    |
891 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
892 | |         f.write_str(self.description())?;
893 | |         if let FromBytesWithNulErrorKind::InteriorNul(pos) = self.kind {
894 | |             write!(f, " at byte pos {}", pos)?;
895 | |         }
896 | |         Ok(())
897 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&dyn error::Error` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:923:5
    |
923 | /     fn cause(&self) -> Option<&dyn Error> {
924 | |         Some(&self.error)
925 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&dyn error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:930:5
    |
930 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
931 | |         self.description().fmt(f)
932 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:930:5
    |
930 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
931 | |         self.description().fmt(f)
932 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&ffi::c_str::CStr` cannot be known at compilation time
    --> libstd/ffi/c_str.rs:1011:5
     |
1011 | /     pub fn from_bytes_with_nul(bytes: &[u8])
1012 | |                                -> Result<&CStr, FromBytesWithNulError> {
1013 | |         let nul_pos = memchr::memchr(0, bytes);
1014 | |         if let Some(nul_pos) = nul_pos {
...    |
1021 | |         }
1022 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&ffi::c_str::CStr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `ffi::c_str::FromBytesWithNulError` cannot be known at compilation time
    --> libstd/ffi/c_str.rs:1011:5
     |
1011 | /     pub fn from_bytes_with_nul(bytes: &[u8])
1012 | |                                -> Result<&CStr, FromBytesWithNulError> {
1013 | |         let nul_pos = memchr::memchr(0, bytes);
1014 | |         if let Some(nul_pos) = nul_pos {
...    |
1021 | |         }
1022 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::FromBytesWithNulError`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&str` cannot be known at compilation time
    --> libstd/ffi/c_str.rs:1169:5
     |
1169 | /     pub fn to_str(&self) -> Result<&str, str::Utf8Error> {
1170 | |         // NB: When CStr is changed to perform the length check in .to_bytes()
1171 | |         // instead of in from_ptr(), it may be worth considering if this should
1172 | |         // be rewritten to do the UTF-8 check inline with the length calculation
1173 | |         // instead of doing it afterwards.
1174 | |         str::from_utf8(self.to_bytes())
1175 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&str`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::str::Utf8Error` cannot be known at compilation time
    --> libstd/ffi/c_str.rs:1169:5
     |
1169 | /     pub fn to_str(&self) -> Result<&str, str::Utf8Error> {
1170 | |         // NB: When CStr is changed to perform the length check in .to_bytes()
1171 | |         // instead of in from_ptr(), it may be worth considering if this should
1172 | |         // be rewritten to do the UTF-8 check inline with the length calculation
1173 | |         // instead of doing it afterwards.
1174 | |         str::from_utf8(self.to_bytes())
1175 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::str::Utf8Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/ffi/c_str.rs:1260:5
     |
1260 | /     fn partial_cmp(&self, other: &CStr) -> Option<Ordering> {
1261 | |         self.to_bytes().partial_cmp(&other.to_bytes())
1262 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:156:5
    |
156 | /     pub fn into_string(self) -> Result<String, OsString> {
157 | |         self.inner.into_string().map_err(|buf| OsString { inner: buf} )
158 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:156:5
    |
156 | /     pub fn into_string(self) -> Result<String, OsString> {
157 | |         self.inner.into_string().map_err(|buf| OsString { inner: buf} )
158 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:400:5
    |
400 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
401 | |         fmt::Debug::fmt(&**self, formatter)
402 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:400:5
    |
400 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
401 | |         fmt::Debug::fmt(&**self, formatter)
402 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:446:5
    |
446 | /     fn partial_cmp(&self, other: &OsString) -> Option<cmp::Ordering> {
447 | |         (&**self).partial_cmp(&**other)
448 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:462:5
    |
462 | /     fn partial_cmp(&self, other: &str) -> Option<cmp::Ordering> {
463 | |         (&**self).partial_cmp(other)
464 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&str` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:517:5
    |
517 | /     pub fn to_str(&self) -> Option<&str> {
518 | |         self.inner.to_str()
519 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&str`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:789:5
    |
789 | /     fn partial_cmp(&self, other: &OsStr) -> Option<cmp::Ordering> {
790 | |         self.bytes().partial_cmp(other.bytes())
791 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:805:5
    |
805 | /     fn partial_cmp(&self, other: &str) -> Option<cmp::Ordering> {
806 | |         self.partial_cmp(OsStr::new(other))
807 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:867:5
    |
867 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
868 | |         fmt::Debug::fmt(&self.inner, formatter)
869 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:867:5
    |
867 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
868 | |         fmt::Debug::fmt(&self.inner, formatter)
869 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:873:5
    |
873 | /     pub(crate) fn display(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
874 | |         fmt::Display::fmt(&self.inner, formatter)
875 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:873:5
    |
873 | /     pub(crate) fn display(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
874 | |         fmt::Display::fmt(&self.inner, formatter)
875 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::File` cannot be known at compilation time
   --> libstd/fs.rs:364:5
    |
364 | /     pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {
365 | |         OpenOptions::new().read(true).open(path.as_ref())
366 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `fs::File`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:364:5
    |
364 | /     pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {
365 | |         OpenOptions::new().read(true).open(path.as_ref())
366 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::File` cannot be known at compilation time
   --> libstd/fs.rs:388:5
    |
388 | /     pub fn create<P: AsRef<Path>>(path: P) -> io::Result<File> {
389 | |         OpenOptions::new().write(true).create(true).truncate(true).open(path.as_ref())
390 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `fs::File`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:388:5
    |
388 | /     pub fn create<P: AsRef<Path>>(path: P) -> io::Result<File> {
389 | |         OpenOptions::new().write(true).create(true).truncate(true).open(path.as_ref())
390 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/fs.rs:412:5
    |
412 | /     pub fn sync_all(&self) -> io::Result<()> {
413 | |         self.inner.fsync()
414 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:412:5
    |
412 | /     pub fn sync_all(&self) -> io::Result<()> {
413 | |         self.inner.fsync()
414 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/fs.rs:443:5
    |
443 | /     pub fn sync_data(&self) -> io::Result<()> {
444 | |         self.inner.datasync()
445 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:443:5
    |
443 | /     pub fn sync_data(&self) -> io::Result<()> {
444 | |         self.inner.datasync()
445 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/fs.rs:478:5
    |
478 | /     pub fn set_len(&self, size: u64) -> io::Result<()> {
479 | |         self.inner.truncate(size)
480 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:478:5
    |
478 | /     pub fn set_len(&self, size: u64) -> io::Result<()> {
479 | |         self.inner.truncate(size)
480 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::Metadata` cannot be known at compilation time
   --> libstd/fs.rs:496:5
    |
496 | /     pub fn metadata(&self) -> io::Result<Metadata> {
497 | |         self.inner.file_attr().map(Metadata)
498 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `fs::Metadata`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:496:5
    |
496 | /     pub fn metadata(&self) -> io::Result<Metadata> {
497 | |         self.inner.file_attr().map(Metadata)
498 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::File` cannot be known at compilation time
   --> libstd/fs.rs:540:5
    |
540 | /     pub fn try_clone(&self) -> io::Result<File> {
541 | |         Ok(File {
542 | |             inner: self.inner.duplicate()?
543 | |         })
544 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `fs::File`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:540:5
    |
540 | /     pub fn try_clone(&self) -> io::Result<File> {
541 | |         Ok(File {
542 | |             inner: self.inner.duplicate()?
543 | |         })
544 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/fs.rs:579:5
    |
579 | /     pub fn set_permissions(&self, perm: Permissions) -> io::Result<()> {
580 | |         self.inner.set_permissions(perm.0)
581 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:579:5
    |
579 | /     pub fn set_permissions(&self, perm: Permissions) -> io::Result<()> {
580 | |         self.inner.set_permissions(perm.0)
581 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/fs.rs:600:5
    |
600 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
601 | |         self.inner.fmt(f)
602 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/fs.rs:600:5
    |
600 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
601 | |         self.inner.fmt(f)
602 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/fs.rs:607:5
    |
607 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
608 | |         self.inner.read(buf)
609 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:607:5
    |
607 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
608 | |         self.inner.read(buf)
609 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/fs.rs:618:5
    |
618 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
619 | |         self.inner.write(buf)
620 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:618:5
    |
618 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
619 | |         self.inner.write(buf)
620 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/fs.rs:621:5
    |
621 |     fn flush(&mut self) -> io::Result<()> { self.inner.flush() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:621:5
    |
621 |     fn flush(&mut self) -> io::Result<()> { self.inner.flush() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u64` cannot be known at compilation time
   --> libstd/fs.rs:625:5
    |
625 | /     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {
626 | |         self.inner.seek(pos)
627 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u64`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:625:5
    |
625 | /     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {
626 | |         self.inner.seek(pos)
627 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/fs.rs:631:5
    |
631 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
632 | |         self.inner.read(buf)
633 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:631:5
    |
631 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
632 | |         self.inner.read(buf)
633 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/fs.rs:642:5
    |
642 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
643 | |         self.inner.write(buf)
644 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:642:5
    |
642 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
643 | |         self.inner.write(buf)
644 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/fs.rs:645:5
    |
645 |     fn flush(&mut self) -> io::Result<()> { self.inner.flush() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:645:5
    |
645 |     fn flush(&mut self) -> io::Result<()> { self.inner.flush() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u64` cannot be known at compilation time
   --> libstd/fs.rs:649:5
    |
649 | /     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {
650 | |         self.inner.seek(pos)
651 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u64`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:649:5
    |
649 | /     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {
650 | |         self.inner.seek(pos)
651 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::File` cannot be known at compilation time
   --> libstd/fs.rs:874:5
    |
874 | /     pub fn open<P: AsRef<Path>>(&self, path: P) -> io::Result<File> {
875 | |         self._open(path.as_ref())
876 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `fs::File`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:874:5
    |
874 | /     pub fn open<P: AsRef<Path>>(&self, path: P) -> io::Result<File> {
875 | |         self._open(path.as_ref())
876 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::File` cannot be known at compilation time
   --> libstd/fs.rs:878:5
    |
878 | /     fn _open(&self, path: &Path) -> io::Result<File> {
879 | |         let inner = fs_imp::File::open(path, &self.0)?;
880 | |         Ok(File { inner: inner })
881 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `fs::File`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/fs.rs:878:5
    |
878 | /     fn _open(&self, path: &Path) -> io::Result<File> {
879 | |         let inner = fs_imp::File::open(path, &self.0)?;
880 | |         Ok(File { inner: inner })
881 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `time::SystemTime` cannot be known at compilation time
    --> libstd/fs.rs:1017:5
     |
1017 | /     pub fn modified(&self) -> io::Result<SystemTime> {
1018 | |         self.0.modified().map(FromInner::from_inner)
1019 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `time::SystemTime`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1017:5
     |
1017 | /     pub fn modified(&self) -> io::Result<SystemTime> {
1018 | |         self.0.modified().map(FromInner::from_inner)
1019 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `time::SystemTime` cannot be known at compilation time
    --> libstd/fs.rs:1052:5
     |
1052 | /     pub fn accessed(&self) -> io::Result<SystemTime> {
1053 | |         self.0.accessed().map(FromInner::from_inner)
1054 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `time::SystemTime`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1052:5
     |
1052 | /     pub fn accessed(&self) -> io::Result<SystemTime> {
1053 | |         self.0.accessed().map(FromInner::from_inner)
1054 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `time::SystemTime` cannot be known at compilation time
    --> libstd/fs.rs:1083:5
     |
1083 | /     pub fn created(&self) -> io::Result<SystemTime> {
1084 | |         self.0.created().map(FromInner::from_inner)
1085 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `time::SystemTime`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1083:5
     |
1083 | /     pub fn created(&self) -> io::Result<SystemTime> {
1084 | |         self.0.created().map(FromInner::from_inner)
1085 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:1090:5
     |
1090 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1091 | |         f.debug_struct("Metadata")
1092 | |             .field("file_type", &self.file_type())
1093 | |             .field("is_dir", &self.is_dir())
...    |
1099 | |             .finish()
1100 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/fs.rs:1090:5
     |
1090 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1091 | |         f.debug_struct("Metadata")
1092 | |             .field("file_type", &self.file_type())
1093 | |             .field("is_dir", &self.is_dir())
...    |
1099 | |             .finish()
1100 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::DirEntry` cannot be known at compilation time
    --> libstd/fs.rs:1261:5
     |
1261 |     type Item = io::Result<DirEntry>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `fs::DirEntry`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1261:5
     |
1261 |     type Item = io::Result<DirEntry>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::result::Result<fs::DirEntry, io::error::Error>` cannot be known at compilation time
    --> libstd/fs.rs:1263:5
     |
1263 | /     fn next(&mut self) -> Option<io::Result<DirEntry>> {
1264 | |         self.0.next().map(|entry| entry.map(DirEntry))
1265 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<fs::DirEntry, io::error::Error>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `fs::DirEntry` cannot be known at compilation time
    --> libstd/fs.rs:1263:5
     |
1263 | /     fn next(&mut self) -> Option<io::Result<DirEntry>> {
1264 | |         self.0.next().map(|entry| entry.map(DirEntry))
1265 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `fs::DirEntry`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1263:5
     |
1263 | /     fn next(&mut self) -> Option<io::Result<DirEntry>> {
1264 | |         self.0.next().map(|entry| entry.map(DirEntry))
1265 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::Metadata` cannot be known at compilation time
    --> libstd/fs.rs:1331:5
     |
1331 | /     pub fn metadata(&self) -> io::Result<Metadata> {
1332 | |         self.0.metadata().map(Metadata)
1333 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `fs::Metadata`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1331:5
     |
1331 | /     pub fn metadata(&self) -> io::Result<Metadata> {
1332 | |         self.0.metadata().map(Metadata)
1333 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::FileType` cannot be known at compilation time
    --> libstd/fs.rs:1366:5
     |
1366 | /     pub fn file_type(&self) -> io::Result<FileType> {
1367 | |         self.0.file_type().map(FileType)
1368 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `fs::FileType`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:1366:5
     |
1366 | /     pub fn file_type(&self) -> io::Result<FileType> {
1367 | |         self.0.file_type().map(FileType)
1368 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:1395:5
     |
1395 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1396 | |         f.debug_tuple("DirEntry")
1397 | |             .field(&self.path())
1398 | |             .finish()
1399 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/fs.rs:1395:5
     |
1395 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1396 | |         f.debug_tuple("DirEntry")
1397 | |             .field(&self.path())
1398 | |             .finish()
1399 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:2037:5
     |
2037 | /     pub fn create<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {
2038 | |         self._create(path.as_ref())
2039 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:2037:5
     |
2037 | /     pub fn create<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {
2038 | |         self._create(path.as_ref())
2039 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:2041:5
     |
2041 | /     fn _create(&self, path: &Path) -> io::Result<()> {
2042 | |         if self.recursive {
2043 | |             self.create_dir_all(path)
2044 | |         } else {
2045 | |             self.inner.mkdir(path)
2046 | |         }
2047 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:2041:5
     |
2041 | /     fn _create(&self, path: &Path) -> io::Result<()> {
2042 | |         if self.recursive {
2043 | |             self.create_dir_all(path)
2044 | |         } else {
2045 | |             self.inner.mkdir(path)
2046 | |         }
2047 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/fs.rs:2049:5
     |
2049 | /     fn create_dir_all(&self, path: &Path) -> io::Result<()> {
2050 | |         if path == Path::new("") {
2051 | |             return Ok(())
2052 | |         }
...    |
2068 | |         }
2069 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/fs.rs:2049:5
     |
2049 | /     fn create_dir_all(&self, path: &Path) -> io::Result<()> {
2050 | |         if path == Path::new("") {
2051 | |             return Ok(())
2052 | |         }
...    |
2068 | |         }
2069 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/buffered.rs:212:5
    |
212 | /     pub fn seek_relative(&mut self, offset: i64) -> io::Result<()> {
213 | |         let pos = self.pos as u64;
214 | |         if offset < 0 {
215 | |             if let Some(new_pos) = pos.checked_sub((-offset) as u64) {
...   |
227 | |         self.seek(SeekFrom::Current(offset)).map(|_|())
228 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:212:5
    |
212 | /     pub fn seek_relative(&mut self, offset: i64) -> io::Result<()> {
213 | |         let pos = self.pos as u64;
214 | |         if offset < 0 {
215 | |             if let Some(new_pos) = pos.checked_sub((-offset) as u64) {
...   |
227 | |         self.seek(SeekFrom::Current(offset)).map(|_|())
228 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/buffered.rs:233:5
    |
233 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
234 | |         // If we don't have any buffered data and we're doing a massive read
235 | |         // (larger than our internal buffer), bypass our internal buffer
236 | |         // entirely.
...   |
245 | |         Ok(nread)
246 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:233:5
    |
233 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
234 | |         // If we don't have any buffered data and we're doing a massive read
235 | |         // (larger than our internal buffer), bypass our internal buffer
236 | |         // entirely.
...   |
245 | |         Ok(nread)
246 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&[u8]` cannot be known at compilation time
   --> libstd/io/buffered.rs:256:5
    |
256 | /     fn fill_buf(&mut self) -> io::Result<&[u8]> {
257 | |         // If we've reached the end of our internal buffer then we need to fetch
258 | |         // some more data from the underlying reader.
259 | |         // Branch using `>=` instead of the more correct `==`
...   |
266 | |         Ok(&self.buf[self.pos..self.cap])
267 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&[u8]`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:256:5
    |
256 | /     fn fill_buf(&mut self) -> io::Result<&[u8]> {
257 | |         // If we've reached the end of our internal buffer then we need to fetch
258 | |         // some more data from the underlying reader.
259 | |         // Branch using `>=` instead of the more correct `==`
...   |
266 | |         Ok(&self.buf[self.pos..self.cap])
267 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/buffered.rs:276:5
    |
276 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
277 | |         fmt.debug_struct("BufReader")
278 | |             .field("reader", &self.inner)
279 | |             .field("buffer", &format_args!("{}/{}", self.cap - self.pos, self.buf.len()))
280 | |             .finish()
281 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:276:5
    |
276 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
277 | |         fmt.debug_struct("BufReader")
278 | |             .field("reader", &self.inner)
279 | |             .field("buffer", &format_args!("{}/{}", self.cap - self.pos, self.buf.len()))
280 | |             .finish()
281 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u64` cannot be known at compilation time
   --> libstd/io/buffered.rs:306:5
    |
306 | /     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {
307 | |         let result: u64;
308 | |         if let SeekFrom::Current(n) = pos {
309 | |             let remainder = (self.cap - self.pos) as i64;
...   |
328 | |         Ok(result)
329 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u64`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:306:5
    |
306 | /     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {
307 | |         let result: u64;
308 | |         if let SeekFrom::Current(n) = pos {
309 | |             let remainder = (self.cap - self.pos) as i64;
...   |
328 | |         Ok(result)
329 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/buffered.rs:467:5
    |
467 | /     fn flush_buf(&mut self) -> io::Result<()> {
468 | |         let mut written = 0;
469 | |         let len = self.buf.len();
470 | |         let mut ret = Ok(());
...   |
491 | |         ret
492 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:467:5
    |
467 | /     fn flush_buf(&mut self) -> io::Result<()> {
468 | |         let mut written = 0;
469 | |         let len = self.buf.len();
470 | |         let mut ret = Ok(());
...   |
491 | |         ret
492 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `W` cannot be known at compilation time
   --> libstd/io/buffered.rs:548:5
    |
548 | /     pub fn into_inner(mut self) -> Result<W, IntoInnerError<BufWriter<W>>> {
549 | |         match self.flush_buf() {
550 | |             Err(e) => Err(IntoInnerError(self, e)),
551 | |             Ok(()) => Ok(self.inner.take().unwrap())
552 | |         }
553 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `W`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where W: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::buffered::IntoInnerError<io::buffered::BufWriter<W>>` cannot be known at compilation time
   --> libstd/io/buffered.rs:548:5
    |
548 | /     pub fn into_inner(mut self) -> Result<W, IntoInnerError<BufWriter<W>>> {
549 | |         match self.flush_buf() {
550 | |             Err(e) => Err(IntoInnerError(self, e)),
551 | |             Ok(()) => Ok(self.inner.take().unwrap())
552 | |         }
553 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::buffered::IntoInnerError<io::buffered::BufWriter<W>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/buffered.rs:558:5
    |
558 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
559 | |         if self.buf.len() + buf.len() > self.buf.capacity() {
560 | |             self.flush_buf()?;
561 | |         }
...   |
569 | |         }
570 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:558:5
    |
558 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
559 | |         if self.buf.len() + buf.len() > self.buf.capacity() {
560 | |             self.flush_buf()?;
561 | |         }
...   |
569 | |         }
570 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/buffered.rs:571:5
    |
571 | /     fn flush(&mut self) -> io::Result<()> {
572 | |         self.flush_buf().and_then(|()| self.get_mut().flush())
573 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:571:5
    |
571 | /     fn flush(&mut self) -> io::Result<()> {
572 | |         self.flush_buf().and_then(|()| self.get_mut().flush())
573 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/buffered.rs:578:5
    |
578 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
579 | |         fmt.debug_struct("BufWriter")
580 | |             .field("writer", &self.inner.as_ref().unwrap())
581 | |             .field("buffer", &format_args!("{}/{}", self.buf.len(), self.buf.capacity()))
582 | |             .finish()
583 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:578:5
    |
578 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
579 | |         fmt.debug_struct("BufWriter")
580 | |             .field("writer", &self.inner.as_ref().unwrap())
581 | |             .field("buffer", &format_args!("{}/{}", self.buf.len(), self.buf.capacity()))
582 | |             .finish()
583 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u64` cannot be known at compilation time
   --> libstd/io/buffered.rs:591:5
    |
591 | /     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {
592 | |         self.flush_buf().and_then(|_| self.get_mut().seek(pos))
593 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u64`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:591:5
    |
591 | /     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {
592 | |         self.flush_buf().and_then(|_| self.get_mut().seek(pos))
593 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/buffered.rs:686:5
    |
686 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
687 | |         self.error().fmt(f)
688 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:686:5
    |
686 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
687 | |         self.error().fmt(f)
688 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `W` cannot be known at compilation time
   --> libstd/io/buffered.rs:871:5
    |
871 | /     pub fn into_inner(self) -> Result<W, IntoInnerError<LineWriter<W>>> {
872 | |         self.inner.into_inner().map_err(|IntoInnerError(buf, e)| {
873 | |             IntoInnerError(LineWriter {
874 | |                 inner: buf,
...   |
877 | |         })
878 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `W`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where W: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::buffered::IntoInnerError<io::buffered::LineWriter<W>>` cannot be known at compilation time
   --> libstd/io/buffered.rs:871:5
    |
871 | /     pub fn into_inner(self) -> Result<W, IntoInnerError<LineWriter<W>>> {
872 | |         self.inner.into_inner().map_err(|IntoInnerError(buf, e)| {
873 | |             IntoInnerError(LineWriter {
874 | |                 inner: buf,
...   |
877 | |         })
878 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::buffered::IntoInnerError<io::buffered::LineWriter<W>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/buffered.rs:883:5
    |
883 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
884 | |         if self.need_flush {
885 | |             self.flush()?;
886 | |         }
...   |
916 | |         }
917 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:883:5
    |
883 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
884 | |         if self.need_flush {
885 | |             self.flush()?;
886 | |         }
...   |
916 | |         }
917 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/buffered.rs:919:5
    |
919 | /     fn flush(&mut self) -> io::Result<()> {
920 | |         self.inner.flush()?;
921 | |         self.need_flush = false;
922 | |         Ok(())
923 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:919:5
    |
919 | /     fn flush(&mut self) -> io::Result<()> {
920 | |         self.inner.flush()?;
921 | |         self.need_flush = false;
922 | |         Ok(())
923 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/buffered.rs:928:5
    |
928 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
929 | |         fmt.debug_struct("LineWriter")
930 | |             .field("writer", &self.inner.inner)
931 | |             .field("buffer",
932 | |                    &format_args!("{}/{}", self.inner.buf.len(), self.inner.buf.capacity()))
933 | |             .finish()
934 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:928:5
    |
928 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
929 | |         fmt.debug_struct("LineWriter")
930 | |             .field("writer", &self.inner.inner)
931 | |             .field("buffer",
932 | |                    &format_args!("{}/{}", self.inner.buf.len(), self.inner.buf.capacity()))
933 | |             .finish()
934 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/buffered.rs:951:9
    |
951 | /         fn read(&mut self, _: &mut [u8]) -> io::Result<usize> {
952 | |             if self.lengths.is_empty() {
953 | |                 Ok(0)
954 | |             } else {
955 | |                 Ok(self.lengths.remove(0))
956 | |             }
957 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:951:9
    |
951 | /         fn read(&mut self, _: &mut [u8]) -> io::Result<usize> {
952 | |             if self.lengths.is_empty() {
953 | |                 Ok(0)
954 | |             } else {
955 | |                 Ok(self.lengths.remove(0))
956 | |             }
957 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/io/buffered.rs:1303:9
     |
1303 | /         fn write(&mut self, data: &[u8]) -> io::Result<usize> {
1304 | |             if !self.written {
1305 | |                 assert_eq!(data, b"a\nb\n");
1306 | |                 self.written = true;
...    |
1310 | |             }
1311 | |         }
     | |_________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/buffered.rs:1303:9
     |
1303 | /         fn write(&mut self, data: &[u8]) -> io::Result<usize> {
1304 | |             if !self.written {
1305 | |                 assert_eq!(data, b"a\nb\n");
1306 | |                 self.written = true;
...    |
1310 | |             }
1311 | |         }
     | |_________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/buffered.rs:1313:9
     |
1313 | /         fn flush(&mut self) -> io::Result<()> {
1314 | |             assert!(self.written);
1315 | |             assert!(!self.flushed);
1316 | |             self.flushed = true;
1317 | |             Err(io::Error::new(io::ErrorKind::Other, "test"))
1318 | |         }
     | |_________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/buffered.rs:1313:9
     |
1313 | /         fn flush(&mut self) -> io::Result<()> {
1314 | |             assert!(self.written);
1315 | |             assert!(!self.flushed);
1316 | |             self.flushed = true;
1317 | |             Err(io::Error::new(io::ErrorKind::Other, "test"))
1318 | |         }
     | |_________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `u64` cannot be known at compilation time
   --> libstd/io/cursor.rs:207:5
    |
207 | /     fn seek(&mut self, style: SeekFrom) -> io::Result<u64> {
208 | |         let (base_pos, offset) = match style {
209 | |             SeekFrom::Start(n) => { self.pos = n; return Ok(n); }
210 | |             SeekFrom::End(n) => (self.inner.as_ref().len() as u64, n),
...   |
222 | |         }
223 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u64`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:207:5
    |
207 | /     fn seek(&mut self, style: SeekFrom) -> io::Result<u64> {
208 | |         let (base_pos, offset) = match style {
209 | |             SeekFrom::Start(n) => { self.pos = n; return Ok(n); }
210 | |             SeekFrom::End(n) => (self.inner.as_ref().len() as u64, n),
...   |
222 | |         }
223 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/cursor.rs:228:5
    |
228 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
229 | |         let n = Read::read(&mut self.fill_buf()?, buf)?;
230 | |         self.pos += n as u64;
231 | |         Ok(n)
232 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:228:5
    |
228 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
229 | |         let n = Read::read(&mut self.fill_buf()?, buf)?;
230 | |         self.pos += n as u64;
231 | |         Ok(n)
232 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/cursor.rs:234:5
    |
234 | /     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {
235 | |         let n = buf.len();
236 | |         Read::read_exact(&mut self.fill_buf()?, buf)?;
237 | |         self.pos += n as u64;
238 | |         Ok(())
239 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:234:5
    |
234 | /     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {
235 | |         let n = buf.len();
236 | |         Read::read_exact(&mut self.fill_buf()?, buf)?;
237 | |         self.pos += n as u64;
238 | |         Ok(())
239 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&[u8]` cannot be known at compilation time
   --> libstd/io/cursor.rs:249:5
    |
249 | /     fn fill_buf(&mut self) -> io::Result<&[u8]> {
250 | |         let amt = cmp::min(self.pos, self.inner.as_ref().len() as u64);
251 | |         Ok(&self.inner.as_ref()[(amt as usize)..])
252 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&[u8]`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:249:5
    |
249 | /     fn fill_buf(&mut self) -> io::Result<&[u8]> {
250 | |         let amt = cmp::min(self.pos, self.inner.as_ref().len() as u64);
251 | |         Ok(&self.inner.as_ref()[(amt as usize)..])
252 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/cursor.rs:294:5
    |
294 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
295 | |         slice_write(&mut self.pos, self.inner, buf)
296 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:294:5
    |
294 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
295 | |         slice_write(&mut self.pos, self.inner, buf)
296 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/cursor.rs:297:5
    |
297 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:297:5
    |
297 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/cursor.rs:302:5
    |
302 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
303 | |         vec_write(&mut self.pos, self.inner, buf)
304 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/cursor.rs:302:5
    |
302 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
303 | |         vec_write(&mut self.pos, self.inner, buf)
304 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:302:5
    |
302 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
303 | |         vec_write(&mut self.pos, self.inner, buf)
304 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/cursor.rs:305:5
    |
305 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/cursor.rs:305:5
    |
305 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:305:5
    |
305 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/cursor.rs:310:5
    |
310 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
311 | |         vec_write(&mut self.pos, &mut self.inner, buf)
312 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/cursor.rs:310:5
    |
310 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
311 | |         vec_write(&mut self.pos, &mut self.inner, buf)
312 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:310:5
    |
310 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
311 | |         vec_write(&mut self.pos, &mut self.inner, buf)
312 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/cursor.rs:313:5
    |
313 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/cursor.rs:313:5
    |
313 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:313:5
    |
313 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/cursor.rs:319:5
    |
319 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
320 | |         slice_write(&mut self.pos, &mut self.inner, buf)
321 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:319:5
    |
319 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
320 | |         slice_write(&mut self.pos, &mut self.inner, buf)
321 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/cursor.rs:322:5
    |
322 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/cursor.rs:322:5
    |
322 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/io/error.rs:72:5
   |
72 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
73 | |         fmt::Debug::fmt(&self.repr, f)
74 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/io/error.rs:72:5
   |
72 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
73 | |         fmt::Debug::fmt(&self.repr, f)
74 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'static)>` cannot be known at compilation time
   --> libstd/io/error.rs:256:5
    |
256 | /     pub fn new<E>(kind: ErrorKind, error: E) -> Error
257 | |         where E: Into<Box<dyn error::Error+Send+Sync>>
258 | |     {
259 | |         Self::_new(kind, error.into())
260 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::convert::Into`

error[E0277]: the size for values of type `i32` cannot be known at compilation time
   --> libstd/io/error.rs:346:5
    |
346 | /     pub fn raw_os_error(&self) -> Option<i32> {
347 | |         match self.repr {
348 | |             Repr::Os(i) => Some(i),
349 | |             Repr::Custom(..) => None,
350 | |             Repr::Simple(..) => None,
351 | |         }
352 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `i32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&(dyn error::Error + core::marker::Send + core::marker::Sync + 'static)` cannot be known at compilation time
   --> libstd/io/error.rs:380:5
    |
380 | /     pub fn get_ref(&self) -> Option<&(dyn error::Error+Send+Sync+'static)> {
381 | |         match self.repr {
382 | |             Repr::Os(..) => None,
383 | |             Repr::Simple(..) => None,
384 | |             Repr::Custom(ref c) => Some(&*c.error),
385 | |         }
386 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&(dyn error::Error + core::marker::Send + core::marker::Sync + 'static)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&mut (dyn error::Error + core::marker::Send + core::marker::Sync + 'static)` cannot be known at compilation time
   --> libstd/io/error.rs:451:5
    |
451 | /     pub fn get_mut(&mut self) -> Option<&mut (dyn error::Error+Send+Sync+'static)> {
452 | |         match self.repr {
453 | |             Repr::Os(..) => None,
454 | |             Repr::Simple(..) => None,
455 | |             Repr::Custom(ref mut c) => Some(&mut *c.error),
456 | |         }
457 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&mut (dyn error::Error + core::marker::Send + core::marker::Sync + 'static)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'static)>` cannot be known at compilation time
   --> libstd/io/error.rs:485:5
    |
485 | /     pub fn into_inner(self) -> Option<Box<dyn error::Error+Send+Sync>> {
486 | |         match self.repr {
487 | |             Repr::Os(..) => None,
488 | |             Repr::Simple(..) => None,
489 | |             Repr::Custom(c) => Some(c.error)
490 | |         }
491 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn error::Error + core::marker::Send + core::marker::Sync + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/error.rs:522:5
    |
522 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
523 | |         match *self {
524 | |             Repr::Os(code) =>
525 | |                 fmt.debug_struct("Os")
...   |
531 | |         }
532 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/error.rs:522:5
    |
522 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
523 | |         match *self {
524 | |             Repr::Os(code) =>
525 | |                 fmt.debug_struct("Os")
...   |
531 | |         }
532 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/error.rs:537:5
    |
537 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
538 | |         match self.repr {
539 | |             Repr::Os(code) => {
540 | |                 let detail = sys::os::error_string(code);
...   |
545 | |         }
546 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/error.rs:537:5
    |
537 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
538 | |         match self.repr {
539 | |             Repr::Os(code) => {
540 | |                 let detail = sys::os::error_string(code);
...   |
545 | |         }
546 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&dyn error::Error` cannot be known at compilation time
   --> libstd/io/error.rs:558:5
    |
558 | /     fn cause(&self) -> Option<&dyn error::Error> {
559 | |         match self.repr {
560 | |             Repr::Os(..) => None,
561 | |             Repr::Simple(..) => None,
562 | |             Repr::Custom(ref c) => c.error.cause(),
563 | |         }
564 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&dyn error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/io/impls.rs:22:5
   |
22 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
23 | |         (**self).read(buf)
24 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/impls.rs:22:5
   |
22 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
23 | |         (**self).read(buf)
24 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/io/impls.rs:32:5
   |
32 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {
33 | |         (**self).read_to_end(buf)
34 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/io/impls.rs:32:5
   |
32 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {
33 | |         (**self).read_to_end(buf)
34 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/impls.rs:32:5
   |
32 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {
33 | |         (**self).read_to_end(buf)
34 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/io/impls.rs:37:5
   |
37 | /     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {
38 | |         (**self).read_to_string(buf)
39 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/impls.rs:37:5
   |
37 | /     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {
38 | |         (**self).read_to_string(buf)
39 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/io/impls.rs:42:5
   |
42 | /     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {
43 | |         (**self).read_exact(buf)
44 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/impls.rs:42:5
   |
42 | /     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {
43 | |         (**self).read_exact(buf)
44 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/io/impls.rs:49:5
   |
49 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/impls.rs:49:5
   |
49 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/io/impls.rs:52:5
   |
52 |     fn flush(&mut self) -> io::Result<()> { (**self).flush() }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/impls.rs:52:5
   |
52 |     fn flush(&mut self) -> io::Result<()> { (**self).flush() }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/io/impls.rs:55:5
   |
55 | /     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {
56 | |         (**self).write_all(buf)
57 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/impls.rs:55:5
   |
55 | /     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {
56 | |         (**self).write_all(buf)
57 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/io/impls.rs:60:5
   |
60 | /     fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {
61 | |         (**self).write_fmt(fmt)
62 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/impls.rs:60:5
   |
60 | /     fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {
61 | |         (**self).write_fmt(fmt)
62 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `u64` cannot be known at compilation time
  --> libstd/io/impls.rs:67:5
   |
67 |     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { (**self).seek(pos) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u64`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/impls.rs:67:5
   |
67 |     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { (**self).seek(pos) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `&[u8]` cannot be known at compilation time
  --> libstd/io/impls.rs:72:5
   |
72 |     fn fill_buf(&mut self) -> io::Result<&[u8]> { (**self).fill_buf() }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `&[u8]`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/impls.rs:72:5
   |
72 |     fn fill_buf(&mut self) -> io::Result<&[u8]> { (**self).fill_buf() }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/io/impls.rs:78:5
   |
78 | /     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {
79 | |         (**self).read_until(byte, buf)
80 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/io/impls.rs:78:5
   |
78 | /     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {
79 | |         (**self).read_until(byte, buf)
80 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/impls.rs:78:5
   |
78 | /     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {
79 | |         (**self).read_until(byte, buf)
80 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/io/impls.rs:83:5
   |
83 | /     fn read_line(&mut self, buf: &mut String) -> io::Result<usize> {
84 | |         (**self).read_line(buf)
85 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/impls.rs:83:5
   |
83 | /     fn read_line(&mut self, buf: &mut String) -> io::Result<usize> {
84 | |         (**self).read_line(buf)
85 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/io/impls.rs:91:5
   |
91 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
92 | |         (**self).read(buf)
93 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/impls.rs:91:5
   |
91 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
92 | |         (**self).read(buf)
93 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/impls.rs:101:5
    |
101 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {
102 | |         (**self).read_to_end(buf)
103 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/impls.rs:101:5
    |
101 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {
102 | |         (**self).read_to_end(buf)
103 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:101:5
    |
101 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {
102 | |         (**self).read_to_end(buf)
103 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/impls.rs:106:5
    |
106 | /     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {
107 | |         (**self).read_to_string(buf)
108 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:106:5
    |
106 | /     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {
107 | |         (**self).read_to_string(buf)
108 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/impls.rs:111:5
    |
111 | /     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {
112 | |         (**self).read_exact(buf)
113 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:111:5
    |
111 | /     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {
112 | |         (**self).read_exact(buf)
113 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/impls.rs:118:5
    |
118 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:118:5
    |
118 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/impls.rs:121:5
    |
121 |     fn flush(&mut self) -> io::Result<()> { (**self).flush() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:121:5
    |
121 |     fn flush(&mut self) -> io::Result<()> { (**self).flush() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/impls.rs:124:5
    |
124 | /     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {
125 | |         (**self).write_all(buf)
126 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:124:5
    |
124 | /     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {
125 | |         (**self).write_all(buf)
126 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/impls.rs:129:5
    |
129 | /     fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {
130 | |         (**self).write_fmt(fmt)
131 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:129:5
    |
129 | /     fn write_fmt(&mut self, fmt: fmt::Arguments) -> io::Result<()> {
130 | |         (**self).write_fmt(fmt)
131 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u64` cannot be known at compilation time
   --> libstd/io/impls.rs:136:5
    |
136 |     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { (**self).seek(pos) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u64`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:136:5
    |
136 |     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { (**self).seek(pos) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&[u8]` cannot be known at compilation time
   --> libstd/io/impls.rs:141:5
    |
141 |     fn fill_buf(&mut self) -> io::Result<&[u8]> { (**self).fill_buf() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&[u8]`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:141:5
    |
141 |     fn fill_buf(&mut self) -> io::Result<&[u8]> { (**self).fill_buf() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/impls.rs:147:5
    |
147 | /     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {
148 | |         (**self).read_until(byte, buf)
149 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/impls.rs:147:5
    |
147 | /     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {
148 | |         (**self).read_until(byte, buf)
149 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:147:5
    |
147 | /     fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {
148 | |         (**self).read_until(byte, buf)
149 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/impls.rs:152:5
    |
152 | /     fn read_line(&mut self, buf: &mut String) -> io::Result<usize> {
153 | |         (**self).read_line(buf)
154 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:152:5
    |
152 | /     fn read_line(&mut self, buf: &mut String) -> io::Result<usize> {
153 | |         (**self).read_line(buf)
154 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/impls.rs:167:5
    |
167 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
168 | |         let amt = cmp::min(buf.len(), self.len());
169 | |         let (a, b) = self.split_at(amt);
170 | |
...   |
181 | |         Ok(amt)
182 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:167:5
    |
167 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
168 | |         let amt = cmp::min(buf.len(), self.len());
169 | |         let (a, b) = self.split_at(amt);
170 | |
...   |
181 | |         Ok(amt)
182 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/impls.rs:190:5
    |
190 | /     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {
191 | |         if buf.len() > self.len() {
192 | |             return Err(Error::new(ErrorKind::UnexpectedEof,
193 | |                                   "failed to fill whole buffer"));
...   |
207 | |         Ok(())
208 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:190:5
    |
190 | /     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {
191 | |         if buf.len() > self.len() {
192 | |             return Err(Error::new(ErrorKind::UnexpectedEof,
193 | |                                   "failed to fill whole buffer"));
...   |
207 | |         Ok(())
208 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/impls.rs:211:5
    |
211 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {
212 | |         buf.extend_from_slice(*self);
213 | |         let len = self.len();
214 | |         *self = &self[len..];
215 | |         Ok(len)
216 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/impls.rs:211:5
    |
211 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {
212 | |         buf.extend_from_slice(*self);
213 | |         let len = self.len();
214 | |         *self = &self[len..];
215 | |         Ok(len)
216 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:211:5
    |
211 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {
212 | |         buf.extend_from_slice(*self);
213 | |         let len = self.len();
214 | |         *self = &self[len..];
215 | |         Ok(len)
216 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&[u8]` cannot be known at compilation time
   --> libstd/io/impls.rs:222:5
    |
222 |     fn fill_buf(&mut self) -> io::Result<&[u8]> { Ok(*self) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&[u8]`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:222:5
    |
222 |     fn fill_buf(&mut self) -> io::Result<&[u8]> { Ok(*self) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/impls.rs:236:5
    |
236 | /     fn write(&mut self, data: &[u8]) -> io::Result<usize> {
237 | |         let amt = cmp::min(data.len(), self.len());
238 | |         let (a, b) = mem::replace(self, &mut []).split_at_mut(amt);
239 | |         a.copy_from_slice(&data[..amt]);
240 | |         *self = b;
241 | |         Ok(amt)
242 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:236:5
    |
236 | /     fn write(&mut self, data: &[u8]) -> io::Result<usize> {
237 | |         let amt = cmp::min(data.len(), self.len());
238 | |         let (a, b) = mem::replace(self, &mut []).split_at_mut(amt);
239 | |         a.copy_from_slice(&data[..amt]);
240 | |         *self = b;
241 | |         Ok(amt)
242 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/impls.rs:245:5
    |
245 | /     fn write_all(&mut self, data: &[u8]) -> io::Result<()> {
246 | |         if self.write(data)? == data.len() {
247 | |             Ok(())
248 | |         } else {
249 | |             Err(Error::new(ErrorKind::WriteZero, "failed to write whole buffer"))
250 | |         }
251 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:245:5
    |
245 | /     fn write_all(&mut self, data: &[u8]) -> io::Result<()> {
246 | |         if self.write(data)? == data.len() {
247 | |             Ok(())
248 | |         } else {
249 | |             Err(Error::new(ErrorKind::WriteZero, "failed to write whole buffer"))
250 | |         }
251 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/impls.rs:254:5
    |
254 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:254:5
    |
254 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/impls.rs:262:5
    |
262 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
263 | |         self.extend_from_slice(buf);
264 | |         Ok(buf.len())
265 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/impls.rs:262:5
    |
262 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
263 | |         self.extend_from_slice(buf);
264 | |         Ok(buf.len())
265 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:262:5
    |
262 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
263 | |         self.extend_from_slice(buf);
264 | |         Ok(buf.len())
265 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/impls.rs:268:5
    |
268 | /     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {
269 | |         self.extend_from_slice(buf);
270 | |         Ok(())
271 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/impls.rs:268:5
    |
268 | /     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {
269 | |         self.extend_from_slice(buf);
270 | |         Ok(())
271 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:268:5
    |
268 | /     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {
269 | |         self.extend_from_slice(buf);
270 | |         Ok(())
271 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/impls.rs:274:5
    |
274 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/impls.rs:274:5
    |
274 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/impls.rs:274:5
    |
274 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::sync::Arc<T>` cannot be known at compilation time
  --> libstd/io/lazy.rs:40:5
   |
40 | /     pub unsafe fn get(&'static self, init: fn() -> Arc<T>) -> Option<Arc<T>> {
41 | |         let _guard = self.lock.lock();
42 | |         let ptr = self.ptr.get();
43 | |         if ptr.is_null() {
...  |
49 | |         }
50 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::sync::Arc<T>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/util.rs:107:5
    |
107 |     fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/util.rs:107:5
    |
107 |     fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&[u8]` cannot be known at compilation time
   --> libstd/io/util.rs:117:5
    |
117 |     fn fill_buf(&mut self) -> io::Result<&[u8]> { Ok(&[]) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&[u8]`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/util.rs:117:5
    |
117 |     fn fill_buf(&mut self) -> io::Result<&[u8]> { Ok(&[]) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/util.rs:124:5
    |
124 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
125 | |         f.pad("Empty { .. }")
126 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/util.rs:124:5
    |
124 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
125 | |         f.pad("Empty { .. }")
126 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/util.rs:158:5
    |
158 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
159 | |         for slot in &mut *buf {
160 | |             *slot = self.byte;
161 | |         }
162 | |         Ok(buf.len())
163 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/util.rs:158:5
    |
158 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
159 | |         for slot in &mut *buf {
160 | |             *slot = self.byte;
161 | |         }
162 | |         Ok(buf.len())
163 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/util.rs:173:5
    |
173 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
174 | |         f.pad("Repeat { .. }")
175 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/util.rs:173:5
    |
173 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
174 | |         f.pad("Repeat { .. }")
175 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/util.rs:207:5
    |
207 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { Ok(buf.len()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/util.rs:207:5
    |
207 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { Ok(buf.len()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/util.rs:209:5
    |
209 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/util.rs:209:5
    |
209 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/util.rs:214:5
    |
214 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
215 | |         f.pad("Sink { .. }")
216 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/util.rs:214:5
    |
214 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
215 | |         f.pad("Sink { .. }")
216 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/io/stdio.rs:77:5
   |
77 |     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/stdio.rs:77:5
   |
77 |     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/io/stdio.rs:85:5
   |
85 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/stdio.rs:85:5
   |
85 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/io/stdio.rs:86:5
   |
86 |     fn flush(&mut self) -> io::Result<()> { self.0.flush() }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/stdio.rs:86:5
   |
86 |     fn flush(&mut self) -> io::Result<()> { self.0.flush() }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/io/stdio.rs:89:5
   |
89 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/stdio.rs:89:5
   |
89 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/io/stdio.rs:90:5
   |
90 |     fn flush(&mut self) -> io::Result<()> { self.0.flush() }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/io/stdio.rs:90:5
   |
90 |     fn flush(&mut self) -> io::Result<()> { self.0.flush() }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/stdio.rs:99:5
    |
99  | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
100 | |         match *self {
101 | |             Maybe::Real(ref mut w) => handle_ebadf(w.write(buf), buf.len()),
102 | |             Maybe::Fake => Ok(buf.len())
103 | |         }
104 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:99:5
    |
99  | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
100 | |         match *self {
101 | |             Maybe::Real(ref mut w) => handle_ebadf(w.write(buf), buf.len()),
102 | |             Maybe::Fake => Ok(buf.len())
103 | |         }
104 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:106:5
    |
106 | /     fn flush(&mut self) -> io::Result<()> {
107 | |         match *self {
108 | |             Maybe::Real(ref mut w) => handle_ebadf(w.flush(), ()),
109 | |             Maybe::Fake => Ok(())
110 | |         }
111 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:106:5
    |
106 | /     fn flush(&mut self) -> io::Result<()> {
107 | |         match *self {
108 | |             Maybe::Real(ref mut w) => handle_ebadf(w.flush(), ()),
109 | |             Maybe::Fake => Ok(())
110 | |         }
111 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/stdio.rs:115:5
    |
115 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
116 | |         match *self {
117 | |             Maybe::Real(ref mut r) => handle_ebadf(r.read(buf), 0),
118 | |             Maybe::Fake => Ok(0)
119 | |         }
120 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:115:5
    |
115 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
116 | |         match *self {
117 | |             Maybe::Real(ref mut r) => handle_ebadf(r.read(buf), 0),
118 | |             Maybe::Fake => Ok(0)
119 | |         }
120 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/stdio.rs:277:5
    |
277 | /     pub fn read_line(&self, buf: &mut String) -> io::Result<usize> {
278 | |         self.lock().read_line(buf)
279 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:277:5
    |
277 | /     pub fn read_line(&self, buf: &mut String) -> io::Result<usize> {
278 | |         self.lock().read_line(buf)
279 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:284:5
    |
284 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
285 | |         f.pad("Stdin { .. }")
286 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:284:5
    |
284 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
285 | |         f.pad("Stdin { .. }")
286 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/stdio.rs:291:5
    |
291 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
292 | |         self.lock().read(buf)
293 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:291:5
    |
291 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
292 | |         self.lock().read(buf)
293 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/io/stdio.rs:298:5
    |
298 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {
299 | |         self.lock().read_to_end(buf)
300 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/stdio.rs:298:5
    |
298 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {
299 | |         self.lock().read_to_end(buf)
300 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:298:5
    |
298 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {
299 | |         self.lock().read_to_end(buf)
300 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/stdio.rs:301:5
    |
301 | /     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {
302 | |         self.lock().read_to_string(buf)
303 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:301:5
    |
301 | /     fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {
302 | |         self.lock().read_to_string(buf)
303 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:304:5
    |
304 | /     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {
305 | |         self.lock().read_exact(buf)
306 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:304:5
    |
304 | /     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {
305 | |         self.lock().read_exact(buf)
306 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/stdio.rs:311:5
    |
311 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
312 | |         self.inner.read(buf)
313 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:311:5
    |
311 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
312 | |         self.inner.read(buf)
313 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&[u8]` cannot be known at compilation time
   --> libstd/io/stdio.rs:322:5
    |
322 |     fn fill_buf(&mut self) -> io::Result<&[u8]> { self.inner.fill_buf() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&[u8]`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:322:5
    |
322 |     fn fill_buf(&mut self) -> io::Result<&[u8]> { self.inner.fill_buf() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:328:5
    |
328 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
329 | |         f.pad("StdinLock { .. }")
330 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:328:5
    |
328 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
329 | |         f.pad("StdinLock { .. }")
330 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:447:5
    |
447 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
448 | |         f.pad("Stdout { .. }")
449 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:447:5
    |
447 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
448 | |         f.pad("Stdout { .. }")
449 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/stdio.rs:454:5
    |
454 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
455 | |         self.lock().write(buf)
456 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:454:5
    |
454 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
455 | |         self.lock().write(buf)
456 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:457:5
    |
457 | /     fn flush(&mut self) -> io::Result<()> {
458 | |         self.lock().flush()
459 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:457:5
    |
457 | /     fn flush(&mut self) -> io::Result<()> {
458 | |         self.lock().flush()
459 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:460:5
    |
460 | /     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {
461 | |         self.lock().write_all(buf)
462 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:460:5
    |
460 | /     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {
461 | |         self.lock().write_all(buf)
462 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:463:5
    |
463 | /     fn write_fmt(&mut self, args: fmt::Arguments) -> io::Result<()> {
464 | |         self.lock().write_fmt(args)
465 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:463:5
    |
463 | /     fn write_fmt(&mut self, args: fmt::Arguments) -> io::Result<()> {
464 | |         self.lock().write_fmt(args)
465 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/stdio.rs:469:5
    |
469 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
470 | |         self.inner.borrow_mut().write(buf)
471 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:469:5
    |
469 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
470 | |         self.inner.borrow_mut().write(buf)
471 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:472:5
    |
472 | /     fn flush(&mut self) -> io::Result<()> {
473 | |         self.inner.borrow_mut().flush()
474 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:472:5
    |
472 | /     fn flush(&mut self) -> io::Result<()> {
473 | |         self.inner.borrow_mut().flush()
474 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:479:5
    |
479 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
480 | |         f.pad("StdoutLock { .. }")
481 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:479:5
    |
479 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
480 | |         f.pad("StdoutLock { .. }")
481 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:585:5
    |
585 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
586 | |         f.pad("Stderr { .. }")
587 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:585:5
    |
585 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
586 | |         f.pad("Stderr { .. }")
587 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/stdio.rs:592:5
    |
592 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
593 | |         self.lock().write(buf)
594 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:592:5
    |
592 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
593 | |         self.lock().write(buf)
594 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:595:5
    |
595 | /     fn flush(&mut self) -> io::Result<()> {
596 | |         self.lock().flush()
597 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:595:5
    |
595 | /     fn flush(&mut self) -> io::Result<()> {
596 | |         self.lock().flush()
597 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:598:5
    |
598 | /     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {
599 | |         self.lock().write_all(buf)
600 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:598:5
    |
598 | /     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {
599 | |         self.lock().write_all(buf)
600 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:601:5
    |
601 | /     fn write_fmt(&mut self, args: fmt::Arguments) -> io::Result<()> {
602 | |         self.lock().write_fmt(args)
603 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:601:5
    |
601 | /     fn write_fmt(&mut self, args: fmt::Arguments) -> io::Result<()> {
602 | |         self.lock().write_fmt(args)
603 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/io/stdio.rs:607:5
    |
607 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
608 | |         self.inner.borrow_mut().write(buf)
609 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:607:5
    |
607 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
608 | |         self.inner.borrow_mut().write(buf)
609 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:610:5
    |
610 | /     fn flush(&mut self) -> io::Result<()> {
611 | |         self.inner.borrow_mut().flush()
612 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:610:5
    |
610 | /     fn flush(&mut self) -> io::Result<()> {
611 | |         self.inner.borrow_mut().flush()
612 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/stdio.rs:617:5
    |
617 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
618 | |         f.pad("StderrLock { .. }")
619 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/stdio.rs:617:5
    |
617 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
618 | |         f.pad("StderrLock { .. }")
619 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/mod.rs:1127:13
     |
1127 | /             fn write_str(&mut self, s: &str) -> fmt::Result {
1128 | |                 match self.inner.write_all(s.as_bytes()) {
1129 | |                     Ok(()) => Ok(()),
1130 | |                     Err(e) => {
...    |
1134 | |                 }
1135 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1127:13
     |
1127 | /             fn write_str(&mut self, s: &str) -> fmt::Result {
1128 | |                 match self.inner.write_all(s.as_bytes()) {
1129 | |                     Ok(()) => Ok(()),
1130 | |                     Err(e) => {
...    |
1134 | |                 }
1135 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/mod.rs:1690:5
     |
1690 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1691 | |         f.debug_struct("Chain")
1692 | |             .field("t", &self.first)
1693 | |             .field("u", &self.second)
1694 | |             .finish()
1695 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1690:5
     |
1690 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1691 | |         f.debug_struct("Chain")
1692 | |             .field("t", &self.first)
1693 | |             .field("u", &self.second)
1694 | |             .finish()
1695 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/io/mod.rs:1700:5
     |
1700 | /     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {
1701 | |         if !self.done_first {
1702 | |             match self.first.read(buf)? {
1703 | |                 0 if buf.len() != 0 => { self.done_first = true; }
...    |
1707 | |         self.second.read(buf)
1708 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1700:5
     |
1700 | /     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {
1701 | |         if !self.done_first {
1702 | |             match self.first.read(buf)? {
1703 | |                 0 if buf.len() != 0 => { self.done_first = true; }
...    |
1707 | |         self.second.read(buf)
1708 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&[u8]` cannot be known at compilation time
    --> libstd/io/mod.rs:1722:5
     |
1722 | /     fn fill_buf(&mut self) -> Result<&[u8]> {
1723 | |         if !self.done_first {
1724 | |             match self.first.fill_buf()? {
1725 | |                 buf if buf.len() == 0 => { self.done_first = true; }
...    |
1729 | |         self.second.fill_buf()
1730 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&[u8]`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1722:5
     |
1722 | /     fn fill_buf(&mut self) -> Result<&[u8]> {
1723 | |         if !self.done_first {
1724 | |             match self.first.fill_buf()? {
1725 | |                 buf if buf.len() == 0 => { self.done_first = true; }
...    |
1729 | |         self.second.fill_buf()
1730 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/io/mod.rs:1895:5
     |
1895 | /     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {
1896 | |         // Don't call into inner reader at all at EOF because it may still block
1897 | |         if self.limit == 0 {
1898 | |             return Ok(0);
...    |
1904 | |         Ok(n)
1905 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1895:5
     |
1895 | /     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {
1896 | |         // Don't call into inner reader at all at EOF because it may still block
1897 | |         if self.limit == 0 {
1898 | |             return Ok(0);
...    |
1904 | |         Ok(n)
1905 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
    --> libstd/io/mod.rs:1911:5
     |
1911 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {
1912 | |         let reservation_size = cmp::min(self.limit, 32) as usize;
1913 | |
1914 | |         read_to_end_with_reservation(self, buf, reservation_size)
1915 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u8`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/io/mod.rs:1911:5
     |
1911 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {
1912 | |         let reservation_size = cmp::min(self.limit, 32) as usize;
1913 | |
1914 | |         read_to_end_with_reservation(self, buf, reservation_size)
1915 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1911:5
     |
1911 | /     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {
1912 | |         let reservation_size = cmp::min(self.limit, 32) as usize;
1913 | |
1914 | |         read_to_end_with_reservation(self, buf, reservation_size)
1915 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&[u8]` cannot be known at compilation time
    --> libstd/io/mod.rs:1920:5
     |
1920 | /     fn fill_buf(&mut self) -> Result<&[u8]> {
1921 | |         // Don't call into inner reader at all at EOF because it may still block
1922 | |         if self.limit == 0 {
1923 | |             return Ok(&[]);
...    |
1928 | |         Ok(&buf[..cap])
1929 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&[u8]`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1920:5
     |
1920 | /     fn fill_buf(&mut self) -> Result<&[u8]> {
1921 | |         // Don't call into inner reader at all at EOF because it may still block
1922 | |         if self.limit == 0 {
1923 | |             return Ok(&[]);
...    |
1928 | |         Ok(&buf[..cap])
1929 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
    --> libstd/io/mod.rs:1965:5
     |
1965 |     type Item = Result<u8>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u8`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1965:5
     |
1965 |     type Item = Result<u8>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::result::Result<u8, io::error::Error>` cannot be known at compilation time
    --> libstd/io/mod.rs:1967:5
     |
1967 | /     fn next(&mut self) -> Option<Result<u8>> {
1968 | |         read_one_byte(&mut self.inner)
1969 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<u8, io::error::Error>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
    --> libstd/io/mod.rs:1967:5
     |
1967 | /     fn next(&mut self) -> Option<Result<u8>> {
1968 | |         read_one_byte(&mut self.inner)
1969 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u8`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1967:5
     |
1967 | /     fn next(&mut self) -> Option<Result<u8>> {
1968 | |         read_one_byte(&mut self.inner)
1969 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::prelude::Vec<u8>` cannot be known at compilation time
    --> libstd/io/mod.rs:1988:5
     |
1988 |     type Item = Result<Vec<u8>>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::Vec<u8>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1988:5
     |
1988 |     type Item = Result<Vec<u8>>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
    --> libstd/io/mod.rs:1988:5
     |
1988 |     type Item = Result<Vec<u8>>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u8`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `core::result::Result<alloc_crate::prelude::Vec<u8>, io::error::Error>` cannot be known at compilation time
    --> libstd/io/mod.rs:1990:5
     |
1990 | /     fn next(&mut self) -> Option<Result<Vec<u8>>> {
1991 | |         let mut buf = Vec::new();
1992 | |         match self.buf.read_until(self.delim, &mut buf) {
1993 | |             Ok(0) => None,
...    |
2001 | |         }
2002 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<alloc_crate::prelude::Vec<u8>, io::error::Error>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `alloc_crate::prelude::Vec<u8>` cannot be known at compilation time
    --> libstd/io/mod.rs:1990:5
     |
1990 | /     fn next(&mut self) -> Option<Result<Vec<u8>>> {
1991 | |         let mut buf = Vec::new();
1992 | |         match self.buf.read_until(self.delim, &mut buf) {
1993 | |             Ok(0) => None,
...    |
2001 | |         }
2002 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::Vec<u8>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1990:5
     |
1990 | /     fn next(&mut self) -> Option<Result<Vec<u8>>> {
1991 | |         let mut buf = Vec::new();
1992 | |         match self.buf.read_until(self.delim, &mut buf) {
1993 | |             Ok(0) => None,
...    |
2001 | |         }
2002 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
    --> libstd/io/mod.rs:1990:5
     |
1990 | /     fn next(&mut self) -> Option<Result<Vec<u8>>> {
1991 | |         let mut buf = Vec::new();
1992 | |         match self.buf.read_until(self.delim, &mut buf) {
1993 | |             Ok(0) => None,
...    |
2001 | |         }
2002 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u8`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
    --> libstd/io/mod.rs:2019:5
     |
2019 |     type Item = Result<String>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:2019:5
     |
2019 |     type Item = Result<String>;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::result::Result<alloc_crate::prelude::String, io::error::Error>` cannot be known at compilation time
    --> libstd/io/mod.rs:2021:5
     |
2021 | /     fn next(&mut self) -> Option<Result<String>> {
2022 | |         let mut buf = String::new();
2023 | |         match self.buf.read_line(&mut buf) {
2024 | |             Ok(0) => None,
...    |
2035 | |         }
2036 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<alloc_crate::prelude::String, io::error::Error>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
    --> libstd/io/mod.rs:2021:5
     |
2021 | /     fn next(&mut self) -> Option<Result<String>> {
2022 | |         let mut buf = String::new();
2023 | |         match self.buf.read_line(&mut buf) {
2024 | |             Ok(0) => None,
...    |
2035 | |         }
2036 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:2021:5
     |
2021 | /     fn next(&mut self) -> Option<Result<String>> {
2022 | |         let mut buf = String::new();
2023 | |         match self.buf.read_line(&mut buf) {
2024 | |             Ok(0) => None,
...    |
2035 | |         }
2036 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/ip.rs:662:5
    |
662 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
663 | |         match self {
664 | |             IpAddr::V4(ip) => ip.fmt(fmt),
665 | |             IpAddr::V6(ip) => ip.fmt(fmt),
666 | |         }
667 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/ip.rs:662:5
    |
662 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
663 | |         match self {
664 | |             IpAddr::V4(ip) => ip.fmt(fmt),
665 | |             IpAddr::V6(ip) => ip.fmt(fmt),
666 | |         }
667 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/ip.rs:686:5
    |
686 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
687 | |         let octets = self.octets();
688 | |         write!(fmt, "{}.{}.{}.{}", octets[0], octets[1], octets[2], octets[3])
689 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/ip.rs:686:5
    |
686 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
687 | |         let octets = self.octets();
688 | |         write!(fmt, "{}.{}.{}.{}", octets[0], octets[1], octets[2], octets[3])
689 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/ip.rs:694:5
    |
694 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
695 | |         fmt::Display::fmt(self, fmt)
696 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/ip.rs:694:5
    |
694 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
695 | |         fmt::Display::fmt(self, fmt)
696 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/net/ip.rs:744:5
    |
744 | /     fn partial_cmp(&self, other: &Ipv4Addr) -> Option<Ordering> {
745 | |         Some(self.cmp(other))
746 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/net/ip.rs:751:5
    |
751 | /     fn partial_cmp(&self, other: &Ipv4Addr) -> Option<Ordering> {
752 | |         match self {
753 | |             IpAddr::V4(v4) => v4.partial_cmp(other),
754 | |             IpAddr::V6(_) => Some(Ordering::Greater),
755 | |         }
756 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/net/ip.rs:761:5
    |
761 | /     fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {
762 | |         match other {
763 | |             IpAddr::V4(v4) => self.partial_cmp(v4),
764 | |             IpAddr::V6(_) => Some(Ordering::Less),
765 | |         }
766 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::ip::Ipv6MulticastScope` cannot be known at compilation time
    --> libstd/net/ip.rs:1151:5
     |
1151 | /     pub fn multicast_scope(&self) -> Option<Ipv6MulticastScope> {
1152 | |         if self.is_multicast() {
1153 | |             match self.segments()[0] & 0x000f {
1154 | |                 1 => Some(Ipv6MulticastScope::InterfaceLocal),
...    |
1165 | |         }
1166 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6MulticastScope`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::ip::Ipv4Addr` cannot be known at compilation time
    --> libstd/net/ip.rs:1208:5
     |
1208 | /     pub fn to_ipv4(&self) -> Option<Ipv4Addr> {
1209 | |         match self.segments() {
1210 | |             [0, 0, 0, 0, 0, f, g, h] if f == 0 || f == 0xffff => {
1211 | |                 Some(Ipv4Addr::new((g >> 8) as u8, g as u8,
...    |
1215 | |         }
1216 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv4Addr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/net/ip.rs:1234:5
     |
1234 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
1235 | |         match self.segments() {
1236 | |             // We need special cases for :: and ::1, otherwise they're formatted
1237 | |             // as ::0.0.0.[01]
...    |
1300 | |         }
1301 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/net/ip.rs:1234:5
     |
1234 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
1235 | |         match self.segments() {
1236 | |             // We need special cases for :: and ::1, otherwise they're formatted
1237 | |             // as ::0.0.0.[01]
...    |
1300 | |         }
1301 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/net/ip.rs:1306:5
     |
1306 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
1307 | |         fmt::Display::fmt(self, fmt)
1308 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/net/ip.rs:1306:5
     |
1306 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
1307 | |         fmt::Display::fmt(self, fmt)
1308 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/net/ip.rs:1355:5
     |
1355 | /     fn partial_cmp(&self, other: &Ipv6Addr) -> Option<Ordering> {
1356 | |         Some(self.cmp(other))
1357 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/net/ip.rs:1362:5
     |
1362 | /     fn partial_cmp(&self, other: &Ipv6Addr) -> Option<Ordering> {
1363 | |         match self {
1364 | |             IpAddr::V4(_) => Some(Ordering::Less),
1365 | |             IpAddr::V6(v6) => v6.partial_cmp(other),
1366 | |         }
1367 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/net/ip.rs:1372:5
     |
1372 | /     fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {
1373 | |         match other {
1374 | |             IpAddr::V4(_) => Some(Ordering::Greater),
1375 | |             IpAddr::V6(v6) => self.partial_cmp(v6),
1376 | |         }
1377 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::ip::IpAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:579:5
    |
579 | /     fn from(pieces: (I, u16)) -> SocketAddr {
580 | |         SocketAddr::new(pieces.0.into(), pieces.1)
581 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::IpAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::convert::Into`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/addr.rs:599:5
    |
599 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
600 | |         match *self {
601 | |             SocketAddr::V4(ref a) => a.fmt(f),
602 | |             SocketAddr::V6(ref a) => a.fmt(f),
603 | |         }
604 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:599:5
    |
599 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
600 | |         match *self {
601 | |             SocketAddr::V4(ref a) => a.fmt(f),
602 | |             SocketAddr::V6(ref a) => a.fmt(f),
603 | |         }
604 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/addr.rs:609:5
    |
609 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
610 | |         write!(f, "{}:{}", self.ip(), self.port())
611 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:609:5
    |
609 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
610 | |         write!(f, "{}:{}", self.ip(), self.port())
611 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/addr.rs:616:5
    |
616 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
617 | |         fmt::Display::fmt(self, fmt)
618 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:616:5
    |
616 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
617 | |         fmt::Display::fmt(self, fmt)
618 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/addr.rs:623:5
    |
623 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
624 | |         write!(f, "[{}]:{}", self.ip(), self.port())
625 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:623:5
    |
623 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
624 | |         write!(f, "[{}]:{}", self.ip(), self.port())
625 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/addr.rs:630:5
    |
630 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
631 | |         fmt::Display::fmt(self, fmt)
632 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:630:5
    |
630 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
631 | |         fmt::Display::fmt(self, fmt)
632 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:814:5
    |
814 |     type Iter = option::IntoIter<SocketAddr>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::IntoIter`

error[E0277]: the size for values of type `core::option::IntoIter<net::addr::SocketAddr>` cannot be known at compilation time
   --> libstd/net/addr.rs:815:5
    |
815 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
816 | |         Ok(Some(*self).into_iter())
817 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::IntoIter<net::addr::SocketAddr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:815:5
    |
815 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
816 | |         Ok(Some(*self).into_iter())
817 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:815:5
    |
815 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
816 | |         Ok(Some(*self).into_iter())
817 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::IntoIter`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:822:5
    |
822 |     type Iter = option::IntoIter<SocketAddr>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::IntoIter`

error[E0277]: the size for values of type `core::option::IntoIter<net::addr::SocketAddr>` cannot be known at compilation time
   --> libstd/net/addr.rs:823:5
    |
823 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
824 | |         SocketAddr::V4(*self).to_socket_addrs()
825 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::IntoIter<net::addr::SocketAddr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:823:5
    |
823 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
824 | |         SocketAddr::V4(*self).to_socket_addrs()
825 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:823:5
    |
823 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
824 | |         SocketAddr::V4(*self).to_socket_addrs()
825 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::IntoIter`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:830:5
    |
830 |     type Iter = option::IntoIter<SocketAddr>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::IntoIter`

error[E0277]: the size for values of type `core::option::IntoIter<net::addr::SocketAddr>` cannot be known at compilation time
   --> libstd/net/addr.rs:831:5
    |
831 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
832 | |         SocketAddr::V6(*self).to_socket_addrs()
833 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::IntoIter<net::addr::SocketAddr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:831:5
    |
831 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
832 | |         SocketAddr::V6(*self).to_socket_addrs()
833 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:831:5
    |
831 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
832 | |         SocketAddr::V6(*self).to_socket_addrs()
833 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::IntoIter`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:838:5
    |
838 |     type Iter = option::IntoIter<SocketAddr>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::IntoIter`

error[E0277]: the size for values of type `core::option::IntoIter<net::addr::SocketAddr>` cannot be known at compilation time
   --> libstd/net/addr.rs:839:5
    |
839 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
840 | |         let (ip, port) = *self;
841 | |         match ip {
842 | |             IpAddr::V4(ref a) => (*a, port).to_socket_addrs(),
843 | |             IpAddr::V6(ref a) => (*a, port).to_socket_addrs(),
844 | |         }
845 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::IntoIter<net::addr::SocketAddr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:839:5
    |
839 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
840 | |         let (ip, port) = *self;
841 | |         match ip {
842 | |             IpAddr::V4(ref a) => (*a, port).to_socket_addrs(),
843 | |             IpAddr::V6(ref a) => (*a, port).to_socket_addrs(),
844 | |         }
845 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:839:5
    |
839 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
840 | |         let (ip, port) = *self;
841 | |         match ip {
842 | |             IpAddr::V4(ref a) => (*a, port).to_socket_addrs(),
843 | |             IpAddr::V6(ref a) => (*a, port).to_socket_addrs(),
844 | |         }
845 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::IntoIter`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:850:5
    |
850 |     type Iter = option::IntoIter<SocketAddr>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::IntoIter`

error[E0277]: the size for values of type `core::option::IntoIter<net::addr::SocketAddr>` cannot be known at compilation time
   --> libstd/net/addr.rs:851:5
    |
851 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
852 | |         let (ip, port) = *self;
853 | |         SocketAddrV4::new(ip, port).to_socket_addrs()
854 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::IntoIter<net::addr::SocketAddr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:851:5
    |
851 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
852 | |         let (ip, port) = *self;
853 | |         SocketAddrV4::new(ip, port).to_socket_addrs()
854 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:851:5
    |
851 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
852 | |         let (ip, port) = *self;
853 | |         SocketAddrV4::new(ip, port).to_socket_addrs()
854 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::IntoIter`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:859:5
    |
859 |     type Iter = option::IntoIter<SocketAddr>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::IntoIter`

error[E0277]: the size for values of type `core::option::IntoIter<net::addr::SocketAddr>` cannot be known at compilation time
   --> libstd/net/addr.rs:860:5
    |
860 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
861 | |         let (ip, port) = *self;
862 | |         SocketAddrV6::new(ip, port, 0, 0).to_socket_addrs()
863 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::IntoIter<net::addr::SocketAddr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:860:5
    |
860 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
861 | |         let (ip, port) = *self;
862 | |         SocketAddrV6::new(ip, port, 0, 0).to_socket_addrs()
863 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:860:5
    |
860 | /     fn to_socket_addrs(&self) -> io::Result<option::IntoIter<SocketAddr>> {
861 | |         let (ip, port) = *self;
862 | |         SocketAddrV6::new(ip, port, 0, 0).to_socket_addrs()
863 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::IntoIter`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:874:5
    |
874 |     type Iter = vec::IntoIter<SocketAddr>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::vec::IntoIter`

error[E0277]: the size for values of type `alloc_crate::vec::IntoIter<net::addr::SocketAddr>` cannot be known at compilation time
   --> libstd/net/addr.rs:875:5
    |
875 | /     fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {
876 | |         let (host, port) = *self;
877 | |
878 | |         // try to parse the host as a regular IP address first
...   |
888 | |         resolve_socket_addr(host, port)
889 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::vec::IntoIter<net::addr::SocketAddr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:875:5
    |
875 | /     fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {
876 | |         let (host, port) = *self;
877 | |
878 | |         // try to parse the host as a regular IP address first
...   |
888 | |         resolve_socket_addr(host, port)
889 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:875:5
    |
875 | /     fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {
876 | |         let (host, port) = *self;
877 | |
878 | |         // try to parse the host as a regular IP address first
...   |
888 | |         resolve_socket_addr(host, port)
889 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::vec::IntoIter`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:895:5
    |
895 |     type Iter = vec::IntoIter<SocketAddr>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::vec::IntoIter`

error[E0277]: the size for values of type `alloc_crate::vec::IntoIter<net::addr::SocketAddr>` cannot be known at compilation time
   --> libstd/net/addr.rs:896:5
    |
896 | /     fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {
897 | |         // try to parse as a regular SocketAddr first
898 | |         if let Some(addr) = self.parse().ok() {
899 | |             return Ok(vec![addr].into_iter());
...   |
917 | |         resolve_socket_addr(host, port)
918 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::vec::IntoIter<net::addr::SocketAddr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:896:5
    |
896 | /     fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {
897 | |         // try to parse as a regular SocketAddr first
898 | |         if let Some(addr) = self.parse().ok() {
899 | |             return Ok(vec![addr].into_iter());
...   |
917 | |         resolve_socket_addr(host, port)
918 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:896:5
    |
896 | /     fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {
897 | |         // try to parse as a regular SocketAddr first
898 | |         if let Some(addr) = self.parse().ok() {
899 | |             return Ok(vec![addr].into_iter());
...   |
917 | |         resolve_socket_addr(host, port)
918 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::vec::IntoIter`

error[E0277]: the size for values of type `core::slice::Iter<'a, net::addr::SocketAddr>` cannot be known at compilation time
   --> libstd/net/addr.rs:923:5
    |
923 |     type Iter = iter::Cloned<slice::Iter<'a, SocketAddr>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::slice::Iter<'a, net::addr::SocketAddr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::iter::Cloned`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:923:5
    |
923 |     type Iter = iter::Cloned<slice::Iter<'a, SocketAddr>>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::slice::Iter`

error[E0277]: the size for values of type `core::iter::Cloned<core::slice::Iter<'_, net::addr::SocketAddr>>` cannot be known at compilation time
   --> libstd/net/addr.rs:925:5
    |
925 | /     fn to_socket_addrs(&self) -> io::Result<Self::Iter> {
926 | |         Ok(self.iter().cloned())
927 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::iter::Cloned<core::slice::Iter<'_, net::addr::SocketAddr>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:925:5
    |
925 | /     fn to_socket_addrs(&self) -> io::Result<Self::Iter> {
926 | |         Ok(self.iter().cloned())
927 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::slice::Iter<'_, net::addr::SocketAddr>` cannot be known at compilation time
   --> libstd/net/addr.rs:925:5
    |
925 | /     fn to_socket_addrs(&self) -> io::Result<Self::Iter> {
926 | |         Ok(self.iter().cloned())
927 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::slice::Iter<'_, net::addr::SocketAddr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::iter::Cloned`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:925:5
    |
925 | /     fn to_socket_addrs(&self) -> io::Result<Self::Iter> {
926 | |         Ok(self.iter().cloned())
927 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::slice::Iter`

error[E0277]: the size for values of type `<T as net::addr::ToSocketAddrs>::Iter` cannot be known at compilation time
   --> libstd/net/addr.rs:933:5
    |
933 | /     fn to_socket_addrs(&self) -> io::Result<T::Iter> {
934 | |         (**self).to_socket_addrs()
935 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `<T as net::addr::ToSocketAddrs>::Iter`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where <T as net::addr::ToSocketAddrs>::Iter: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:933:5
    |
933 | /     fn to_socket_addrs(&self) -> io::Result<T::Iter> {
934 | |         (**self).to_socket_addrs()
935 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:940:5
    |
940 |     type Iter = vec::IntoIter<SocketAddr>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::vec::IntoIter`

error[E0277]: the size for values of type `alloc_crate::vec::IntoIter<net::addr::SocketAddr>` cannot be known at compilation time
   --> libstd/net/addr.rs:941:5
    |
941 | /     fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {
942 | |         (&**self).to_socket_addrs()
943 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::vec::IntoIter<net::addr::SocketAddr>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/addr.rs:941:5
    |
941 | /     fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {
942 | |         (&**self).to_socket_addrs()
943 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/addr.rs:941:5
    |
941 | /     fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {
942 | |         (&**self).to_socket_addrs()
943 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::vec::IntoIter`

error[E0277]: the size for values of type `net::tcp::TcpStream` cannot be known at compilation time
   --> libstd/net/tcp.rs:153:5
    |
153 | /     pub fn connect<A: ToSocketAddrs>(addr: A) -> io::Result<TcpStream> {
154 | |         super::each_addr(addr, net_imp::TcpStream::connect).map(TcpStream)
155 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::tcp::TcpStream`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:153:5
    |
153 | /     pub fn connect<A: ToSocketAddrs>(addr: A) -> io::Result<TcpStream> {
154 | |         super::each_addr(addr, net_imp::TcpStream::connect).map(TcpStream)
155 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::tcp::TcpStream` cannot be known at compilation time
   --> libstd/net/tcp.rs:171:5
    |
171 | /     pub fn connect_timeout(addr: &SocketAddr, timeout: Duration) -> io::Result<TcpStream> {
172 | |         net_imp::TcpStream::connect_timeout(addr, timeout).map(TcpStream)
173 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::tcp::TcpStream`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:171:5
    |
171 | /     pub fn connect_timeout(addr: &SocketAddr, timeout: Duration) -> io::Result<TcpStream> {
172 | |         net_imp::TcpStream::connect_timeout(addr, timeout).map(TcpStream)
173 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/tcp.rs:188:5
    |
188 | /     pub fn peer_addr(&self) -> io::Result<SocketAddr> {
189 | |         self.0.peer_addr()
190 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:188:5
    |
188 | /     pub fn peer_addr(&self) -> io::Result<SocketAddr> {
189 | |         self.0.peer_addr()
190 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/tcp.rs:205:5
    |
205 | /     pub fn local_addr(&self) -> io::Result<SocketAddr> {
206 | |         self.0.socket_addr()
207 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:205:5
    |
205 | /     pub fn local_addr(&self) -> io::Result<SocketAddr> {
206 | |         self.0.socket_addr()
207 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:234:5
    |
234 | /     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {
235 | |         self.0.shutdown(how)
236 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:234:5
    |
234 | /     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {
235 | |         self.0.shutdown(how)
236 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::tcp::TcpStream` cannot be known at compilation time
   --> libstd/net/tcp.rs:255:5
    |
255 | /     pub fn try_clone(&self) -> io::Result<TcpStream> {
256 | |         self.0.duplicate().map(TcpStream)
257 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::tcp::TcpStream`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:255:5
    |
255 | /     pub fn try_clone(&self) -> io::Result<TcpStream> {
256 | |         self.0.duplicate().map(TcpStream)
257 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/net/tcp.rs:302:5
    |
302 | /     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
303 | |         self.0.set_read_timeout(dur)
304 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:302:5
    |
302 | /     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
303 | |         self.0.set_read_timeout(dur)
304 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:302:5
    |
302 | /     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
303 | |         self.0.set_read_timeout(dur)
304 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/net/tcp.rs:349:5
    |
349 | /     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
350 | |         self.0.set_write_timeout(dur)
351 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:349:5
    |
349 | /     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
350 | |         self.0.set_write_timeout(dur)
351 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:349:5
    |
349 | /     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
350 | |         self.0.set_write_timeout(dur)
351 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<core::time::Duration>` cannot be known at compilation time
   --> libstd/net/tcp.rs:375:5
    |
375 | /     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {
376 | |         self.0.read_timeout()
377 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<core::time::Duration>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:375:5
    |
375 | /     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {
376 | |         self.0.read_timeout()
377 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/net/tcp.rs:375:5
    |
375 | /     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {
376 | |         self.0.read_timeout()
377 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::option::Option<core::time::Duration>` cannot be known at compilation time
   --> libstd/net/tcp.rs:401:5
    |
401 | /     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {
402 | |         self.0.write_timeout()
403 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<core::time::Duration>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:401:5
    |
401 | /     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {
402 | |         self.0.write_timeout()
403 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/net/tcp.rs:401:5
    |
401 | /     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {
402 | |         self.0.write_timeout()
403 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/net/tcp.rs:423:5
    |
423 | /     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {
424 | |         self.0.peek(buf)
425 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:423:5
    |
423 | /     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {
424 | |         self.0.peek(buf)
425 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:445:5
    |
445 | /     pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {
446 | |         self.0.set_nodelay(nodelay)
447 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:445:5
    |
445 | /     pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {
446 | |         self.0.set_nodelay(nodelay)
447 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/net/tcp.rs:466:5
    |
466 | /     pub fn nodelay(&self) -> io::Result<bool> {
467 | |         self.0.nodelay()
468 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:466:5
    |
466 | /     pub fn nodelay(&self) -> io::Result<bool> {
467 | |         self.0.nodelay()
468 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:485:5
    |
485 | /     pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {
486 | |         self.0.set_ttl(ttl)
487 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:485:5
    |
485 | /     pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {
486 | |         self.0.set_ttl(ttl)
487 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/net/tcp.rs:506:5
    |
506 | /     pub fn ttl(&self) -> io::Result<u32> {
507 | |         self.0.ttl()
508 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:506:5
    |
506 | /     pub fn ttl(&self) -> io::Result<u32> {
507 | |         self.0.ttl()
508 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<io::error::Error>` cannot be known at compilation time
   --> libstd/net/tcp.rs:526:5
    |
526 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
527 | |         self.0.take_error()
528 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<io::error::Error>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:526:5
    |
526 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
527 | |         self.0.take_error()
528 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:573:5
    |
573 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
574 | |         self.0.set_nonblocking(nonblocking)
575 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:573:5
    |
573 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
574 | |         self.0.set_nonblocking(nonblocking)
575 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/net/tcp.rs:580:5
    |
580 |     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:580:5
    |
580 |     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/net/tcp.rs:589:5
    |
589 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:589:5
    |
589 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:590:5
    |
590 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:590:5
    |
590 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/net/tcp.rs:594:5
    |
594 |     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:594:5
    |
594 |     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/net/tcp.rs:603:5
    |
603 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:603:5
    |
603 |     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:604:5
    |
604 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:604:5
    |
604 |     fn flush(&mut self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:621:5
    |
621 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
622 | |         self.0.fmt(f)
623 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:621:5
    |
621 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
622 | |         self.0.fmt(f)
623 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::tcp::TcpListener` cannot be known at compilation time
   --> libstd/net/tcp.rs:670:5
    |
670 | /     pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {
671 | |         super::each_addr(addr, net_imp::TcpListener::bind).map(TcpListener)
672 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::tcp::TcpListener`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:670:5
    |
670 | /     pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {
671 | |         super::each_addr(addr, net_imp::TcpListener::bind).map(TcpListener)
672 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/tcp.rs:686:5
    |
686 | /     pub fn local_addr(&self) -> io::Result<SocketAddr> {
687 | |         self.0.socket_addr()
688 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:686:5
    |
686 | /     pub fn local_addr(&self) -> io::Result<SocketAddr> {
687 | |         self.0.socket_addr()
688 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::tcp::TcpListener` cannot be known at compilation time
   --> libstd/net/tcp.rs:707:5
    |
707 | /     pub fn try_clone(&self) -> io::Result<TcpListener> {
708 | |         self.0.duplicate().map(TcpListener)
709 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::tcp::TcpListener`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:707:5
    |
707 | /     pub fn try_clone(&self) -> io::Result<TcpListener> {
708 | |         self.0.duplicate().map(TcpListener)
709 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(net::tcp::TcpStream, net::addr::SocketAddr)` cannot be known at compilation time
   --> libstd/net/tcp.rs:731:5
    |
731 | /     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {
732 | |         self.0.accept().map(|(a, b)| (TcpStream(a), b))
733 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(net::tcp::TcpStream, net::addr::SocketAddr)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:731:5
    |
731 | /     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {
732 | |         self.0.accept().map(|(a, b)| (TcpStream(a), b))
733 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:781:5
    |
781 | /     pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {
782 | |         self.0.set_ttl(ttl)
783 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:781:5
    |
781 | /     pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {
782 | |         self.0.set_ttl(ttl)
783 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/net/tcp.rs:801:5
    |
801 | /     pub fn ttl(&self) -> io::Result<u32> {
802 | |         self.0.ttl()
803 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:801:5
    |
801 | /     pub fn ttl(&self) -> io::Result<u32> {
802 | |         self.0.ttl()
803 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:809:5
    |
809 | /     pub fn set_only_v6(&self, only_v6: bool) -> io::Result<()> {
810 | |         self.0.set_only_v6(only_v6)
811 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:809:5
    |
809 | /     pub fn set_only_v6(&self, only_v6: bool) -> io::Result<()> {
810 | |         self.0.set_only_v6(only_v6)
811 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/net/tcp.rs:817:5
    |
817 | /     pub fn only_v6(&self) -> io::Result<bool> {
818 | |         self.0.only_v6()
819 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:817:5
    |
817 | /     pub fn only_v6(&self) -> io::Result<bool> {
818 | |         self.0.only_v6()
819 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<io::error::Error>` cannot be known at compilation time
   --> libstd/net/tcp.rs:836:5
    |
836 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
837 | |         self.0.take_error()
838 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<io::error::Error>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:836:5
    |
836 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
837 | |         self.0.take_error()
838 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:885:5
    |
885 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
886 | |         self.0.set_nonblocking(nonblocking)
887 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:885:5
    |
885 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
886 | |         self.0.set_nonblocking(nonblocking)
887 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::tcp::TcpStream` cannot be known at compilation time
   --> libstd/net/tcp.rs:892:5
    |
892 |     type Item = io::Result<TcpStream>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::tcp::TcpStream`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:892:5
    |
892 |     type Item = io::Result<TcpStream>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::result::Result<net::tcp::TcpStream, io::error::Error>` cannot be known at compilation time
   --> libstd/net/tcp.rs:893:5
    |
893 | /     fn next(&mut self) -> Option<io::Result<TcpStream>> {
894 | |         Some(self.listener.accept().map(|p| p.0))
895 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<net::tcp::TcpStream, io::error::Error>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::tcp::TcpStream` cannot be known at compilation time
   --> libstd/net/tcp.rs:893:5
    |
893 | /     fn next(&mut self) -> Option<io::Result<TcpStream>> {
894 | |         Some(self.listener.accept().map(|p| p.0))
895 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::tcp::TcpStream`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:893:5
    |
893 | /     fn next(&mut self) -> Option<io::Result<TcpStream>> {
894 | |         Some(self.listener.accept().map(|p| p.0))
895 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:914:5
    |
914 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
915 | |         self.0.fmt(f)
916 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:914:5
    |
914 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
915 | |         self.0.fmt(f)
916 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::udp::UdpSocket` cannot be known at compilation time
   --> libstd/net/udp.rs:103:5
    |
103 | /     pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<UdpSocket> {
104 | |         super::each_addr(addr, net_imp::UdpSocket::bind).map(UdpSocket)
105 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::udp::UdpSocket`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:103:5
    |
103 | /     pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<UdpSocket> {
104 | |         super::each_addr(addr, net_imp::UdpSocket::bind).map(UdpSocket)
105 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(usize, net::addr::SocketAddr)` cannot be known at compilation time
   --> libstd/net/udp.rs:126:5
    |
126 | /     pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {
127 | |         self.0.recv_from(buf)
128 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(usize, net::addr::SocketAddr)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:126:5
    |
126 | /     pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {
127 | |         self.0.recv_from(buf)
128 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(usize, net::addr::SocketAddr)` cannot be known at compilation time
   --> libstd/net/udp.rs:155:5
    |
155 | /     pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {
156 | |         self.0.peek_from(buf)
157 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(usize, net::addr::SocketAddr)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:155:5
    |
155 | /     pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {
156 | |         self.0.peek_from(buf)
157 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/net/udp.rs:184:5
    |
184 | /     pub fn send_to<A: ToSocketAddrs>(&self, buf: &[u8], addr: A)
185 | |                                      -> io::Result<usize> {
186 | |         match addr.to_socket_addrs()?.next() {
187 | |             Some(addr) => self.0.send_to(buf, &addr),
...   |
190 | |         }
191 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:184:5
    |
184 | /     pub fn send_to<A: ToSocketAddrs>(&self, buf: &[u8], addr: A)
185 | |                                      -> io::Result<usize> {
186 | |         match addr.to_socket_addrs()?.next() {
187 | |             Some(addr) => self.0.send_to(buf, &addr),
...   |
190 | |         }
191 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/udp.rs:205:5
    |
205 | /     pub fn local_addr(&self) -> io::Result<SocketAddr> {
206 | |         self.0.socket_addr()
207 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:205:5
    |
205 | /     pub fn local_addr(&self) -> io::Result<SocketAddr> {
206 | |         self.0.socket_addr()
207 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::udp::UdpSocket` cannot be known at compilation time
   --> libstd/net/udp.rs:224:5
    |
224 | /     pub fn try_clone(&self) -> io::Result<UdpSocket> {
225 | |         self.0.duplicate().map(UdpSocket)
226 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::udp::UdpSocket`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:224:5
    |
224 | /     pub fn try_clone(&self) -> io::Result<UdpSocket> {
225 | |         self.0.duplicate().map(UdpSocket)
226 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/net/udp.rs:270:5
    |
270 | /     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
271 | |         self.0.set_read_timeout(dur)
272 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:270:5
    |
270 | /     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
271 | |         self.0.set_read_timeout(dur)
272 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:270:5
    |
270 | /     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
271 | |         self.0.set_read_timeout(dur)
272 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/net/udp.rs:316:5
    |
316 | /     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
317 | |         self.0.set_write_timeout(dur)
318 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:316:5
    |
316 | /     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
317 | |         self.0.set_write_timeout(dur)
318 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:316:5
    |
316 | /     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
317 | |         self.0.set_write_timeout(dur)
318 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<core::time::Duration>` cannot be known at compilation time
   --> libstd/net/udp.rs:337:5
    |
337 | /     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {
338 | |         self.0.read_timeout()
339 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<core::time::Duration>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:337:5
    |
337 | /     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {
338 | |         self.0.read_timeout()
339 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/net/udp.rs:337:5
    |
337 | /     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {
338 | |         self.0.read_timeout()
339 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::option::Option<core::time::Duration>` cannot be known at compilation time
   --> libstd/net/udp.rs:358:5
    |
358 | /     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {
359 | |         self.0.write_timeout()
360 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<core::time::Duration>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:358:5
    |
358 | /     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {
359 | |         self.0.write_timeout()
360 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/net/udp.rs:358:5
    |
358 | /     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {
359 | |         self.0.write_timeout()
360 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:376:5
    |
376 | /     pub fn set_broadcast(&self, broadcast: bool) -> io::Result<()> {
377 | |         self.0.set_broadcast(broadcast)
378 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:376:5
    |
376 | /     pub fn set_broadcast(&self, broadcast: bool) -> io::Result<()> {
377 | |         self.0.set_broadcast(broadcast)
378 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/net/udp.rs:397:5
    |
397 | /     pub fn broadcast(&self) -> io::Result<bool> {
398 | |         self.0.broadcast()
399 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:397:5
    |
397 | /     pub fn broadcast(&self) -> io::Result<bool> {
398 | |         self.0.broadcast()
399 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:415:5
    |
415 | /     pub fn set_multicast_loop_v4(&self, multicast_loop_v4: bool) -> io::Result<()> {
416 | |         self.0.set_multicast_loop_v4(multicast_loop_v4)
417 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:415:5
    |
415 | /     pub fn set_multicast_loop_v4(&self, multicast_loop_v4: bool) -> io::Result<()> {
416 | |         self.0.set_multicast_loop_v4(multicast_loop_v4)
417 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/net/udp.rs:436:5
    |
436 | /     pub fn multicast_loop_v4(&self) -> io::Result<bool> {
437 | |         self.0.multicast_loop_v4()
438 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:436:5
    |
436 | /     pub fn multicast_loop_v4(&self) -> io::Result<bool> {
437 | |         self.0.multicast_loop_v4()
438 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:457:5
    |
457 | /     pub fn set_multicast_ttl_v4(&self, multicast_ttl_v4: u32) -> io::Result<()> {
458 | |         self.0.set_multicast_ttl_v4(multicast_ttl_v4)
459 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:457:5
    |
457 | /     pub fn set_multicast_ttl_v4(&self, multicast_ttl_v4: u32) -> io::Result<()> {
458 | |         self.0.set_multicast_ttl_v4(multicast_ttl_v4)
459 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/net/udp.rs:478:5
    |
478 | /     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {
479 | |         self.0.multicast_ttl_v4()
480 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:478:5
    |
478 | /     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {
479 | |         self.0.multicast_ttl_v4()
480 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:496:5
    |
496 | /     pub fn set_multicast_loop_v6(&self, multicast_loop_v6: bool) -> io::Result<()> {
497 | |         self.0.set_multicast_loop_v6(multicast_loop_v6)
498 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:496:5
    |
496 | /     pub fn set_multicast_loop_v6(&self, multicast_loop_v6: bool) -> io::Result<()> {
497 | |         self.0.set_multicast_loop_v6(multicast_loop_v6)
498 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/net/udp.rs:517:5
    |
517 | /     pub fn multicast_loop_v6(&self) -> io::Result<bool> {
518 | |         self.0.multicast_loop_v6()
519 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:517:5
    |
517 | /     pub fn multicast_loop_v6(&self) -> io::Result<bool> {
518 | |         self.0.multicast_loop_v6()
519 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:535:5
    |
535 | /     pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {
536 | |         self.0.set_ttl(ttl)
537 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:535:5
    |
535 | /     pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {
536 | |         self.0.set_ttl(ttl)
537 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/net/udp.rs:555:5
    |
555 | /     pub fn ttl(&self) -> io::Result<u32> {
556 | |         self.0.ttl()
557 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:555:5
    |
555 | /     pub fn ttl(&self) -> io::Result<u32> {
556 | |         self.0.ttl()
557 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:567:5
    |
567 | /     pub fn join_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()> {
568 | |         self.0.join_multicast_v4(multiaddr, interface)
569 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:567:5
    |
567 | /     pub fn join_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()> {
568 | |         self.0.join_multicast_v4(multiaddr, interface)
569 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:577:5
    |
577 | /     pub fn join_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()> {
578 | |         self.0.join_multicast_v6(multiaddr, interface)
579 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:577:5
    |
577 | /     pub fn join_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()> {
578 | |         self.0.join_multicast_v6(multiaddr, interface)
579 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:588:5
    |
588 | /     pub fn leave_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()> {
589 | |         self.0.leave_multicast_v4(multiaddr, interface)
590 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:588:5
    |
588 | /     pub fn leave_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()> {
589 | |         self.0.leave_multicast_v4(multiaddr, interface)
590 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:599:5
    |
599 | /     pub fn leave_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()> {
600 | |         self.0.leave_multicast_v6(multiaddr, interface)
601 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:599:5
    |
599 | /     pub fn leave_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()> {
600 | |         self.0.leave_multicast_v6(multiaddr, interface)
601 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<io::error::Error>` cannot be known at compilation time
   --> libstd/net/udp.rs:622:5
    |
622 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
623 | |         self.0.take_error()
624 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<io::error::Error>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:622:5
    |
622 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
623 | |         self.0.take_error()
624 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:655:5
    |
655 | /     pub fn connect<A: ToSocketAddrs>(&self, addr: A) -> io::Result<()> {
656 | |         super::each_addr(addr, |addr| self.0.connect(addr))
657 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:655:5
    |
655 | /     pub fn connect<A: ToSocketAddrs>(&self, addr: A) -> io::Result<()> {
656 | |         super::each_addr(addr, |addr| self.0.connect(addr))
657 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/net/udp.rs:676:5
    |
676 | /     pub fn send(&self, buf: &[u8]) -> io::Result<usize> {
677 | |         self.0.send(buf)
678 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:676:5
    |
676 | /     pub fn send(&self, buf: &[u8]) -> io::Result<usize> {
677 | |         self.0.send(buf)
678 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/net/udp.rs:706:5
    |
706 | /     pub fn recv(&self, buf: &mut [u8]) -> io::Result<usize> {
707 | |         self.0.recv(buf)
708 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:706:5
    |
706 | /     pub fn recv(&self, buf: &mut [u8]) -> io::Result<usize> {
707 | |         self.0.recv(buf)
708 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/net/udp.rs:748:5
    |
748 | /     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {
749 | |         self.0.peek(buf)
750 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:748:5
    |
748 | /     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {
749 | |         self.0.peek(buf)
750 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:795:5
    |
795 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
796 | |         self.0.set_nonblocking(nonblocking)
797 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:795:5
    |
795 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
796 | |         self.0.set_nonblocking(nonblocking)
797 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/udp.rs:814:5
    |
814 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
815 | |         self.0.fmt(f)
816 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/udp.rs:814:5
    |
814 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
815 | |         self.0.fmt(f)
816 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> libstd/net/parser.rs:40:5
   |
40 | /     fn read_atomically<T, F>(&mut self, cb: F) -> Option<T> where
41 | |         F: FnOnce(&mut Parser) -> Option<T>,
42 | |     {
43 | |         let pos = self.pos;
...  |
48 | |         r
49 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `T`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where T: core::marker::Sized` bound
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> libstd/net/parser.rs:52:5
   |
52 | /     fn read_till_eof<T, F>(&mut self, cb: F) -> Option<T> where
53 | |         F: FnOnce(&mut Parser) -> Option<T>,
54 | |     {
55 | |         self.read_atomically(move |p| {
56 | |             cb(p).filter(|_| p.is_eof())
57 | |         })
58 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `T`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where T: core::marker::Sized` bound
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> libstd/net/parser.rs:61:5
   |
61 | /     fn read_or<T>(&mut self, parsers: &mut [Box<dyn FnMut(&mut Parser) -> Option<T> + 'static>])
62 | |                -> Option<T> {
63 | |         for pf in parsers {
64 | |             if let Some(r) = self.read_atomically(|p: &mut Parser| pf(p)) {
...  |
68 | |         None
69 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `T`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where T: core::marker::Sized` bound
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `A` cannot be known at compilation time
  --> libstd/net/parser.rs:72:5
   |
72 | /     fn read_seq_3<A, B, C, PA, PB, PC>(&mut self,
73 | |                                        pa: PA,
74 | |                                        pb: PB,
75 | |                                        pc: PC)
...  |
89 | |         })
90 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `A`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where A: core::marker::Sized` bound
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `B` cannot be known at compilation time
  --> libstd/net/parser.rs:72:5
   |
72 | /     fn read_seq_3<A, B, C, PA, PB, PC>(&mut self,
73 | |                                        pa: PA,
74 | |                                        pb: PB,
75 | |                                        pc: PC)
...  |
89 | |         })
90 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `B`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where B: core::marker::Sized` bound
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `C` cannot be known at compilation time
  --> libstd/net/parser.rs:72:5
   |
72 | /     fn read_seq_3<A, B, C, PA, PB, PC>(&mut self,
73 | |                                        pa: PA,
74 | |                                        pb: PB,
75 | |                                        pc: PC)
...  |
89 | |         })
90 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `C`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where C: core::marker::Sized` bound
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `(A, B, C)` cannot be known at compilation time
  --> libstd/net/parser.rs:72:5
   |
72 | /     fn read_seq_3<A, B, C, PA, PB, PC>(&mut self,
73 | |                                        pa: PA,
74 | |                                        pb: PB,
75 | |                                        pc: PC)
...  |
89 | |         })
90 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `(A, B, C)`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `char` cannot be known at compilation time
   --> libstd/net/parser.rs:93:5
    |
93  | /     fn read_char(&mut self) -> Option<char> {
94  | |         if self.is_eof() {
95  | |             None
96  | |         } else {
...   |
100 | |         }
101 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `char`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `char` cannot be known at compilation time
   --> libstd/net/parser.rs:104:5
    |
104 | /     fn read_given_char(&mut self, c: char) -> Option<char> {
105 | |         self.read_atomically(|p| {
106 | |             match p.read_char() {
107 | |                 Some(next) if next == c => Some(next),
...   |
110 | |         })
111 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `char`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/net/parser.rs:114:5
    |
114 | /     fn read_digit(&mut self, radix: u8) -> Option<u8> {
115 | |         fn parse_digit(c: char, radix: u8) -> Option<u8> {
116 | |             let c = c as u8;
117 | |             // assuming radix is either 10 or 16
...   |
131 | |         })
132 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/net/parser.rs:134:5
    |
134 | /     fn read_number_impl(&mut self, radix: u8, max_digits: u32, upto: u32) -> Option<u32> {
135 | |         let mut r = 0;
136 | |         let mut digit_count = 0;
137 | |         loop {
...   |
154 | |         }
155 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/net/parser.rs:158:5
    |
158 | /     fn read_number(&mut self, radix: u8, max_digits: u32, upto: u32) -> Option<u32> {
159 | |         self.read_atomically(|p| p.read_number_impl(radix, max_digits, upto))
160 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::ip::Ipv4Addr` cannot be known at compilation time
   --> libstd/net/parser.rs:162:5
    |
162 | /     fn read_ipv4_addr_impl(&mut self) -> Option<Ipv4Addr> {
163 | |         let mut bs = [0; 4];
164 | |         let mut i = 0;
165 | |         while i < 4 {
...   |
173 | |         Some(Ipv4Addr::new(bs[0], bs[1], bs[2], bs[3]))
174 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv4Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::ip::Ipv4Addr` cannot be known at compilation time
   --> libstd/net/parser.rs:177:5
    |
177 | /     fn read_ipv4_addr(&mut self) -> Option<Ipv4Addr> {
178 | |         self.read_atomically(|p| p.read_ipv4_addr_impl())
179 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv4Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::ip::Ipv6Addr` cannot be known at compilation time
   --> libstd/net/parser.rs:181:5
    |
181 | /     fn read_ipv6_addr_impl(&mut self) -> Option<Ipv6Addr> {
182 | |         fn ipv6_addr_from_head_tail(head: &[u16], tail: &[u16]) -> Ipv6Addr {
183 | |             assert!(head.len() + tail.len() <= 8);
184 | |             let mut gs = [0; 8];
...   |
249 | |         Some(ipv6_addr_from_head_tail(&head[..head_size], &tail[..tail_size]))
250 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::ip::Ipv6Addr` cannot be known at compilation time
   --> libstd/net/parser.rs:252:5
    |
252 | /     fn read_ipv6_addr(&mut self) -> Option<Ipv6Addr> {
253 | |         self.read_atomically(|p| p.read_ipv6_addr_impl())
254 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::ip::IpAddr` cannot be known at compilation time
   --> libstd/net/parser.rs:256:5
    |
256 | /     fn read_ip_addr(&mut self) -> Option<IpAddr> {
257 | |         let ipv4_addr = |p: &mut Parser| p.read_ipv4_addr().map(IpAddr::V4);
258 | |         let ipv6_addr = |p: &mut Parser| p.read_ipv6_addr().map(IpAddr::V6);
259 | |         self.read_or(&mut [Box::new(ipv4_addr), Box::new(ipv6_addr)])
260 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::IpAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::addr::SocketAddrV4` cannot be known at compilation time
   --> libstd/net/parser.rs:262:5
    |
262 | /     fn read_socket_addr_v4(&mut self) -> Option<SocketAddrV4> {
263 | |         let ip_addr = |p: &mut Parser| p.read_ipv4_addr();
264 | |         let colon = |p: &mut Parser| p.read_given_char(':');
265 | |         let port = |p: &mut Parser| {
...   |
272 | |         })
273 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddrV4`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::addr::SocketAddrV6` cannot be known at compilation time
   --> libstd/net/parser.rs:275:5
    |
275 | /     fn read_socket_addr_v6(&mut self) -> Option<SocketAddrV6> {
276 | |         let ip_addr = |p: &mut Parser| {
277 | |             let open_br = |p: &mut Parser| p.read_given_char('[');
278 | |             let ip_addr = |p: &mut Parser| p.read_ipv6_addr();
...   |
290 | |         })
291 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddrV6`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/parser.rs:293:5
    |
293 | /     fn read_socket_addr(&mut self) -> Option<SocketAddr> {
294 | |         let v4 = |p: &mut Parser| p.read_socket_addr_v4().map(SocketAddr::V4);
295 | |         let v6 = |p: &mut Parser| p.read_socket_addr_v6().map(SocketAddr::V6);
296 | |         self.read_or(&mut [Box::new(v4), Box::new(v6)])
297 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `net::ip::IpAddr` cannot be known at compilation time
   --> libstd/net/parser.rs:303:5
    |
303 | /     fn from_str(s: &str) -> Result<IpAddr, AddrParseError> {
304 | |         match Parser::new(s).read_till_eof(|p| p.read_ip_addr()) {
305 | |             Some(s) => Ok(s),
306 | |             None => Err(AddrParseError(()))
307 | |         }
308 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::IpAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::parser::AddrParseError` cannot be known at compilation time
   --> libstd/net/parser.rs:303:5
    |
303 | /     fn from_str(s: &str) -> Result<IpAddr, AddrParseError> {
304 | |         match Parser::new(s).read_till_eof(|p| p.read_ip_addr()) {
305 | |             Some(s) => Ok(s),
306 | |             None => Err(AddrParseError(()))
307 | |         }
308 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::parser::AddrParseError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::ip::Ipv4Addr` cannot be known at compilation time
   --> libstd/net/parser.rs:314:5
    |
314 | /     fn from_str(s: &str) -> Result<Ipv4Addr, AddrParseError> {
315 | |         match Parser::new(s).read_till_eof(|p| p.read_ipv4_addr()) {
316 | |             Some(s) => Ok(s),
317 | |             None => Err(AddrParseError(()))
318 | |         }
319 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv4Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::parser::AddrParseError` cannot be known at compilation time
   --> libstd/net/parser.rs:314:5
    |
314 | /     fn from_str(s: &str) -> Result<Ipv4Addr, AddrParseError> {
315 | |         match Parser::new(s).read_till_eof(|p| p.read_ipv4_addr()) {
316 | |             Some(s) => Ok(s),
317 | |             None => Err(AddrParseError(()))
318 | |         }
319 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::parser::AddrParseError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::ip::Ipv6Addr` cannot be known at compilation time
   --> libstd/net/parser.rs:325:5
    |
325 | /     fn from_str(s: &str) -> Result<Ipv6Addr, AddrParseError> {
326 | |         match Parser::new(s).read_till_eof(|p| p.read_ipv6_addr()) {
327 | |             Some(s) => Ok(s),
328 | |             None => Err(AddrParseError(()))
329 | |         }
330 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::ip::Ipv6Addr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::parser::AddrParseError` cannot be known at compilation time
   --> libstd/net/parser.rs:325:5
    |
325 | /     fn from_str(s: &str) -> Result<Ipv6Addr, AddrParseError> {
326 | |         match Parser::new(s).read_till_eof(|p| p.read_ipv6_addr()) {
327 | |             Some(s) => Ok(s),
328 | |             None => Err(AddrParseError(()))
329 | |         }
330 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::parser::AddrParseError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddrV4` cannot be known at compilation time
   --> libstd/net/parser.rs:336:5
    |
336 | /     fn from_str(s: &str) -> Result<SocketAddrV4, AddrParseError> {
337 | |         match Parser::new(s).read_till_eof(|p| p.read_socket_addr_v4()) {
338 | |             Some(s) => Ok(s),
339 | |             None => Err(AddrParseError(())),
340 | |         }
341 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddrV4`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::parser::AddrParseError` cannot be known at compilation time
   --> libstd/net/parser.rs:336:5
    |
336 | /     fn from_str(s: &str) -> Result<SocketAddrV4, AddrParseError> {
337 | |         match Parser::new(s).read_till_eof(|p| p.read_socket_addr_v4()) {
338 | |             Some(s) => Ok(s),
339 | |             None => Err(AddrParseError(())),
340 | |         }
341 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::parser::AddrParseError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddrV6` cannot be known at compilation time
   --> libstd/net/parser.rs:347:5
    |
347 | /     fn from_str(s: &str) -> Result<SocketAddrV6, AddrParseError> {
348 | |         match Parser::new(s).read_till_eof(|p| p.read_socket_addr_v6()) {
349 | |             Some(s) => Ok(s),
350 | |             None => Err(AddrParseError(())),
351 | |         }
352 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddrV6`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::parser::AddrParseError` cannot be known at compilation time
   --> libstd/net/parser.rs:347:5
    |
347 | /     fn from_str(s: &str) -> Result<SocketAddrV6, AddrParseError> {
348 | |         match Parser::new(s).read_till_eof(|p| p.read_socket_addr_v6()) {
349 | |             Some(s) => Ok(s),
350 | |             None => Err(AddrParseError(())),
351 | |         }
352 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::parser::AddrParseError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/net/parser.rs:358:5
    |
358 | /     fn from_str(s: &str) -> Result<SocketAddr, AddrParseError> {
359 | |         match Parser::new(s).read_till_eof(|p| p.read_socket_addr()) {
360 | |             Some(s) => Ok(s),
361 | |             None => Err(AddrParseError(())),
362 | |         }
363 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::parser::AddrParseError` cannot be known at compilation time
   --> libstd/net/parser.rs:358:5
    |
358 | /     fn from_str(s: &str) -> Result<SocketAddr, AddrParseError> {
359 | |         match Parser::new(s).read_till_eof(|p| p.read_socket_addr()) {
360 | |             Some(s) => Ok(s),
361 | |             None => Err(AddrParseError(())),
362 | |         }
363 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::parser::AddrParseError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/parser.rs:404:5
    |
404 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
405 | |         fmt.write_str(self.description())
406 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/parser.rs:404:5
    |
404 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
405 | |         fmt.write_str(self.description())
406 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/panic.rs:312:5
    |
312 | /     extern "rust-call" fn call_once(self, _args: ()) -> R {
313 | |         (self.0)()
314 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `R` cannot be known at compilation time
   --> libstd/panic.rs:312:5
    |
312 | /     extern "rust-call" fn call_once(self, _args: ()) -> R {
313 | |         (self.0)()
314 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `R`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where R: core::marker::Sized` bound
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/panic.rs:319:5
    |
319 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
320 | |         f.debug_tuple("AssertUnwindSafe")
321 | |             .field(&self.0)
322 | |             .finish()
323 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/panic.rs:319:5
    |
319 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
320 | |         f.debug_tuple("AssertUnwindSafe")
321 | |             .field(&self.0)
322 | |             .finish()
323 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0307]: invalid `self` type: core::pin::Pin<&mut panic::AssertUnwindSafe<F>>
   --> libstd/panic.rs:330:19
    |
330 |     fn poll(self: Pin<&mut Self>, lw: &LocalWaker) -> Poll<Self::Output> {
    |                   ^^^^^^^^^^^^^^
    |
    = note: type must be `panic::AssertUnwindSafe<F>` or a type that dereferences to it
    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`

error[E0277]: the size for values of type `&mut panic::AssertUnwindSafe<F>` cannot be known at compilation time
   --> libstd/panic.rs:330:5
    |
330 | /     fn poll(self: Pin<&mut Self>, lw: &LocalWaker) -> Poll<Self::Output> {
331 | |         let pinned_field = unsafe { Pin::map_unchecked_mut(self, |x| &mut x.0) };
332 | |         F::poll(pinned_field, lw)
333 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&mut panic::AssertUnwindSafe<F>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::pin::Pin`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/path.rs:462:5
    |
462 | /     fn partial_cmp(&self, other: &PrefixComponent<'a>) -> Option<cmp::Ordering> {
463 | |         cmp::PartialOrd::partial_cmp(&self.parsed, &other.parsed)
464 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/path.rs:642:5
    |
642 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
643 | |         struct DebugHelper<'a>(&'a Path);
644 | |
645 | |         impl<'a> fmt::Debug for DebugHelper<'a> {
...   |
655 | |             .finish()
656 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/path.rs:642:5
    |
642 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
643 | |         struct DebugHelper<'a>(&'a Path);
644 | |
645 | |         impl<'a> fmt::Debug for DebugHelper<'a> {
...   |
655 | |             .finish()
656 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/path.rs:646:13
    |
646 | /             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
647 | |                 f.debug_list()
648 | |                     .entries(self.0.components())
649 | |                     .finish()
650 | |             }
    | |_____________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/path.rs:646:13
    |
646 | /             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
647 | |                 f.debug_list()
648 | |                     .entries(self.0.components())
649 | |                     .finish()
650 | |             }
    | |_____________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::Component<'b>` cannot be known at compilation time
   --> libstd/path.rs:764:5
    |
764 | /     fn parse_single_component<'b>(&self, comp: &'b [u8]) -> Option<Component<'b>> {
765 | |         match comp {
766 | |             b"." if self.prefix_verbatim() => Some(Component::CurDir),
767 | |             b"." => None, // . components are normalized away, except at
...   |
773 | |         }
774 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Component<'b>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `path::Component<'a>` cannot be known at compilation time
   --> libstd/path.rs:778:5
    |
778 | /     fn parse_next_component(&self) -> (usize, Option<Component<'a>>) {
779 | |         debug_assert!(self.front == State::Body);
780 | |         let (extra, comp) = match self.path.iter().position(|b| self.is_sep_byte(*b)) {
781 | |             None => (0, self.path),
...   |
784 | |         (comp.len() + extra, self.parse_single_component(comp))
785 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Component<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `path::Component<'a>` cannot be known at compilation time
   --> libstd/path.rs:789:5
    |
789 | /     fn parse_next_component_back(&self) -> (usize, Option<Component<'a>>) {
790 | |         debug_assert!(self.back == State::Body);
791 | |         let start = self.len_before_body();
792 | |         let (extra, comp) = match self.path[start..].iter().rposition(|b| self.is_sep_byte(*b)) {
...   |
796 | |         (comp.len() + extra, self.parse_single_component(comp))
797 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Component<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/path.rs:840:5
    |
840 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
841 | |         struct DebugHelper<'a>(&'a Path);
842 | |
843 | |         impl<'a> fmt::Debug for DebugHelper<'a> {
...   |
853 | |             .finish()
854 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/path.rs:840:5
    |
840 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
841 | |         struct DebugHelper<'a>(&'a Path);
842 | |
843 | |         impl<'a> fmt::Debug for DebugHelper<'a> {
...   |
853 | |             .finish()
854 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/path.rs:844:13
    |
844 | /             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
845 | |                 f.debug_list()
846 | |                     .entries(self.0.iter())
847 | |                     .finish()
848 | |             }
    | |_____________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/path.rs:844:13
    |
844 | /             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
845 | |                 f.debug_list()
846 | |                     .entries(self.0.iter())
847 | |                     .finish()
848 | |             }
    | |_____________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&'a ffi::os_str::OsStr` cannot be known at compilation time
   --> libstd/path.rs:895:5
    |
895 | /     fn next(&mut self) -> Option<&'a OsStr> {
896 | |         self.inner.next().map(Component::as_os_str)
897 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::os_str::OsStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&'a ffi::os_str::OsStr` cannot be known at compilation time
   --> libstd/path.rs:902:5
    |
902 | /     fn next_back(&mut self) -> Option<&'a OsStr> {
903 | |         self.inner.next_back().map(Component::as_os_str)
904 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&'a ffi::os_str::OsStr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `path::Component<'a>` cannot be known at compilation time
   --> libstd/path.rs:914:5
    |
914 | /     fn next(&mut self) -> Option<Component<'a>> {
915 | |         while !self.finished() {
916 | |             match self.front {
917 | |                 State::Prefix if self.prefix_len() > 0 => {
...   |
959 | |         None
960 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::Component<'a>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `path::Component<'a>` cannot be known at compilation time
    --> libstd/path.rs:965:5
     |
965  | /     fn next_back(&mut self) -> Option<Component<'a>> {
966  | |         while !self.finished() {
967  | |             match self.back {
968  | |                 State::Body if self.path.len() > self.len_before_body() => {
...    |
1006 | |         None
1007 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::Component<'a>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:1025:5
     |
1025 | /     fn partial_cmp(&self, other: &Components<'a>) -> Option<cmp::Ordering> {
1026 | |         Iterator::partial_cmp(self.clone(), other.clone())
1027 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `&path::Path` cannot be known at compilation time
    --> libstd/path.rs:1066:5
     |
1066 | /     fn next(&mut self) -> Option<Self::Item> {
1067 | |         let next = self.next;
1068 | |         self.next = next.and_then(Path::parent);
1069 | |         next
1070 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&path::Path`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
    --> libstd/path.rs:1138:5
     |
1138 | /     fn as_mut_vec(&mut self) -> &mut Vec<u8> {
1139 | |         unsafe { &mut *(self as *mut PathBuf as *mut Vec<u8>) }
1140 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u8`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `P` cannot be known at compilation time
    --> libstd/path.rs:1448:5
     |
1448 | /     fn from_iter<I: IntoIterator<Item = P>>(iter: I) -> PathBuf {
1449 | |         let mut buf = PathBuf::new();
1450 | |         buf.extend(iter);
1451 | |         buf
1452 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `P`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where P: core::marker::Sized` bound
     = note: required by `core::iter::IntoIterator`

error[E0277]: the size for values of type `P` cannot be known at compilation time
    --> libstd/path.rs:1457:5
     |
1457 | /     fn extend<I: IntoIterator<Item = P>>(&mut self, iter: I) {
1458 | |         for p in iter {
1459 | |             self.push(p.as_ref())
1460 | |         }
1461 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `P`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where P: core::marker::Sized` bound
     = note: required by `core::iter::IntoIterator`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/path.rs:1466:5
     |
1466 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
1467 | |         fmt::Debug::fmt(&**self, formatter)
1468 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/path.rs:1466:5
     |
1466 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
1467 | |         fmt::Debug::fmt(&**self, formatter)
1468 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:1592:5
     |
1592 | /     fn partial_cmp(&self, other: &PathBuf) -> Option<cmp::Ordering> {
1593 | |         self.components().partial_cmp(other.components())
1594 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `&str` cannot be known at compilation time
    --> libstd/path.rs:1734:5
     |
1734 | /     pub fn to_str(&self) -> Option<&str> {
1735 | |         self.inner.to_str()
1736 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&str`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `path::Prefix<'_>` cannot be known at compilation time
    --> libstd/path.rs:1839:5
     |
1839 | /     fn prefix(&self) -> Option<Prefix> {
1840 | |         self.components().prefix
1841 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::Prefix<'_>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `&path::Path` cannot be known at compilation time
    --> libstd/path.rs:1884:5
     |
1884 | /     pub fn parent(&self) -> Option<&Path> {
1885 | |         let mut comps = self.components();
1886 | |         let comp = comps.next_back();
1887 | |         comp.and_then(|p| {
...    |
1894 | |         })
1895 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&path::Path`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `&ffi::os_str::OsStr` cannot be known at compilation time
    --> libstd/path.rs:1949:5
     |
1949 | /     pub fn file_name(&self) -> Option<&OsStr> {
1950 | |         self.components().next_back().and_then(|p| {
1951 | |             match p {
1952 | |                 Component::Normal(p) => Some(p.as_ref()),
...    |
1955 | |         })
1956 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&ffi::os_str::OsStr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `&path::Path` cannot be known at compilation time
    --> libstd/path.rs:1987:5
     |
1987 | /     pub fn strip_prefix<P>(&self, base: P)
1988 | |                            -> Result<&Path, StripPrefixError>
1989 | |         where P: AsRef<Path>
1990 | |     {
1991 | |         self._strip_prefix(base.as_ref())
1992 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&path::Path`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::StripPrefixError` cannot be known at compilation time
    --> libstd/path.rs:1987:5
     |
1987 | /     pub fn strip_prefix<P>(&self, base: P)
1988 | |                            -> Result<&Path, StripPrefixError>
1989 | |         where P: AsRef<Path>
1990 | |     {
1991 | |         self._strip_prefix(base.as_ref())
1992 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::StripPrefixError`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&path::Path` cannot be known at compilation time
    --> libstd/path.rs:1994:5
     |
1994 | /     fn _strip_prefix(&self, base: &Path)
1995 | |                      -> Result<&Path, StripPrefixError> {
1996 | |         iter_after(self.components(), base.components())
1997 | |             .map(|c| c.as_path())
1998 | |             .ok_or(StripPrefixError(()))
1999 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&path::Path`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::StripPrefixError` cannot be known at compilation time
    --> libstd/path.rs:1994:5
     |
1994 | /     fn _strip_prefix(&self, base: &Path)
1995 | |                      -> Result<&Path, StripPrefixError> {
1996 | |         iter_after(self.components(), base.components())
1997 | |             .map(|c| c.as_path())
1998 | |             .ok_or(StripPrefixError(()))
1999 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::StripPrefixError`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&ffi::os_str::OsStr` cannot be known at compilation time
    --> libstd/path.rs:2073:5
     |
2073 | /     pub fn file_stem(&self) -> Option<&OsStr> {
2074 | |         self.file_name().map(split_file_at_dot).and_then(|(before, after)| before.or(after))
2075 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&ffi::os_str::OsStr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `&ffi::os_str::OsStr` cannot be known at compilation time
    --> libstd/path.rs:2099:5
     |
2099 | /     pub fn extension(&self) -> Option<&OsStr> {
2100 | |         self.file_name().map(split_file_at_dot).and_then(|(before, after)| before.and(after))
2101 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&ffi::os_str::OsStr`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `fs::Metadata` cannot be known at compilation time
    --> libstd/path.rs:2292:5
     |
2292 | /     pub fn metadata(&self) -> io::Result<fs::Metadata> {
2293 | |         fs::metadata(self)
2294 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `fs::Metadata`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/path.rs:2292:5
     |
2292 | /     pub fn metadata(&self) -> io::Result<fs::Metadata> {
2293 | |         fs::metadata(self)
2294 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::Metadata` cannot be known at compilation time
    --> libstd/path.rs:2312:5
     |
2312 | /     pub fn symlink_metadata(&self) -> io::Result<fs::Metadata> {
2313 | |         fs::symlink_metadata(self)
2314 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `fs::Metadata`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/path.rs:2312:5
     |
2312 | /     pub fn symlink_metadata(&self) -> io::Result<fs::Metadata> {
2313 | |         fs::symlink_metadata(self)
2314 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:2332:5
     |
2332 | /     pub fn canonicalize(&self) -> io::Result<PathBuf> {
2333 | |         fs::canonicalize(self)
2334 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/path.rs:2332:5
     |
2332 | /     pub fn canonicalize(&self) -> io::Result<PathBuf> {
2333 | |         fs::canonicalize(self)
2334 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
    --> libstd/path.rs:2351:5
     |
2351 | /     pub fn read_link(&self) -> io::Result<PathBuf> {
2352 | |         fs::read_link(self)
2353 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/path.rs:2351:5
     |
2351 | /     pub fn read_link(&self) -> io::Result<PathBuf> {
2352 | |         fs::read_link(self)
2353 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `fs::ReadDir` cannot be known at compilation time
    --> libstd/path.rs:2379:5
     |
2379 | /     pub fn read_dir(&self) -> io::Result<fs::ReadDir> {
2380 | |         fs::read_dir(self)
2381 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `fs::ReadDir`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/path.rs:2379:5
     |
2379 | /     pub fn read_dir(&self) -> io::Result<fs::ReadDir> {
2380 | |         fs::read_dir(self)
2381 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/path.rs:2489:5
     |
2489 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
2490 | |         fmt::Debug::fmt(&self.inner, formatter)
2491 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/path.rs:2489:5
     |
2489 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
2490 | |         fmt::Debug::fmt(&self.inner, formatter)
2491 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/path.rs:2521:5
     |
2521 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
2522 | |         fmt::Debug::fmt(&self.path, f)
2523 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/path.rs:2521:5
     |
2521 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
2522 | |         fmt::Debug::fmt(&self.path, f)
2523 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/path.rs:2528:5
     |
2528 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
2529 | |         self.path.inner.display(f)
2530 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/path.rs:2528:5
     |
2528 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
2529 | |         self.path.inner.display(f)
2530 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2554:5
     |
2554 | /     fn partial_cmp(&self, other: &Path) -> Option<cmp::Ordering> {
2555 | |         self.components().partial_cmp(other.components())
2556 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/path.rs:2716:5
     |
2716 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
2717 | |         self.description().fmt(f)
2718 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/path.rs:2716:5
     |
2716 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
2717 | |         self.description().fmt(f)
2718 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/process.rs:207:5
    |
207 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
208 | |         f.debug_struct("Child")
209 | |             .field("stdin", &self.stdin)
210 | |             .field("stdout", &self.stdout)
211 | |             .field("stderr", &self.stderr)
212 | |             .finish()
213 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/process.rs:207:5
    |
207 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
208 | |         f.debug_struct("Child")
209 | |             .field("stdin", &self.stdin)
210 | |             .field("stdout", &self.stdout)
211 | |             .field("stderr", &self.stderr)
212 | |             .finish()
213 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/process.rs:234:5
    |
234 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
235 | |         self.inner.write(buf)
236 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/process.rs:234:5
    |
234 | /     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
235 | |         self.inner.write(buf)
236 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/process.rs:238:5
    |
238 | /     fn flush(&mut self) -> io::Result<()> {
239 | |         Ok(())
240 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/process.rs:238:5
    |
238 | /     fn flush(&mut self) -> io::Result<()> {
239 | |         Ok(())
240 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/process.rs:259:5
    |
259 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
260 | |         f.pad("ChildStdin { .. }")
261 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/process.rs:259:5
    |
259 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
260 | |         f.pad("ChildStdin { .. }")
261 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/process.rs:281:5
    |
281 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
282 | |         self.inner.read(buf)
283 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/process.rs:281:5
    |
281 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
282 | |         self.inner.read(buf)
283 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/process.rs:306:5
    |
306 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
307 | |         f.pad("ChildStdout { .. }")
308 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/process.rs:306:5
    |
306 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
307 | |         f.pad("ChildStdout { .. }")
308 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/process.rs:328:5
    |
328 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
329 | |         self.inner.read(buf)
330 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/process.rs:328:5
    |
328 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
329 | |         self.inner.read(buf)
330 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/process.rs:353:5
    |
353 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
354 | |         f.pad("ChildStderr { .. }")
355 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/process.rs:353:5
    |
353 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
354 | |         f.pad("ChildStderr { .. }")
355 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `S` cannot be known at compilation time
   --> libstd/process.rs:519:5
    |
519 | /     pub fn args<I, S>(&mut self, args: I) -> &mut Command
520 | |         where I: IntoIterator<Item=S>, S: AsRef<OsStr>
521 | |     {
522 | |         for arg in args {
...   |
525 | |         self
526 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `S`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where S: core::marker::Sized` bound
    = note: required by `core::iter::IntoIterator`

error[E0277]: the size for values of type `(K, V)` cannot be known at compilation time
   --> libstd/process.rs:578:5
    |
578 | /     pub fn envs<I, K, V>(&mut self, vars: I) -> &mut Command
579 | |         where I: IntoIterator<Item=(K, V)>, K: AsRef<OsStr>, V: AsRef<OsStr>
580 | |     {
581 | |         for (ref key, ref val) in vars {
...   |
584 | |         self
585 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(K, V)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::iter::IntoIterator`

error[E0277]: the size for values of type `process::Stdio` cannot be known at compilation time
   --> libstd/process.rs:678:5
    |
678 | /     pub fn stdin<T: Into<Stdio>>(&mut self, cfg: T) -> &mut Command {
679 | |         self.inner.stdin(cfg.into().0);
680 | |         self
681 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `process::Stdio`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::convert::Into`

error[E0277]: the size for values of type `process::Stdio` cannot be known at compilation time
   --> libstd/process.rs:704:5
    |
704 | /     pub fn stdout<T: Into<Stdio>>(&mut self, cfg: T) -> &mut Command {
705 | |         self.inner.stdout(cfg.into().0);
706 | |         self
707 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `process::Stdio`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::convert::Into`

error[E0277]: the size for values of type `process::Stdio` cannot be known at compilation time
   --> libstd/process.rs:730:5
    |
730 | /     pub fn stderr<T: Into<Stdio>>(&mut self, cfg: T) -> &mut Command {
731 | |         self.inner.stderr(cfg.into().0);
732 | |         self
733 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `process::Stdio`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::convert::Into`

error[E0277]: the size for values of type `process::Child` cannot be known at compilation time
   --> libstd/process.rs:751:5
    |
751 | /     pub fn spawn(&mut self) -> io::Result<Child> {
752 | |         self.inner.spawn(imp::Stdio::Inherit, true).map(Child::from_inner)
753 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `process::Child`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/process.rs:751:5
    |
751 | /     pub fn spawn(&mut self) -> io::Result<Child> {
752 | |         self.inner.spawn(imp::Stdio::Inherit, true).map(Child::from_inner)
753 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `process::Output` cannot be known at compilation time
   --> libstd/process.rs:779:5
    |
779 | /     pub fn output(&mut self) -> io::Result<Output> {
780 | |         self.inner.spawn(imp::Stdio::MakePipe, false).map(Child::from_inner)
781 | |             .and_then(|p| p.wait_with_output())
782 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `process::Output`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/process.rs:779:5
    |
779 | /     pub fn output(&mut self) -> io::Result<Output> {
780 | |         self.inner.spawn(imp::Stdio::MakePipe, false).map(Child::from_inner)
781 | |             .and_then(|p| p.wait_with_output())
782 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `process::ExitStatus` cannot be known at compilation time
   --> libstd/process.rs:804:5
    |
804 | /     pub fn status(&mut self) -> io::Result<ExitStatus> {
805 | |         self.inner.spawn(imp::Stdio::Inherit, true).map(Child::from_inner)
806 | |                   .and_then(|mut p| p.wait())
807 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `process::ExitStatus`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/process.rs:804:5
    |
804 | /     pub fn status(&mut self) -> io::Result<ExitStatus> {
805 | |         self.inner.spawn(imp::Stdio::Inherit, true).map(Child::from_inner)
806 | |                   .and_then(|mut p| p.wait())
807 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/process.rs:815:5
    |
815 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
816 | |         self.inner.fmt(f)
817 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/process.rs:815:5
    |
815 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
816 | |         self.inner.fmt(f)
817 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/process.rs:856:5
    |
856 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
857 | |
858 | |         let stdout_utf8 = str::from_utf8(&self.stdout);
859 | |         let stdout_debug: &dyn fmt::Debug = match stdout_utf8 {
...   |
874 | |             .finish()
875 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/process.rs:856:5
    |
856 | /     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
857 | |
858 | |         let stdout_utf8 = str::from_utf8(&self.stdout);
859 | |         let stdout_debug: &dyn fmt::Debug = match stdout_utf8 {
...   |
874 | |             .finish()
875 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/process.rs:1012:5
     |
1012 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1013 | |         f.pad("Stdio { .. }")
1014 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/process.rs:1012:5
     |
1012 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1013 | |         f.pad("Stdio { .. }")
1014 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `i32` cannot be known at compilation time
    --> libstd/process.rs:1192:5
     |
1192 | /     pub fn code(&self) -> Option<i32> {
1193 | |         self.0.code()
1194 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `i32`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/process.rs:1209:5
     |
1209 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1210 | |         self.0.fmt(f)
1211 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/process.rs:1209:5
     |
1209 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1210 | |         self.0.fmt(f)
1211 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/process.rs:1282:5
     |
1282 | /     pub fn kill(&mut self) -> io::Result<()> {
1283 | |         self.handle.kill()
1284 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/process.rs:1282:5
     |
1282 | /     pub fn kill(&mut self) -> io::Result<()> {
1283 | |         self.handle.kill()
1284 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `process::ExitStatus` cannot be known at compilation time
    --> libstd/process.rs:1332:5
     |
1332 | /     pub fn wait(&mut self) -> io::Result<ExitStatus> {
1333 | |         drop(self.stdin.take());
1334 | |         self.handle.wait().map(ExitStatus)
1335 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::ExitStatus`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/process.rs:1332:5
     |
1332 | /     pub fn wait(&mut self) -> io::Result<ExitStatus> {
1333 | |         drop(self.stdin.take());
1334 | |         self.handle.wait().map(ExitStatus)
1335 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<process::ExitStatus>` cannot be known at compilation time
    --> libstd/process.rs:1372:5
     |
1372 | /     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {
1373 | |         Ok(self.handle.try_wait()?.map(ExitStatus))
1374 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<process::ExitStatus>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/process.rs:1372:5
     |
1372 | /     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {
1373 | |         Ok(self.handle.try_wait()?.map(ExitStatus))
1374 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `process::ExitStatus` cannot be known at compilation time
    --> libstd/process.rs:1372:5
     |
1372 | /     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {
1373 | |         Ok(self.handle.try_wait()?.map(ExitStatus))
1374 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::ExitStatus`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `process::Output` cannot be known at compilation time
    --> libstd/process.rs:1409:5
     |
1409 | /     pub fn wait_with_output(mut self) -> io::Result<Output> {
1410 | |         drop(self.stdin.take());
1411 | |
1412 | |         let (mut stdout, mut stderr) = (Vec::new(), Vec::new());
...    |
1434 | |         })
1435 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `process::Output`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/process.rs:1409:5
     |
1409 | /     pub fn wait_with_output(mut self) -> io::Result<Output> {
1410 | |         drop(self.stdin.take());
1411 | |
1412 | |         let (mut stdout, mut stderr) = (Vec::new(), Vec::new());
...    |
1434 | |         })
1435 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/process.rs:1601:5
     |
1601 | /     fn report(self) -> i32 {
1602 | |         match self {
1603 | |             Ok(()) => ().report(),
1604 | |             Err(err) => Err::<!, _>(err).report(),
1605 | |         }
1606 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `E` cannot be known at compilation time
    --> libstd/process.rs:1601:5
     |
1601 | /     fn report(self) -> i32 {
1602 | |         match self {
1603 | |             Ok(()) => ().report(),
1604 | |             Err(err) => Err::<!, _>(err).report(),
1605 | |         }
1606 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `E`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where E: core::marker::Sized` bound
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `!` cannot be known at compilation time
    --> libstd/process.rs:1616:5
     |
1616 | /     fn report(self) -> i32 {
1617 | |         let Err(err) = self;
1618 | |         eprintln!("Error: {:?}", err);
1619 | |         ExitCode::FAILURE.report()
1620 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `!`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `E` cannot be known at compilation time
    --> libstd/process.rs:1616:5
     |
1616 | /     fn report(self) -> i32 {
1617 | |         let Err(err) = self;
1618 | |         eprintln!("Error: {:?}", err);
1619 | |         ExitCode::FAILURE.report()
1620 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `E`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where E: core::marker::Sized` bound
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/oneshot.rs:100:5
    |
100 | /     pub fn send(&self, t: T) -> Result<(), T> {
101 | |         unsafe {
102 | |             // Sanity check
103 | |             match *self.upgrade.get() {
...   |
133 | |         }
134 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/oneshot.rs:100:5
    |
100 | /     pub fn send(&self, t: T) -> Result<(), T> {
101 | |         unsafe {
102 | |             // Sanity check
103 | |             match *self.upgrade.get() {
...   |
133 | |         }
134 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `time::Instant` cannot be known at compilation time
   --> libstd/sync/mpsc/oneshot.rs:147:5
    |
147 | /     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure<T>> {
148 | |         // Attempt to not block the thread (it's a little expensive). If it looks
149 | |         // like we're not empty, then immediately go through to `try_recv`.
150 | |         if self.state.load(Ordering::SeqCst) == EMPTY {
...   |
172 | |         self.try_recv()
173 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::Instant`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/oneshot.rs:147:5
    |
147 | /     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure<T>> {
148 | |         // Attempt to not block the thread (it's a little expensive). If it looks
149 | |         // like we're not empty, then immediately go through to `try_recv`.
150 | |         if self.state.load(Ordering::SeqCst) == EMPTY {
...   |
172 | |         self.try_recv()
173 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::oneshot::Failure<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/oneshot.rs:147:5
    |
147 | /     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure<T>> {
148 | |         // Attempt to not block the thread (it's a little expensive). If it looks
149 | |         // like we're not empty, then immediately go through to `try_recv`.
150 | |         if self.state.load(Ordering::SeqCst) == EMPTY {
...   |
172 | |         self.try_recv()
173 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::oneshot::Failure<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/oneshot.rs:175:5
    |
175 | /     pub fn try_recv(&self) -> Result<T, Failure<T>> {
176 | |         unsafe {
177 | |             match self.state.load(Ordering::SeqCst) {
178 | |                 EMPTY => Err(Empty),
...   |
214 | |         }
215 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::oneshot::Failure<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/oneshot.rs:175:5
    |
175 | /     pub fn try_recv(&self) -> Result<T, Failure<T>> {
176 | |         unsafe {
177 | |             match self.state.load(Ordering::SeqCst) {
178 | |                 EMPTY => Err(Empty),
...   |
214 | |         }
215 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::oneshot::Failure<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/sync/mpsc/oneshot.rs:279:5
    |
279 | /     pub fn can_recv(&self) -> Result<bool, Receiver<T>> {
280 | |         unsafe {
281 | |             match self.state.load(Ordering::SeqCst) {
282 | |                 EMPTY => Ok(false), // Welp, we tried
...   |
300 | |         }
301 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::Receiver<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/oneshot.rs:279:5
    |
279 | /     pub fn can_recv(&self) -> Result<bool, Receiver<T>> {
280 | |         unsafe {
281 | |             match self.state.load(Ordering::SeqCst) {
282 | |                 EMPTY => Ok(false), // Welp, we tried
...   |
300 | |         }
301 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::Receiver<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/sync/mpsc/oneshot.rs:346:5
    |
346 | /     pub fn abort_selection(&self) -> Result<bool, Receiver<T>> {
347 | |         let state = match self.state.load(Ordering::SeqCst) {
348 | |             // Each of these states means that no further activity will happen
349 | |             // with regard to abortion selection
...   |
388 | |         }
389 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::Receiver<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/oneshot.rs:346:5
    |
346 | /     pub fn abort_selection(&self) -> Result<bool, Receiver<T>> {
347 | |         let state = match self.state.load(Ordering::SeqCst) {
348 | |             // Each of these states means that no further activity will happen
349 | |             // with regard to abortion selection
...   |
388 | |         }
389 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::Receiver<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/select.rs:272:5
    |
272 |     pub fn recv(&mut self) -> Result<T, RecvError> { self.rx.recv() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::RecvError` cannot be known at compilation time
   --> libstd/sync/mpsc/select.rs:272:5
    |
272 |     pub fn recv(&mut self) -> Result<T, RecvError> { self.rx.recv() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::RecvError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `*mut sync::mpsc::select::Handle<'static, ()>` cannot be known at compilation time
   --> libstd/sync/mpsc/select.rs:344:5
    |
344 | /     fn next(&mut self) -> Option<*mut Handle<'static, ()>> {
345 | |         if self.cur.is_null() {
346 | |             None
347 | |         } else {
...   |
351 | |         }
352 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `*mut sync::mpsc::select::Handle<'static, ()>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/select.rs:356:5
    |
356 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
357 | |         f.debug_struct("Select").finish()
358 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mpsc/select.rs:356:5
    |
356 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
357 | |         f.debug_struct("Select").finish()
358 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/select.rs:362:5
    |
362 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
363 | |         f.debug_struct("Handle").finish()
364 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mpsc/select.rs:362:5
    |
362 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
363 | |         f.debug_struct("Handle").finish()
364 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::blocking::SignalToken` cannot be known at compilation time
   --> libstd/sync/mpsc/shared.rs:100:5
    |
100 | /     pub fn inherit_blocker(&self,
101 | |                            token: Option<SignalToken>,
102 | |                            guard: MutexGuard<()>) {
103 | |         token.map(|token| {
...   |
135 | |         drop(guard);
136 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::blocking::SignalToken`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/shared.rs:138:5
    |
138 | /     pub fn send(&self, t: T) -> Result<(), T> {
139 | |         // See Port::drop for what's going on
140 | |         if self.port_dropped.load(Ordering::SeqCst) { return Err(t) }
141 | |
...   |
220 | |         Ok(())
221 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/shared.rs:138:5
    |
138 | /     pub fn send(&self, t: T) -> Result<(), T> {
139 | |         // See Port::drop for what's going on
140 | |         if self.port_dropped.load(Ordering::SeqCst) { return Err(t) }
141 | |
...   |
220 | |         Ok(())
221 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `time::Instant` cannot be known at compilation time
   --> libstd/sync/mpsc/shared.rs:223:5
    |
223 | /     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure> {
224 | |         // This code is essentially the exact same as that found in the stream
225 | |         // case (see stream.rs)
226 | |         match self.try_recv() {
...   |
246 | |         }
247 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::Instant`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/shared.rs:223:5
    |
223 | /     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure> {
224 | |         // This code is essentially the exact same as that found in the stream
225 | |         // case (see stream.rs)
226 | |         match self.try_recv() {
...   |
246 | |         }
247 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::shared::Failure` cannot be known at compilation time
   --> libstd/sync/mpsc/shared.rs:223:5
    |
223 | /     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure> {
224 | |         // This code is essentially the exact same as that found in the stream
225 | |         // case (see stream.rs)
226 | |         match self.try_recv() {
...   |
246 | |         }
247 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::shared::Failure`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/shared.rs:275:5
    |
275 | /     pub fn try_recv(&self) -> Result<T, Failure> {
276 | |         let ret = match self.queue.pop() {
277 | |             mpsc::Data(t) => Some(t),
278 | |             mpsc::Empty => None,
...   |
342 | |         }
343 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::shared::Failure` cannot be known at compilation time
   --> libstd/sync/mpsc/shared.rs:275:5
    |
275 | /     pub fn try_recv(&self) -> Result<T, Failure> {
276 | |         let ret = match self.queue.pop() {
277 | |             mpsc::Data(t) => Some(t),
278 | |             mpsc::Empty => None,
...   |
342 | |         }
343 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::shared::Failure`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/stream.rs:103:5
    |
103 | /     pub fn send(&self, t: T) -> Result<(), T> {
104 | |         // If the other port has deterministically gone away, then definitely
105 | |         // must return the data back up the stack. Otherwise, the data is
106 | |         // considered as being sent.
...   |
113 | |         Ok(())
114 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/stream.rs:103:5
    |
103 | /     pub fn send(&self, t: T) -> Result<(), T> {
104 | |         // If the other port has deterministically gone away, then definitely
105 | |         // must return the data back up the stack. Otherwise, the data is
106 | |         // considered as being sent.
...   |
113 | |         Ok(())
114 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/stream.rs:170:5
    |
170 | /     fn decrement(&self, token: SignalToken) -> Result<(), SignalToken> {
171 | |         assert_eq!(self.queue.producer_addition().to_wake.load(Ordering::SeqCst), 0);
172 | |         let ptr = unsafe { token.cast_to_usize() };
173 | |         self.queue.producer_addition().to_wake.store(ptr, Ordering::SeqCst);
...   |
190 | |         Err(unsafe { SignalToken::cast_from_usize(ptr) })
191 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::blocking::SignalToken` cannot be known at compilation time
   --> libstd/sync/mpsc/stream.rs:170:5
    |
170 | /     fn decrement(&self, token: SignalToken) -> Result<(), SignalToken> {
171 | |         assert_eq!(self.queue.producer_addition().to_wake.load(Ordering::SeqCst), 0);
172 | |         let ptr = unsafe { token.cast_to_usize() };
173 | |         self.queue.producer_addition().to_wake.store(ptr, Ordering::SeqCst);
...   |
190 | |         Err(unsafe { SignalToken::cast_from_usize(ptr) })
191 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::blocking::SignalToken`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `time::Instant` cannot be known at compilation time
   --> libstd/sync/mpsc/stream.rs:193:5
    |
193 | /     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure<T>> {
194 | |         // Optimistic preflight check (scheduling is expensive).
195 | |         match self.try_recv() {
196 | |             Err(Empty) => {}
...   |
225 | |         }
226 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::Instant`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/stream.rs:193:5
    |
193 | /     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure<T>> {
194 | |         // Optimistic preflight check (scheduling is expensive).
195 | |         match self.try_recv() {
196 | |             Err(Empty) => {}
...   |
225 | |         }
226 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::stream::Failure<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/stream.rs:193:5
    |
193 | /     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure<T>> {
194 | |         // Optimistic preflight check (scheduling is expensive).
195 | |         match self.try_recv() {
196 | |             Err(Empty) => {}
...   |
225 | |         }
226 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::stream::Failure<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/stream.rs:228:5
    |
228 | /     pub fn try_recv(&self) -> Result<T, Failure<T>> {
229 | |         match self.queue.pop() {
230 | |             // If we stole some data, record to that effect (this will be
231 | |             // factored into cnt later on).
...   |
287 | |         }
288 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::stream::Failure<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/stream.rs:228:5
    |
228 | /     pub fn try_recv(&self) -> Result<T, Failure<T>> {
229 | |         match self.queue.pop() {
230 | |             // If we stole some data, record to that effect (this will be
231 | |             // factored into cnt later on).
...   |
287 | |         }
288 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::stream::Failure<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/sync/mpsc/stream.rs:353:5
    |
353 | /     pub fn can_recv(&self) -> Result<bool, Receiver<T>> {
354 | |         // We peek at the queue to see if there's anything on it, and we use
355 | |         // this return value to determine if we should pop from the queue and
356 | |         // upgrade this channel immediately. If it looks like we've got an
...   |
368 | |         }
369 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::Receiver<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/stream.rs:353:5
    |
353 | /     pub fn can_recv(&self) -> Result<bool, Receiver<T>> {
354 | |         // We peek at the queue to see if there's anything on it, and we use
355 | |         // this return value to determine if we should pop from the queue and
356 | |         // upgrade this channel immediately. If it looks like we've got an
...   |
368 | |         }
369 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::Receiver<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/sync/mpsc/stream.rs:408:5
    |
408 | /     pub fn abort_selection(&self,
409 | |                            was_upgrade: bool) -> Result<bool, Receiver<T>> {
410 | |         // If we're aborting selection after upgrading from a oneshot, then
411 | |         // we're guarantee that no one is waiting. The only way that we could
...   |
491 | |         }
492 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::Receiver<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/stream.rs:408:5
    |
408 | /     pub fn abort_selection(&self,
409 | |                            was_upgrade: bool) -> Result<bool, Receiver<T>> {
410 | |         // If we're aborting selection after upgrading from a oneshot, then
411 | |         // we're guarantee that no one is waiting. The only way that we could
...   |
491 | |         }
492 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::Receiver<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:212:5
    |
212 | /     pub fn send(&self, t: T) -> Result<(), T> {
213 | |         let mut guard = self.acquire_send_slot();
214 | |         if guard.disconnected { return Err(t) }
215 | |         guard.buf.enqueue(t);
...   |
237 | |         }
238 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:212:5
    |
212 | /     pub fn send(&self, t: T) -> Result<(), T> {
213 | |         let mut guard = self.acquire_send_slot();
214 | |         if guard.disconnected { return Err(t) }
215 | |         guard.buf.enqueue(t);
...   |
237 | |         }
238 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:240:5
    |
240 | /     pub fn try_send(&self, t: T) -> Result<(), super::TrySendError<T>> {
241 | |         let mut guard = self.lock.lock().unwrap();
242 | |         if guard.disconnected {
243 | |             Err(super::TrySendError::Disconnected(t))
...   |
270 | |         }
271 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::TrySendError<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:240:5
    |
240 | /     pub fn try_send(&self, t: T) -> Result<(), super::TrySendError<T>> {
241 | |         let mut guard = self.lock.lock().unwrap();
242 | |         if guard.disconnected {
243 | |             Err(super::TrySendError::Disconnected(t))
...   |
270 | |         }
271 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::TrySendError<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `time::Instant` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:277:5
    |
277 | /     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure> {
278 | |         let mut guard = self.lock.lock().unwrap();
279 | |
280 | |         let mut woke_up_after_waiting = false;
...   |
308 | |         Ok(ret)
309 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::Instant`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:277:5
    |
277 | /     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure> {
278 | |         let mut guard = self.lock.lock().unwrap();
279 | |
280 | |         let mut woke_up_after_waiting = false;
...   |
308 | |         Ok(ret)
309 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::sync::Failure` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:277:5
    |
277 | /     pub fn recv(&self, deadline: Option<Instant>) -> Result<T, Failure> {
278 | |         let mut guard = self.lock.lock().unwrap();
279 | |
280 | |         let mut woke_up_after_waiting = false;
...   |
308 | |         Ok(ret)
309 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::sync::Failure`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:311:5
    |
311 | /     pub fn try_recv(&self) -> Result<T, Failure> {
312 | |         let mut guard = self.lock.lock().unwrap();
313 | |
314 | |         // Easy cases first
...   |
321 | |         ret
322 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::sync::Failure` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:311:5
    |
311 | /     pub fn try_recv(&self) -> Result<T, Failure> {
312 | |         let mut guard = self.lock.lock().unwrap();
313 | |
314 | |         // Easy cases first
...   |
321 | |         ret
322 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::sync::Failure`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::blocking::SignalToken` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:514:5
    |
514 | /     fn dequeue(&mut self) -> Option<SignalToken> {
515 | |         if self.head.is_null() {
516 | |             return None
517 | |         }
...   |
526 | |         }
527 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::blocking::SignalToken`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
  --> libstd/sync/mpsc/mpsc_queue.rs:61:5
   |
61 | /     unsafe fn new(v: Option<T>) -> *mut Node<T> {
62 | |         Box::into_raw(box Node {
63 | |             next: AtomicPtr::new(ptr::null_mut()),
64 | |             value: v,
65 | |         })
66 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `T`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where T: core::marker::Sized` bound
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mpsc/spsc_queue.rs:169:5
    |
169 | /     pub fn pop(&self) -> Option<T> {
170 | |         unsafe {
171 | |             // The `tail` node is not actually a used node, but rather a
172 | |             // sentinel from where we should start popping from. Hence, look at
...   |
202 | |         }
203 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: core::marker::Sized` bound
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `&mut T` cannot be known at compilation time
   --> libstd/sync/mpsc/spsc_queue.rs:212:5
    |
212 | /     pub fn peek(&self) -> Option<&mut T> {
213 | |         // This is essentially the same as above with all the popping bits
214 | |         // stripped out.
215 | |         unsafe {
...   |
219 | |         }
220 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&mut T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:824:5
    |
824 | /     pub fn send(&self, t: T) -> Result<(), SendError<T>> {
825 | |         let (new_inner, ret) = match *unsafe { self.inner() } {
826 | |             Flavor::Oneshot(ref p) => {
827 | |                 if !p.sent() {
...   |
858 | |         ret.map_err(SendError)
859 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::SendError<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:824:5
    |
824 | /     pub fn send(&self, t: T) -> Result<(), SendError<T>> {
825 | |         let (new_inner, ret) = match *unsafe { self.inner() } {
826 | |             Flavor::Oneshot(ref p) => {
827 | |                 if !p.sent() {
...   |
858 | |         ret.map_err(SendError)
859 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::SendError<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:923:5
    |
923 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
924 | |         f.debug_struct("Sender").finish()
925 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:923:5
    |
923 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
924 | |         f.debug_struct("Sender").finish()
925 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:977:5
    |
977 | /     pub fn send(&self, t: T) -> Result<(), SendError<T>> {
978 | |         self.inner.send(t).map_err(SendError)
979 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::SendError<T>` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:977:5
    |
977 | /     pub fn send(&self, t: T) -> Result<(), SendError<T>> {
978 | |         self.inner.send(t).map_err(SendError)
979 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::SendError<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1031:5
     |
1031 | /     pub fn try_send(&self, t: T) -> Result<(), TrySendError<T>> {
1032 | |         self.inner.try_send(t)
1033 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::TrySendError<T>` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1031:5
     |
1031 | /     pub fn try_send(&self, t: T) -> Result<(), TrySendError<T>> {
1032 | |         self.inner.try_send(t)
1033 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::TrySendError<T>`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1053:5
     |
1053 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1054 | |         f.debug_struct("SyncSender").finish()
1055 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1053:5
     |
1053 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1054 | |         f.debug_struct("SyncSender").finish()
1055 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1091:5
     |
1091 | /     pub fn try_recv(&self) -> Result<T, TryRecvError> {
1092 | |         loop {
1093 | |             let new_port = match *unsafe { self.inner() } {
1094 | |                 Flavor::Oneshot(ref p) => {
...    |
1137 | |         }
1138 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::TryRecvError` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1091:5
     |
1091 | /     pub fn try_recv(&self) -> Result<T, TryRecvError> {
1092 | |         loop {
1093 | |             let new_port = match *unsafe { self.inner() } {
1094 | |                 Flavor::Oneshot(ref p) => {
...    |
1137 | |         }
1138 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::TryRecvError`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1198:5
     |
1198 | /     pub fn recv(&self) -> Result<T, RecvError> {
1199 | |         loop {
1200 | |             let new_port = match *unsafe { self.inner() } {
1201 | |                 Flavor::Oneshot(ref p) => {
...    |
1229 | |         }
1230 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::RecvError` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1198:5
     |
1198 | /     pub fn recv(&self) -> Result<T, RecvError> {
1199 | |         loop {
1200 | |             let new_port = match *unsafe { self.inner() } {
1201 | |                 Flavor::Oneshot(ref p) => {
...    |
1229 | |         }
1230 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::RecvError`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1319:5
     |
1319 | /     pub fn recv_timeout(&self, timeout: Duration) -> Result<T, RecvTimeoutError> {
1320 | |         // Do an optimistic try_recv to avoid the performance impact of
1321 | |         // Instant::now() in the full-channel case.
1322 | |         match self.try_recv() {
...    |
1329 | |         }
1330 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::RecvTimeoutError` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1319:5
     |
1319 | /     pub fn recv_timeout(&self, timeout: Duration) -> Result<T, RecvTimeoutError> {
1320 | |         // Do an optimistic try_recv to avoid the performance impact of
1321 | |         // Instant::now() in the full-channel case.
1322 | |         match self.try_recv() {
...    |
1329 | |         }
1330 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::RecvTimeoutError`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1393:5
     |
1393 | /     pub fn recv_deadline(&self, deadline: Instant) -> Result<T, RecvTimeoutError> {
1394 | |         use self::RecvTimeoutError::*;
1395 | |
1396 | |         loop {
...    |
1441 | |         }
1442 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mpsc::RecvTimeoutError` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1393:5
     |
1393 | /     pub fn recv_deadline(&self, deadline: Instant) -> Result<T, RecvTimeoutError> {
1394 | |         use self::RecvTimeoutError::*;
1395 | |
1396 | |         loop {
...    |
1441 | |         }
1442 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `sync::mpsc::RecvTimeoutError`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1596:5
     |
1596 |     fn next(&mut self) -> Option<T> { self.rx.recv().ok() }
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1603:5
     |
1603 |     fn next(&mut self) -> Option<T> { self.rx.try_recv().ok() }
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `T` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1617:5
     |
1617 |     fn next(&mut self) -> Option<T> { self.rx.recv().ok() }
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `T`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = help: consider adding a `where T: core::marker::Sized` bound
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1644:5
     |
1644 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1645 | |         f.debug_struct("Receiver").finish()
1646 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1644:5
     |
1644 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1645 | |         f.debug_struct("Receiver").finish()
1646 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1651:5
     |
1651 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1652 | |         "SendError(..)".fmt(f)
1653 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1651:5
     |
1651 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1652 | |         "SendError(..)".fmt(f)
1653 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1658:5
     |
1658 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1659 | |         "sending on a closed channel".fmt(f)
1660 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1658:5
     |
1658 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1659 | |         "sending on a closed channel".fmt(f)
1660 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&dyn error::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1669:5
     |
1669 | /     fn cause(&self) -> Option<&dyn error::Error> {
1670 | |         None
1671 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&dyn error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1676:5
     |
1676 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1677 | |         match *self {
1678 | |             TrySendError::Full(..) => "Full(..)".fmt(f),
1679 | |             TrySendError::Disconnected(..) => "Disconnected(..)".fmt(f),
1680 | |         }
1681 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1676:5
     |
1676 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1677 | |         match *self {
1678 | |             TrySendError::Full(..) => "Full(..)".fmt(f),
1679 | |             TrySendError::Disconnected(..) => "Disconnected(..)".fmt(f),
1680 | |         }
1681 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1686:5
     |
1686 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1687 | |         match *self {
1688 | |             TrySendError::Full(..) => {
1689 | |                 "sending on a full channel".fmt(f)
...    |
1694 | |         }
1695 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1686:5
     |
1686 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1687 | |         match *self {
1688 | |             TrySendError::Full(..) => {
1689 | |                 "sending on a full channel".fmt(f)
...    |
1694 | |         }
1695 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&dyn error::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1712:5
     |
1712 | /     fn cause(&self) -> Option<&dyn error::Error> {
1713 | |         None
1714 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&dyn error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1728:5
     |
1728 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1729 | |         "receiving on a closed channel".fmt(f)
1730 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1728:5
     |
1728 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1729 | |         "receiving on a closed channel".fmt(f)
1730 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&dyn error::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1740:5
     |
1740 | /     fn cause(&self) -> Option<&dyn error::Error> {
1741 | |         None
1742 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&dyn error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1747:5
     |
1747 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1748 | |         match *self {
1749 | |             TryRecvError::Empty => {
1750 | |                 "receiving on an empty channel".fmt(f)
...    |
1755 | |         }
1756 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1747:5
     |
1747 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1748 | |         match *self {
1749 | |             TryRecvError::Empty => {
1750 | |                 "receiving on an empty channel".fmt(f)
...    |
1755 | |         }
1756 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&dyn error::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1773:5
     |
1773 | /     fn cause(&self) -> Option<&dyn error::Error> {
1774 | |         None
1775 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&dyn error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1789:5
     |
1789 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1790 | |         match *self {
1791 | |             RecvTimeoutError::Timeout => {
1792 | |                 "timed out waiting on channel".fmt(f)
...    |
1797 | |         }
1798 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1789:5
     |
1789 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
1790 | |         match *self {
1791 | |             RecvTimeoutError::Timeout => {
1792 | |                 "timed out waiting on channel".fmt(f)
...    |
1797 | |         }
1798 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&dyn error::Error` cannot be known at compilation time
    --> libstd/sync/mpsc/mod.rs:1814:5
     |
1814 | /     fn cause(&self) -> Option<&dyn error::Error> {
1815 | |         None
1816 | |     }
     | |_____^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&dyn error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sync/barrier.rs:72:5
   |
72 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
73 | |         f.pad("Barrier { .. }")
74 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sync/barrier.rs:72:5
   |
72 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
73 | |         f.pad("Barrier { .. }")
74 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/barrier.rs:164:5
    |
164 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
165 | |         f.debug_struct("BarrierWaitResult")
166 | |             .field("is_leader", &self.is_leader())
167 | |             .finish()
168 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/barrier.rs:164:5
    |
164 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
165 | |         f.debug_struct("BarrierWaitResult")
166 | |             .field("is_leader", &self.is_leader())
167 | |             .finish()
168 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mutex::MutexGuard<'a, T>` cannot be known at compilation time
   --> libstd/sync/condvar.rs:209:5
    |
209 | /     pub fn wait<'a, T>(&self, guard: MutexGuard<'a, T>)
210 | |                        -> LockResult<MutexGuard<'a, T>> {
211 | |         let poisoned = unsafe {
212 | |             let lock = mutex::guard_lock(&guard);
...   |
221 | |         }
222 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mutex::MutexGuard<'a, T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<sync::mutex::MutexGuard<'a, T>>` cannot be known at compilation time
   --> libstd/sync/condvar.rs:209:5
    |
209 | /     pub fn wait<'a, T>(&self, guard: MutexGuard<'a, T>)
210 | |                        -> LockResult<MutexGuard<'a, T>> {
211 | |         let poisoned = unsafe {
212 | |             let lock = mutex::guard_lock(&guard);
...   |
221 | |         }
222 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<sync::mutex::MutexGuard<'a, T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mutex::MutexGuard<'a, T>` cannot be known at compilation time
   --> libstd/sync/condvar.rs:271:5
    |
271 | /     pub fn wait_until<'a, T, F>(&self, mut guard: MutexGuard<'a, T>,
272 | |                                 mut condition: F)
273 | |                                 -> LockResult<MutexGuard<'a, T>>
274 | |                                 where F: FnMut(&mut T) -> bool {
...   |
278 | |         Ok(guard)
279 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mutex::MutexGuard<'a, T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<sync::mutex::MutexGuard<'a, T>>` cannot be known at compilation time
   --> libstd/sync/condvar.rs:271:5
    |
271 | /     pub fn wait_until<'a, T, F>(&self, mut guard: MutexGuard<'a, T>,
272 | |                                 mut condition: F)
273 | |                                 -> LockResult<MutexGuard<'a, T>>
274 | |                                 where F: FnMut(&mut T) -> bool {
...   |
278 | |         Ok(guard)
279 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<sync::mutex::MutexGuard<'a, T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(sync::mutex::MutexGuard<'a, T>, bool)` cannot be known at compilation time
   --> libstd/sync/condvar.rs:337:5
    |
337 | /     pub fn wait_timeout_ms<'a, T>(&self, guard: MutexGuard<'a, T>, ms: u32)
338 | |                                   -> LockResult<(MutexGuard<'a, T>, bool)> {
339 | |         let res = self.wait_timeout(guard, Duration::from_millis(ms as u64));
340 | |         poison::map_result(res, |(a, b)| {
341 | |             (a, !b.timed_out())
342 | |         })
343 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(sync::mutex::MutexGuard<'a, T>, bool)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<(sync::mutex::MutexGuard<'a, T>, bool)>` cannot be known at compilation time
   --> libstd/sync/condvar.rs:337:5
    |
337 | /     pub fn wait_timeout_ms<'a, T>(&self, guard: MutexGuard<'a, T>, ms: u32)
338 | |                                   -> LockResult<(MutexGuard<'a, T>, bool)> {
339 | |         let res = self.wait_timeout(guard, Duration::from_millis(ms as u64));
340 | |         poison::map_result(res, |(a, b)| {
341 | |             (a, !b.timed_out())
342 | |         })
343 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<(sync::mutex::MutexGuard<'a, T>, bool)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(sync::mutex::MutexGuard<'a, T>, sync::condvar::WaitTimeoutResult)` cannot be known at compilation time
   --> libstd/sync/condvar.rs:409:5
    |
409 | /     pub fn wait_timeout<'a, T>(&self, guard: MutexGuard<'a, T>,
410 | |                                dur: Duration)
411 | |                                -> LockResult<(MutexGuard<'a, T>, WaitTimeoutResult)> {
412 | |         let (poisoned, result) = unsafe {
...   |
422 | |         }
423 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(sync::mutex::MutexGuard<'a, T>, sync::condvar::WaitTimeoutResult)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<(sync::mutex::MutexGuard<'a, T>, sync::condvar::WaitTimeoutResult)>` cannot be known at compilation time
   --> libstd/sync/condvar.rs:409:5
    |
409 | /     pub fn wait_timeout<'a, T>(&self, guard: MutexGuard<'a, T>,
410 | |                                dur: Duration)
411 | |                                -> LockResult<(MutexGuard<'a, T>, WaitTimeoutResult)> {
412 | |         let (poisoned, result) = unsafe {
...   |
422 | |         }
423 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<(sync::mutex::MutexGuard<'a, T>, sync::condvar::WaitTimeoutResult)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(sync::mutex::MutexGuard<'a, T>, sync::condvar::WaitTimeoutResult)` cannot be known at compilation time
   --> libstd/sync/condvar.rs:482:5
    |
482 | /     pub fn wait_timeout_until<'a, T, F>(&self, mut guard: MutexGuard<'a, T>,
483 | |                                         dur: Duration, mut condition: F)
484 | |                                         -> LockResult<(MutexGuard<'a, T>, WaitTimeoutResult)>
485 | |                                         where F: FnMut(&mut T) -> bool {
...   |
496 | |         }
497 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(sync::mutex::MutexGuard<'a, T>, sync::condvar::WaitTimeoutResult)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<(sync::mutex::MutexGuard<'a, T>, sync::condvar::WaitTimeoutResult)>` cannot be known at compilation time
   --> libstd/sync/condvar.rs:482:5
    |
482 | /     pub fn wait_timeout_until<'a, T, F>(&self, mut guard: MutexGuard<'a, T>,
483 | |                                         dur: Duration, mut condition: F)
484 | |                                         -> LockResult<(MutexGuard<'a, T>, WaitTimeoutResult)>
485 | |                                         where F: FnMut(&mut T) -> bool {
...   |
496 | |         }
497 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<(sync::mutex::MutexGuard<'a, T>, sync::condvar::WaitTimeoutResult)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/condvar.rs:602:5
    |
602 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
603 | |         f.pad("Condvar { .. }")
604 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/condvar.rs:602:5
    |
602 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
603 | |         f.pad("Condvar { .. }")
604 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mutex::MutexGuard<'_, T>` cannot be known at compilation time
   --> libstd/sync/mutex.rs:228:5
    |
228 | /     pub fn lock(&self) -> LockResult<MutexGuard<T>> {
229 | |         unsafe {
230 | |             self.inner.raw_lock();
231 | |             MutexGuard::new(self)
232 | |         }
233 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mutex::MutexGuard<'_, T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<sync::mutex::MutexGuard<'_, T>>` cannot be known at compilation time
   --> libstd/sync/mutex.rs:228:5
    |
228 | /     pub fn lock(&self) -> LockResult<MutexGuard<T>> {
229 | |         unsafe {
230 | |             self.inner.raw_lock();
231 | |             MutexGuard::new(self)
232 | |         }
233 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<sync::mutex::MutexGuard<'_, T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mutex::MutexGuard<'_, T>` cannot be known at compilation time
   --> libstd/sync/mutex.rs:271:5
    |
271 | /     pub fn try_lock(&self) -> TryLockResult<MutexGuard<T>> {
272 | |         unsafe {
273 | |             if self.inner.try_lock() {
274 | |                 Ok(MutexGuard::new(self)?)
...   |
278 | |         }
279 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mutex::MutexGuard<'_, T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::TryLockError<sync::mutex::MutexGuard<'_, T>>` cannot be known at compilation time
   --> libstd/sync/mutex.rs:271:5
    |
271 | /     pub fn try_lock(&self) -> TryLockResult<MutexGuard<T>> {
272 | |         unsafe {
273 | |             if self.inner.try_lock() {
274 | |                 Ok(MutexGuard::new(self)?)
...   |
278 | |         }
279 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::TryLockError<sync::mutex::MutexGuard<'_, T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<T>` cannot be known at compilation time
   --> libstd/sync/mutex.rs:324:5
    |
324 | /     pub fn into_inner(self) -> LockResult<T> where T: Sized {
325 | |         // We know statically that there are no outstanding references to
326 | |         // `self` so there's no need to lock the inner mutex.
327 | |         //
...   |
342 | |         }
343 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/mutex.rs:324:5
    |
324 | /     pub fn into_inner(self) -> LockResult<T> where T: Sized {
325 | |         // We know statically that there are no outstanding references to
326 | |         // `self` so there's no need to lock the inner mutex.
327 | |         //
...   |
342 | |         }
343 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `realstd::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: realstd::marker::Sized` bound
note: required by `sys_common::poison::PoisonError`
   --> libstd/sys_common/poison.rs:96:1
    |
96  | pub struct PoisonError<T> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the size for values of type `&mut T` cannot be known at compilation time
   --> libstd/sync/mutex.rs:365:5
    |
365 | /     pub fn get_mut(&mut self) -> LockResult<&mut T> {
366 | |         // We know statically that there are no other references to `self`, so
367 | |         // there's no need to lock the inner mutex.
368 | |         let data = unsafe { &mut *self.data.get() };
369 | |         poison::map_result(self.poison.borrow(), |_| data )
370 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&mut T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<&mut T>` cannot be known at compilation time
   --> libstd/sync/mutex.rs:365:5
    |
365 | /     pub fn get_mut(&mut self) -> LockResult<&mut T> {
366 | |         // We know statically that there are no other references to `self`, so
367 | |         // there's no need to lock the inner mutex.
368 | |         let data = unsafe { &mut *self.data.get() };
369 | |         poison::map_result(self.poison.borrow(), |_| data )
370 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<&mut T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mutex.rs:404:5
    |
404 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
405 | |         match self.try_lock() {
406 | |             Ok(guard) => f.debug_struct("Mutex").field("data", &&*guard).finish(),
407 | |             Err(TryLockError::Poisoned(err)) => {
...   |
418 | |         }
419 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mutex.rs:404:5
    |
404 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
405 | |         match self.try_lock() {
406 | |             Ok(guard) => f.debug_struct("Mutex").field("data", &&*guard).finish(),
407 | |             Err(TryLockError::Poisoned(err)) => {
...   |
418 | |         }
419 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mutex.rs:413:21
    |
413 |                     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str("<locked>") }
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mutex.rs:413:21
    |
413 |                     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str("<locked>") }
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::mutex::MutexGuard<'mutex, T>` cannot be known at compilation time
   --> libstd/sync/mutex.rs:423:5
    |
423 | /     unsafe fn new(lock: &'mutex Mutex<T>) -> LockResult<MutexGuard<'mutex, T>> {
424 | |         poison::map_result(lock.poison.borrow(), |guard| {
425 | |             MutexGuard {
426 | |                 __lock: lock,
...   |
429 | |         })
430 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::mutex::MutexGuard<'mutex, T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<sync::mutex::MutexGuard<'mutex, T>>` cannot be known at compilation time
   --> libstd/sync/mutex.rs:423:5
    |
423 | /     unsafe fn new(lock: &'mutex Mutex<T>) -> LockResult<MutexGuard<'mutex, T>> {
424 | |         poison::map_result(lock.poison.borrow(), |guard| {
425 | |             MutexGuard {
426 | |                 __lock: lock,
...   |
429 | |         })
430 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<sync::mutex::MutexGuard<'mutex, T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mutex.rs:462:5
    |
462 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
463 | |         f.debug_struct("MutexGuard")
464 | |             .field("lock", &self.__lock)
465 | |             .finish()
466 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mutex.rs:462:5
    |
462 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
463 | |         f.debug_struct("MutexGuard")
464 | |             .field("lock", &self.__lock)
465 | |             .finish()
466 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mutex.rs:471:5
    |
471 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
472 | |         (**self).fmt(f)
473 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mutex.rs:471:5
    |
471 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
472 | |         (**self).fmt(f)
473 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/once.rs:223:5
    |
223 | /     pub fn call_once<F>(&self, f: F) where F: FnOnce() {
224 | |         // Fast path check
225 | |         if self.is_completed() {
226 | |             return;
...   |
230 | |         self.call_inner(false, &mut |_| f.take().unwrap()());
231 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::FnOnce`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/once.rs:444:5
    |
444 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
445 | |         f.pad("Once { .. }")
446 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/once.rs:444:5
    |
444 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
445 | |         f.pad("Once { .. }")
446 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::rwlock::RwLockReadGuard<'_, T>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:193:5
    |
193 | /     pub fn read(&self) -> LockResult<RwLockReadGuard<T>> {
194 | |         unsafe {
195 | |             self.inner.read();
196 | |             RwLockReadGuard::new(self)
197 | |         }
198 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::rwlock::RwLockReadGuard<'_, T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<sync::rwlock::RwLockReadGuard<'_, T>>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:193:5
    |
193 | /     pub fn read(&self) -> LockResult<RwLockReadGuard<T>> {
194 | |         unsafe {
195 | |             self.inner.read();
196 | |             RwLockReadGuard::new(self)
197 | |         }
198 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<sync::rwlock::RwLockReadGuard<'_, T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::rwlock::RwLockReadGuard<'_, T>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:232:5
    |
232 | /     pub fn try_read(&self) -> TryLockResult<RwLockReadGuard<T>> {
233 | |         unsafe {
234 | |             if self.inner.try_read() {
235 | |                 Ok(RwLockReadGuard::new(self)?)
...   |
239 | |         }
240 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::rwlock::RwLockReadGuard<'_, T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::TryLockError<sync::rwlock::RwLockReadGuard<'_, T>>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:232:5
    |
232 | /     pub fn try_read(&self) -> TryLockResult<RwLockReadGuard<T>> {
233 | |         unsafe {
234 | |             if self.inner.try_read() {
235 | |                 Ok(RwLockReadGuard::new(self)?)
...   |
239 | |         }
240 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::TryLockError<sync::rwlock::RwLockReadGuard<'_, T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::rwlock::RwLockWriteGuard<'_, T>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:275:5
    |
275 | /     pub fn write(&self) -> LockResult<RwLockWriteGuard<T>> {
276 | |         unsafe {
277 | |             self.inner.write();
278 | |             RwLockWriteGuard::new(self)
279 | |         }
280 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::rwlock::RwLockWriteGuard<'_, T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<sync::rwlock::RwLockWriteGuard<'_, T>>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:275:5
    |
275 | /     pub fn write(&self) -> LockResult<RwLockWriteGuard<T>> {
276 | |         unsafe {
277 | |             self.inner.write();
278 | |             RwLockWriteGuard::new(self)
279 | |         }
280 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<sync::rwlock::RwLockWriteGuard<'_, T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::rwlock::RwLockWriteGuard<'_, T>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:314:5
    |
314 | /     pub fn try_write(&self) -> TryLockResult<RwLockWriteGuard<T>> {
315 | |         unsafe {
316 | |             if self.inner.try_write() {
317 | |                 Ok(RwLockWriteGuard::new(self)?)
...   |
321 | |         }
322 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::rwlock::RwLockWriteGuard<'_, T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::TryLockError<sync::rwlock::RwLockWriteGuard<'_, T>>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:314:5
    |
314 | /     pub fn try_write(&self) -> TryLockResult<RwLockWriteGuard<T>> {
315 | |         unsafe {
316 | |             if self.inner.try_write() {
317 | |                 Ok(RwLockWriteGuard::new(self)?)
...   |
321 | |         }
322 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::TryLockError<sync::rwlock::RwLockWriteGuard<'_, T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<T>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:373:5
    |
373 | /     pub fn into_inner(self) -> LockResult<T> where T: Sized {
374 | |         // We know statically that there are no outstanding references to
375 | |         // `self` so there's no need to lock the inner lock.
376 | |         //
...   |
391 | |         }
392 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `T` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:373:5
    |
373 | /     pub fn into_inner(self) -> LockResult<T> where T: Sized {
374 | |         // We know statically that there are no outstanding references to
375 | |         // `self` so there's no need to lock the inner lock.
376 | |         //
...   |
391 | |         }
392 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `realstd::marker::Sized` is not implemented for `T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = help: consider adding a `where T: realstd::marker::Sized` bound
note: required by `sys_common::poison::PoisonError`
   --> libstd/sys_common/poison.rs:96:1
    |
96  | pub struct PoisonError<T> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: the size for values of type `&mut T` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:416:5
    |
416 | /     pub fn get_mut(&mut self) -> LockResult<&mut T> {
417 | |         // We know statically that there are no other references to `self`, so
418 | |         // there's no need to lock the inner lock.
419 | |         let data = unsafe { &mut *self.data.get() };
420 | |         poison::map_result(self.poison.borrow(), |_| data)
421 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&mut T`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<&mut T>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:416:5
    |
416 | /     pub fn get_mut(&mut self) -> LockResult<&mut T> {
417 | |         // We know statically that there are no other references to `self`, so
418 | |         // there's no need to lock the inner lock.
419 | |         let data = unsafe { &mut *self.data.get() };
420 | |         poison::map_result(self.poison.borrow(), |_| data)
421 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<&mut T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:434:5
    |
434 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
435 | |         match self.try_read() {
436 | |             Ok(guard) => f.debug_struct("RwLock").field("data", &&*guard).finish(),
437 | |             Err(TryLockError::Poisoned(err)) => {
...   |
448 | |         }
449 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:434:5
    |
434 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
435 | |         match self.try_read() {
436 | |             Ok(guard) => f.debug_struct("RwLock").field("data", &&*guard).finish(),
437 | |             Err(TryLockError::Poisoned(err)) => {
...   |
448 | |         }
449 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:443:21
    |
443 |                     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str("<locked>") }
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:443:21
    |
443 |                     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str("<locked>") }
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::rwlock::RwLockReadGuard<'rwlock, T>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:470:5
    |
470 | /     unsafe fn new(lock: &'rwlock RwLock<T>)
471 | |                   -> LockResult<RwLockReadGuard<'rwlock, T>> {
472 | |         poison::map_result(lock.poison.borrow(), |_| {
473 | |             RwLockReadGuard {
...   |
476 | |         })
477 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::rwlock::RwLockReadGuard<'rwlock, T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<sync::rwlock::RwLockReadGuard<'rwlock, T>>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:470:5
    |
470 | /     unsafe fn new(lock: &'rwlock RwLock<T>)
471 | |                   -> LockResult<RwLockReadGuard<'rwlock, T>> {
472 | |         poison::map_result(lock.poison.borrow(), |_| {
473 | |             RwLockReadGuard {
...   |
476 | |         })
477 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<sync::rwlock::RwLockReadGuard<'rwlock, T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sync::rwlock::RwLockWriteGuard<'rwlock, T>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:481:5
    |
481 | /     unsafe fn new(lock: &'rwlock RwLock<T>)
482 | |                   -> LockResult<RwLockWriteGuard<'rwlock, T>> {
483 | |         poison::map_result(lock.poison.borrow(), |guard| {
484 | |             RwLockWriteGuard {
...   |
488 | |         })
489 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sync::rwlock::RwLockWriteGuard<'rwlock, T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<sync::rwlock::RwLockWriteGuard<'rwlock, T>>` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:481:5
    |
481 | /     unsafe fn new(lock: &'rwlock RwLock<T>)
482 | |                   -> LockResult<RwLockWriteGuard<'rwlock, T>> {
483 | |         poison::map_result(lock.poison.borrow(), |guard| {
484 | |             RwLockWriteGuard {
...   |
488 | |         })
489 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<sync::rwlock::RwLockWriteGuard<'rwlock, T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:494:5
    |
494 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
495 | |         f.debug_struct("RwLockReadGuard")
496 | |             .field("lock", &self.__lock)
497 | |             .finish()
498 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:494:5
    |
494 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
495 | |         f.debug_struct("RwLockReadGuard")
496 | |             .field("lock", &self.__lock)
497 | |             .finish()
498 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:503:5
    |
503 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
504 | |         (**self).fmt(f)
505 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:503:5
    |
503 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
504 | |         (**self).fmt(f)
505 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:510:5
    |
510 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
511 | |         f.debug_struct("RwLockWriteGuard")
512 | |             .field("lock", &self.__lock)
513 | |             .finish()
514 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:510:5
    |
510 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
511 | |         f.debug_struct("RwLockWriteGuard")
512 | |             .field("lock", &self.__lock)
513 | |             .finish()
514 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:519:5
    |
519 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
520 | |         (**self).fmt(f)
521 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:519:5
    |
519 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
520 | |         (**self).fmt(f)
521 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/time.rs:256:5
    |
256 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
257 | |         self.0.fmt(f)
258 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/time.rs:256:5
    |
256 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
257 | |         self.0.fmt(f)
258 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/time.rs:325:5
    |
325 | /     pub fn duration_since(&self, earlier: SystemTime)
326 | |                           -> Result<Duration, SystemTimeError> {
327 | |         self.0.sub_time(&earlier.0).map_err(SystemTimeError)
328 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `time::SystemTimeError` cannot be known at compilation time
   --> libstd/time.rs:325:5
    |
325 | /     pub fn duration_since(&self, earlier: SystemTime)
326 | |                           -> Result<Duration, SystemTimeError> {
327 | |         self.0.sub_time(&earlier.0).map_err(SystemTimeError)
328 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::SystemTimeError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/time.rs:357:5
    |
357 | /     pub fn elapsed(&self) -> Result<Duration, SystemTimeError> {
358 | |         SystemTime::now().duration_since(*self)
359 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `time::SystemTimeError` cannot be known at compilation time
   --> libstd/time.rs:357:5
    |
357 | /     pub fn elapsed(&self) -> Result<Duration, SystemTimeError> {
358 | |         SystemTime::now().duration_since(*self)
359 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `time::SystemTimeError`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/time.rs:396:5
    |
396 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
397 | |         self.0.fmt(f)
398 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/time.rs:396:5
    |
396 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
397 | |         self.0.fmt(f)
398 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/time.rs:464:5
    |
464 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
465 | |         write!(f, "second time provided was later than self")
466 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/time.rs:464:5
    |
464 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
465 | |         write!(f, "second time provided was later than self")
466 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:44:5
   |
44 |     type Output = T::Return;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Generator`

error[E0307]: invalid `self` type: core::pin::Pin<&mut future::GenFuture<T>>
  --> libstd/future.rs:45:19
   |
45 |     fn poll(self: Pin<&mut Self>, lw: &LocalWaker) -> Poll<Self::Output> {
   |                   ^^^^^^^^^^^^^^
   |
   = note: type must be `future::GenFuture<T>` or a type that dereferences to it
   = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/future.rs:45:5
   |
45 | /     fn poll(self: Pin<&mut Self>, lw: &LocalWaker) -> Poll<Self::Output> {
46 | |         set_task_waker(lw, || match unsafe { Pin::get_mut_unchecked(self).0.resume() } {
47 | |             GeneratorState::Yielded(()) => Poll::Pending,
48 | |             GeneratorState::Complete(x) => Poll::Ready(x),
49 | |         })
50 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::ops::Generator`

error[E0277]: the size for values of type `&mut future::GenFuture<T>` cannot be known at compilation time
  --> libstd/future.rs:45:5
   |
45 | /     fn poll(self: Pin<&mut Self>, lw: &LocalWaker) -> Poll<Self::Output> {
46 | |         set_task_waker(lw, || match unsafe { Pin::get_mut_unchecked(self).0.resume() } {
47 | |             GeneratorState::Yielded(()) => Poll::Pending,
48 | |             GeneratorState::Complete(x) => Poll::Ready(x),
49 | |         })
50 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `&mut future::GenFuture<T>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::pin::Pin`

error[E0277]: the size for values of type `sys_common::poison::Guard` cannot be known at compilation time
  --> libstd/sys_common/poison.rs:35:5
   |
35 | /     pub fn borrow(&self) -> LockResult<Guard> {
36 | |         let ret = Guard { panicking: thread::panicking() };
37 | |         if self.get() {
38 | |             Err(PoisonError::new(ret))
...  |
41 | |         }
42 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::Guard`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<sys_common::poison::Guard>` cannot be known at compilation time
  --> libstd/sys_common/poison.rs:35:5
   |
35 | /     pub fn borrow(&self) -> LockResult<Guard> {
36 | |         let ret = Guard { panicking: thread::panicking() };
37 | |         if self.get() {
38 | |             Err(PoisonError::new(ret))
...  |
41 | |         }
42 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<sys_common::poison::Guard>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:149:5
    |
149 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
150 | |         "PoisonError { inner: .. }".fmt(f)
151 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:149:5
    |
149 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
150 | |         "PoisonError { inner: .. }".fmt(f)
151 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:156:5
    |
156 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
157 | |         "poisoned lock: another task failed inside".fmt(f)
158 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:156:5
    |
156 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
157 | |         "poisoned lock: another task failed inside".fmt(f)
158 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:227:5
    |
227 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
228 | |         match *self {
229 | |             TryLockError::Poisoned(..) => "Poisoned(..)".fmt(f),
230 | |             TryLockError::WouldBlock => "WouldBlock".fmt(f)
231 | |         }
232 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:227:5
    |
227 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
228 | |         match *self {
229 | |             TryLockError::Poisoned(..) => "Poisoned(..)".fmt(f),
230 | |             TryLockError::WouldBlock => "WouldBlock".fmt(f)
231 | |         }
232 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:237:5
    |
237 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
238 | |         match *self {
239 | |             TryLockError::Poisoned(..) => "poisoned lock: another task failed inside",
240 | |             TryLockError::WouldBlock => "try_lock failed because the operation would block"
241 | |         }.fmt(f)
242 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:237:5
    |
237 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
238 | |         match *self {
239 | |             TryLockError::Poisoned(..) => "poisoned lock: another task failed inside",
240 | |             TryLockError::WouldBlock => "try_lock failed because the operation would block"
241 | |         }.fmt(f)
242 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&dyn error::Error` cannot be known at compilation time
   --> libstd/sys_common/poison.rs:254:5
    |
254 | /     fn cause(&self) -> Option<&dyn Error> {
255 | |         match *self {
256 | |             TryLockError::Poisoned(ref p) => Some(p),
257 | |             _ => None
258 | |         }
259 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&dyn error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `sys_common::remutex::ReentrantMutexGuard<'_, T>` cannot be known at compilation time
  --> libstd/sys_common/remutex.rs:85:5
   |
85 | /     pub fn lock(&self) -> LockResult<ReentrantMutexGuard<T>> {
86 | |         unsafe { self.inner.lock() }
87 | |         ReentrantMutexGuard::new(&self)
88 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys_common::remutex::ReentrantMutexGuard<'_, T>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<sys_common::remutex::ReentrantMutexGuard<'_, T>>` cannot be known at compilation time
  --> libstd/sys_common/remutex.rs:85:5
   |
85 | /     pub fn lock(&self) -> LockResult<ReentrantMutexGuard<T>> {
86 | |         unsafe { self.inner.lock() }
87 | |         ReentrantMutexGuard::new(&self)
88 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<sys_common::remutex::ReentrantMutexGuard<'_, T>>`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::remutex::ReentrantMutexGuard<'_, T>` cannot be known at compilation time
   --> libstd/sys_common/remutex.rs:102:5
    |
102 | /     pub fn try_lock(&self) -> TryLockResult<ReentrantMutexGuard<T>> {
103 | |         if unsafe { self.inner.try_lock() } {
104 | |             Ok(ReentrantMutexGuard::new(&self)?)
105 | |         } else {
106 | |             Err(TryLockError::WouldBlock)
107 | |         }
108 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::remutex::ReentrantMutexGuard<'_, T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::TryLockError<sys_common::remutex::ReentrantMutexGuard<'_, T>>` cannot be known at compilation time
   --> libstd/sys_common/remutex.rs:102:5
    |
102 | /     pub fn try_lock(&self) -> TryLockResult<ReentrantMutexGuard<T>> {
103 | |         if unsafe { self.inner.try_lock() } {
104 | |             Ok(ReentrantMutexGuard::new(&self)?)
105 | |         } else {
106 | |             Err(TryLockError::WouldBlock)
107 | |         }
108 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::TryLockError<sys_common::remutex::ReentrantMutexGuard<'_, T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/remutex.rs:121:5
    |
121 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
122 | |         match self.try_lock() {
123 | |             Ok(guard) => f.debug_struct("ReentrantMutex").field("data", &*guard).finish(),
124 | |             Err(TryLockError::Poisoned(err)) => {
...   |
135 | |         }
136 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys_common/remutex.rs:121:5
    |
121 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
122 | |         match self.try_lock() {
123 | |             Ok(guard) => f.debug_struct("ReentrantMutex").field("data", &*guard).finish(),
124 | |             Err(TryLockError::Poisoned(err)) => {
...   |
135 | |         }
136 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/remutex.rs:130:21
    |
130 |                     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str("<locked>") }
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys_common/remutex.rs:130:21
    |
130 |                     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { f.write_str("<locked>") }
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::remutex::ReentrantMutexGuard<'mutex, T>` cannot be known at compilation time
   --> libstd/sys_common/remutex.rs:140:5
    |
140 | /     fn new(lock: &'mutex ReentrantMutex<T>)
141 | |             -> LockResult<ReentrantMutexGuard<'mutex, T>> {
142 | |         poison::map_result(lock.poison.borrow(), |guard| {
143 | |             ReentrantMutexGuard {
...   |
147 | |         })
148 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::remutex::ReentrantMutexGuard<'mutex, T>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::poison::PoisonError<sys_common::remutex::ReentrantMutexGuard<'mutex, T>>` cannot be known at compilation time
   --> libstd/sys_common/remutex.rs:140:5
    |
140 | /     fn new(lock: &'mutex ReentrantMutex<T>)
141 | |             -> LockResult<ReentrantMutexGuard<'mutex, T>> {
142 | |         poison::map_result(lock.poison.borrow(), |guard| {
143 | |             ReentrantMutexGuard {
...   |
147 | |         })
148 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::poison::PoisonError<sys_common::remutex::ReentrantMutexGuard<'mutex, T>>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `R` cannot be known at compilation time
  --> libstd/sys_common/thread_info.rs:25:5
   |
25 | /     fn with<R, F>(f: F) -> Option<R> where F: FnOnce(&mut ThreadInfo) -> R {
26 | |         THREAD_INFO.try_with(move |c| {
27 | |             if c.borrow().is_none() {
28 | |                 *c.borrow_mut() = Some(ThreadInfo {
...  |
34 | |         }).ok()
35 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `R`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = help: consider adding a `where R: core::marker::Sized` bound
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `unsafe extern "C" fn(*mut u8)` cannot be known at compilation time
   --> libstd/sys_common/thread_local.rs:128:5
    |
128 | /     pub const fn new(dtor: Option<unsafe extern fn(*mut u8)>) -> StaticKey {
129 | |         StaticKey {
130 | |             key: atomic::AtomicUsize::new(0),
131 | |             dtor,
132 | |         }
133 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `unsafe extern "C" fn(*mut u8)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `unsafe extern "C" fn(*mut u8)` cannot be known at compilation time
   --> libstd/sys_common/thread_local.rs:217:5
    |
217 | /     pub fn new(dtor: Option<unsafe extern fn(*mut u8)>) -> Key {
218 | |         Key { key: unsafe { imp::create(dtor) } }
219 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `unsafe extern "C" fn(*mut u8)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys_common/wtf8.rs:59:5
   |
59 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
60 | |         write!(formatter, "U+{:04X}", self.value)
61 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys_common/wtf8.rs:59:5
   |
59 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
60 | |         write!(formatter, "U+{:04X}", self.value)
61 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::wtf8::CodePoint` cannot be known at compilation time
  --> libstd/sys_common/wtf8.rs:77:5
   |
77 | /     pub fn from_u32(value: u32) -> Option<CodePoint> {
78 | |         match value {
79 | |             0 ..= 0x10FFFF => Some(CodePoint { value: value }),
80 | |             _ => None
81 | |         }
82 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::CodePoint`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `char` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:102:5
    |
102 | /     pub fn to_char(&self) -> Option<char> {
103 | |         match self.value {
104 | |             0xD800 ..= 0xDFFF => None,
105 | |             _ => Some(unsafe { char::from_u32_unchecked(self.value) })
106 | |         }
107 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `char`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:147:5
    |
147 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
148 | |         fmt::Debug::fmt(&**self, formatter)
149 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:147:5
    |
147 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
148 | |         fmt::Debug::fmt(&**self, formatter)
149 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:340:5
    |
340 | /     pub fn into_string(self) -> Result<String, Wtf8Buf> {
341 | |         match self.next_surrogate(0) {
342 | |             None => Ok(unsafe { String::from_utf8_unchecked(self.bytes) }),
343 | |             Some(_) => Err(self),
344 | |         }
345 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::wtf8::Wtf8Buf` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:340:5
    |
340 | /     pub fn into_string(self) -> Result<String, Wtf8Buf> {
341 | |         match self.next_surrogate(0) {
342 | |             None => Ok(unsafe { String::from_utf8_unchecked(self.bytes) }),
343 | |             Some(_) => Err(self),
344 | |         }
345 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::Wtf8Buf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::wtf8::CodePoint` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:384:5
    |
384 | /     fn from_iter<T: IntoIterator<Item=CodePoint>>(iter: T) -> Wtf8Buf {
385 | |         let mut string = Wtf8Buf::new();
386 | |         string.extend(iter);
387 | |         string
388 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::CodePoint`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::iter::IntoIterator`

error[E0277]: the size for values of type `sys_common::wtf8::CodePoint` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:396:5
    |
396 | /     fn extend<T: IntoIterator<Item=CodePoint>>(&mut self, iter: T) {
397 | |         let iterator = iter.into_iter();
398 | |         let (low, _high) = iterator.size_hint();
399 | |         // Lower bound of one byte per code point (ASCII only)
...   |
403 | |         }
404 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::CodePoint`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::iter::IntoIterator`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:424:5
    |
424 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
425 | |         fn write_str_escaped(f: &mut fmt::Formatter, s: &str) -> fmt::Result {
426 | |             use fmt::Write;
427 | |             for c in s.chars().flat_map(|c| c.escape_debug()) {
...   |
449 | |         formatter.write_str("\"")
450 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:424:5
    |
424 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
425 | |         fn write_str_escaped(f: &mut fmt::Formatter, s: &str) -> fmt::Result {
426 | |             use fmt::Write;
427 | |             for c in s.chars().flat_map(|c| c.escape_debug()) {
...   |
449 | |         formatter.write_str("\"")
450 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:454:5
    |
454 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
455 | |         let wtf8_bytes = &self.bytes;
456 | |         let mut pos = 0;
457 | |         loop {
...   |
477 | |         }
478 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:454:5
    |
454 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
455 | |         let wtf8_bytes = &self.bytes;
456 | |         let mut pos = 0;
457 | |         loop {
...   |
477 | |         }
478 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&str` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:545:5
    |
545 | /     pub fn as_str(&self) -> Option<&str> {
546 | |         // Well-formed WTF-8 is also well-formed UTF-8
547 | |         // if and only if it contains no surrogate.
548 | |         match self.next_surrogate(0) {
...   |
551 | |         }
552 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&str`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `(usize, u16)` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:597:5
    |
597 | /     fn next_surrogate(&self, mut pos: usize) -> Option<(usize, u16)> {
598 | |         let mut iter = self.bytes[pos..].iter();
599 | |         loop {
600 | |             let b = *iter.next()?;
...   |
623 | |         }
624 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(usize, u16)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `u16` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:627:5
    |
627 | /     fn final_lead_surrogate(&self) -> Option<u16> {
628 | |         let len = self.len();
629 | |         if len < 3 {
630 | |             return None
...   |
635 | |         }
636 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u16`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `u16` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:639:5
    |
639 | /     fn initial_trail_surrogate(&self) -> Option<u16> {
640 | |         let len = self.len();
641 | |         if len < 3 {
642 | |             return None
...   |
647 | |         }
648 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u16`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:687:5
    |
687 | /     fn index(&self, range: ops::Range<usize>) -> &Wtf8 {
688 | |         // is_code_point_boundary checks that the index is in [0, .len()]
689 | |         if range.start <= range.end &&
690 | |            is_code_point_boundary(self, range.start) &&
...   |
695 | |         }
696 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::Range`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:709:5
    |
709 | /     fn index(&self, range: ops::RangeFrom<usize>) -> &Wtf8 {
710 | |         // is_code_point_boundary checks that the index is in [0, .len()]
711 | |         if is_code_point_boundary(self, range.start) {
712 | |             unsafe { slice_unchecked(self, range.start, self.len()) }
...   |
715 | |         }
716 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::RangeFrom`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:729:5
    |
729 | /     fn index(&self, range: ops::RangeTo<usize>) -> &Wtf8 {
730 | |         // is_code_point_boundary checks that the index is in [0, .len()]
731 | |         if is_code_point_boundary(self, range.end) {
732 | |             unsafe { slice_unchecked(self, 0, range.end) }
...   |
735 | |         }
736 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::ops::RangeTo`

error[E0277]: the size for values of type `sys_common::wtf8::CodePoint` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:800:5
    |
800 | /     fn next(&mut self) -> Option<CodePoint> {
801 | |         next_code_point(&mut self.bytes).map(|c| CodePoint { value: c })
802 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::wtf8::CodePoint`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:805:5
    |
805 | /     fn size_hint(&self) -> (usize, Option<usize>) {
806 | |         let len = self.bytes.len();
807 | |         (len.saturating_add(3) / 4, Some(len))
808 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `u16` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:825:5
    |
825 | /     fn next(&mut self) -> Option<u16> {
826 | |         if self.extra != 0 {
827 | |             let tmp = self.extra;
828 | |             self.extra = 0;
...   |
842 | |         })
843 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u16`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:846:5
    |
846 | /     fn size_hint(&self) -> (usize, Option<usize>) {
847 | |         let (low, high) = self.code_points.size_hint();
848 | |         // every code point gets either one u16 or two u16,
849 | |         // so this iterator is between 1 or 2 times as
850 | |         // long as the underlying iterator.
851 | |         (low, high.and_then(|n| n.checked_mul(2)))
852 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
  --> libstd/sys_common/process.rs:66:5
   |
66 | /     pub fn capture(&self) -> BTreeMap<K, OsString> {
67 | |         let mut result = BTreeMap::<K, OsString>::new();
68 | |         if !self.clear {
69 | |             for (k, v) in env::vars_os() {
...  |
80 | |         result
81 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::collections::BTreeMap`

error[E0277]: the size for values of type `alloc_crate::collections::BTreeMap<K, ffi::os_str::OsString>` cannot be known at compilation time
   --> libstd/sys_common/process.rs:103:5
    |
103 | /     pub fn capture_if_changed(&self) -> Option<BTreeMap<K, OsString>> {
104 | |         if self.is_unchanged() {
105 | |             None
106 | |         } else {
107 | |             Some(self.capture())
108 | |         }
109 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::collections::BTreeMap<K, ffi::os_str::OsString>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
   --> libstd/sys_common/process.rs:103:5
    |
103 | /     pub fn capture_if_changed(&self) -> Option<BTreeMap<K, OsString>> {
104 | |         if self.is_unchanged() {
105 | |             None
106 | |         } else {
107 | |             Some(self.capture())
108 | |         }
109 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::collections::BTreeMap`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/thread/mod.rs:261:10
    |
261 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/thread/mod.rs:261:10
    |
261 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/thread/mod.rs:950:44
    |
950 | #[derive(Eq, PartialEq, Clone, Copy, Hash, Debug)]
    |                                            ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/thread/mod.rs:950:44
    |
950 | #[derive(Eq, PartialEq, Clone, Copy, Hash, Debug)]
    |                                            ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/ascii.rs:165:9
    |
165 |         fn to_ascii_uppercase(&self) -> Self::Owned { self.to_ascii_uppercase() }
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
202 |     delegating_ascii_methods!();
    |     ---------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
   --> libstd/ascii.rs:168:9
    |
168 |         fn to_ascii_lowercase(&self) -> Self::Owned { self.to_ascii_lowercase() }
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
...
202 |     delegating_ascii_methods!();
    |     ---------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `u8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2640:17
     |
2640 | #[derive(Clone, Debug)]
     |                 ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/map.rs:2640:17
     |
2640 | #[derive(Clone, Debug)]
     |                 ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1717:18
     |
1717 |         #[derive(Debug)]
     |                  ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/collections/hash/set.rs:1717:18
     |
1717 |         #[derive(Debug)]
     |                  ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/env.rs:249:10
    |
249 | #[derive(Debug, PartialEq, Eq, Clone)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/env.rs:249:10
    |
249 | #[derive(Debug, PartialEq, Eq, Clone)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/env.rs:422:10
    |
422 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/env.rs:422:10
    |
422 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/error.rs:312:18
    |
312 |         #[derive(Debug)]
    |                  ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/error.rs:312:18
    |
312 |         #[derive(Debug)]
    |                  ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/error.rs:716:14
    |
716 |     #[derive(Debug, PartialEq)]
    |              ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/error.rs:716:14
    |
716 |     #[derive(Debug, PartialEq)]
    |              ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/error.rs:718:14
    |
718 |     #[derive(Debug, PartialEq)]
    |              ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/error.rs:718:14
    |
718 |     #[derive(Debug, PartialEq)]
    |              ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:124:21
    |
124 | #[derive(PartialEq, PartialOrd, Eq, Ord, Hash, Clone)]
    |                     ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:232:32
    |
232 | #[derive(Clone, PartialEq, Eq, Debug)]
    |                                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:232:32
    |
232 | #[derive(Clone, PartialEq, Eq, Debug)]
    |                                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:255:32
    |
255 | #[derive(Clone, PartialEq, Eq, Debug)]
    |                                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:255:32
    |
255 | #[derive(Clone, PartialEq, Eq, Debug)]
    |                                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:261:32
    |
261 | #[derive(Clone, PartialEq, Eq, Debug)]
    |                                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:261:32
    |
261 | #[derive(Clone, PartialEq, Eq, Debug)]
    |                                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:293:32
    |
293 | #[derive(Clone, PartialEq, Eq, Debug)]
    |                                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/ffi/c_str.rs:293:32
    |
293 | #[derive(Clone, PartialEq, Eq, Debug)]
    |                                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:836:13
    |
836 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
837 | |                 <OsStr as PartialOrd>::partial_cmp(self, other)
838 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
851 |   impl_cmp!(OsString, OsStr);
    |   --------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:844:13
    |
844 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
845 | |                 <OsStr as PartialOrd>::partial_cmp(self, other)
846 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
851 |   impl_cmp!(OsString, OsStr);
    |   --------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:836:13
    |
836 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
837 | |                 <OsStr as PartialOrd>::partial_cmp(self, other)
838 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
852 |   impl_cmp!(OsString, &'a OsStr);
    |   ------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:844:13
    |
844 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
845 | |                 <OsStr as PartialOrd>::partial_cmp(self, other)
846 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
852 |   impl_cmp!(OsString, &'a OsStr);
    |   ------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:836:13
    |
836 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
837 | |                 <OsStr as PartialOrd>::partial_cmp(self, other)
838 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
853 |   impl_cmp!(Cow<'a, OsStr>, OsStr);
    |   --------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:844:13
    |
844 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
845 | |                 <OsStr as PartialOrd>::partial_cmp(self, other)
846 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
853 |   impl_cmp!(Cow<'a, OsStr>, OsStr);
    |   --------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:836:13
    |
836 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
837 | |                 <OsStr as PartialOrd>::partial_cmp(self, other)
838 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
854 |   impl_cmp!(Cow<'a, OsStr>, &'b OsStr);
    |   ------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:844:13
    |
844 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
845 | |                 <OsStr as PartialOrd>::partial_cmp(self, other)
846 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
854 |   impl_cmp!(Cow<'a, OsStr>, &'b OsStr);
    |   ------------------------------------- in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:836:13
    |
836 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
837 | |                 <OsStr as PartialOrd>::partial_cmp(self, other)
838 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
855 |   impl_cmp!(Cow<'a, OsStr>, OsString);
    |   ------------------------------------ in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/ffi/os_str.rs:844:13
    |
844 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
845 | |                 <OsStr as PartialOrd>::partial_cmp(self, other)
846 | |             }
    | |_____________^ doesn't have a size known at compile-time
...
855 |   impl_cmp!(Cow<'a, OsStr>, OsString);
    |   ------------------------------------ in this macro invocation
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/fs.rs:132:10
    |
132 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/fs.rs:132:10
    |
132 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/fs.rs:189:17
    |
189 | #[derive(Clone, Debug)]
    |                 ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/fs.rs:189:17
    |
189 | #[derive(Clone, Debug)]
    |                 ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/fs.rs:201:32
    |
201 | #[derive(Clone, PartialEq, Eq, Debug)]
    |                                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/fs.rs:201:32
    |
201 | #[derive(Clone, PartialEq, Eq, Debug)]
    |                                ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/fs.rs:210:44
    |
210 | #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
    |                                            ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/fs.rs:210:44
    |
210 | #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
    |                                            ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/fs.rs:217:10
    |
217 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/fs.rs:217:10
    |
217 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/buffered.rs:424:10
    |
424 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/buffered.rs:424:10
    |
424 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/io/cursor.rs:84:17
   |
84 | #[derive(Clone, Debug)]
   |                 ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/io/cursor.rs:84:17
   |
84 | #[derive(Clone, Debug)]
   |                 ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/io/error.rs:83:10
   |
83 | #[derive(Debug)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/io/error.rs:83:10
   |
83 | #[derive(Debug)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
  --> libstd/io/error.rs:97:56
   |
97 | #[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
   |                                                        ^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/io/error.rs:97:23
   |
97 | #[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
   |                       ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/io/error.rs:97:23
   |
97 | #[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
   |                       ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/error.rs:613:13
    |
613 | /             fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {
614 | |                 Ok(())
615 | |             }
    | |_____________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/error.rs:613:13
    |
613 | /             fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {
614 | |                 Ok(())
615 | |             }
    | |_____________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/error.rs:609:18
    |
609 |         #[derive(Debug)]
    |                  ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/error.rs:609:18
    |
609 |         #[derive(Debug)]
    |                  ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/io/mod.rs:881:10
    |
881 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/io/mod.rs:881:10
    |
881 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/mod.rs:1228:38
     |
1228 | #[derive(Copy, PartialEq, Eq, Clone, Debug)]
     |                                      ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1228:38
     |
1228 | #[derive(Copy, PartialEq, Eq, Clone, Debug)]
     |                                      ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/mod.rs:1748:10
     |
1748 | #[derive(Debug)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1748:10
     |
1748 | #[derive(Debug)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/mod.rs:1958:10
     |
1958 | #[derive(Debug)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1958:10
     |
1958 | #[derive(Debug)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/mod.rs:1980:10
     |
1980 | #[derive(Debug)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:1980:10
     |
1980 | #[derive(Debug)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/mod.rs:2012:10
     |
2012 | #[derive(Debug)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:2012:10
     |
2012 | #[derive(Debug)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
  --> libstd/net/ip.rs:48:51
   |
48 | #[derive(Copy, Clone, Eq, PartialEq, Debug, Hash, PartialOrd, Ord)]
   |                                                   ^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/net/ip.rs:48:38
   |
48 | #[derive(Copy, Clone, Eq, PartialEq, Debug, Hash, PartialOrd, Ord)]
   |                                      ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/net/ip.rs:48:38
   |
48 | #[derive(Copy, Clone, Eq, PartialEq, Debug, Hash, PartialOrd, Ord)]
   |                                      ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/ip.rs:132:44
    |
132 | #[derive(Copy, PartialEq, Eq, Clone, Hash, Debug)]
    |                                            ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/ip.rs:132:44
    |
132 | #[derive(Copy, PartialEq, Eq, Clone, Hash, Debug)]
    |                                            ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/net/addr.rs:48:44
   |
48 | #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
   |                                            ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/net/addr.rs:48:44
   |
48 | #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
   |                                            ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/tcp.rs:105:10
    |
105 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/tcp.rs:105:10
    |
105 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/net/parser.rs:399:10
    |
399 | #[derive(Debug, Clone, PartialEq, Eq)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/net/parser.rs:399:10
    |
399 | #[derive(Debug, Clone, PartialEq, Eq)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/net/mod.rs:67:38
   |
67 | #[derive(Copy, Clone, PartialEq, Eq, Debug)]
   |                                      ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/net/mod.rs:67:38
   |
67 | #[derive(Copy, Clone, PartialEq, Eq, Debug)]
   |                                      ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/path.rs:146:36
    |
146 | #[derive(Copy, Clone, Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    |                                    ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/path.rs:146:23
    |
146 | #[derive(Copy, Clone, Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    |                       ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/path.rs:146:23
    |
146 | #[derive(Copy, Clone, Debug, Hash, PartialOrd, Ord, PartialEq, Eq)]
    |                       ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/path.rs:378:46
    |
378 | #[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]
    |                                              ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/path.rs:378:46
    |
378 | #[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]
    |                                              ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/path.rs:378:34
    |
378 | #[derive(Copy, Clone, PartialEq, PartialOrd, Debug)]
    |                                  ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/path.rs:423:27
    |
423 | #[derive(Copy, Clone, Eq, Debug)]
    |                           ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/path.rs:423:27
    |
423 | #[derive(Copy, Clone, Eq, Debug)]
    |                           ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/path.rs:507:61
    |
507 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
    |                                                             ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/path.rs:507:61
    |
507 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
    |                                                             ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/path.rs:507:38
    |
507 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
    |                                      ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/path.rs:1056:23
     |
1056 | #[derive(Copy, Clone, Debug)]
     |                       ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/path.rs:1056:23
     |
1056 | #[derive(Copy, Clone, Debug)]
     |                       ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/path.rs:1660:10
     |
1660 | #[derive(Debug, Clone, PartialEq, Eq)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/path.rs:1660:10
     |
1660 | #[derive(Debug, Clone, PartialEq, Eq)]
     |          ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2646:13
     |
2646 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2647 | |                 <Path as PartialOrd>::partial_cmp(self, other)
2648 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2661 |   impl_cmp!(PathBuf, Path);
     |   ------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2654:13
     |
2654 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2655 | |                 <Path as PartialOrd>::partial_cmp(self, other)
2656 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2661 |   impl_cmp!(PathBuf, Path);
     |   ------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2646:13
     |
2646 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2647 | |                 <Path as PartialOrd>::partial_cmp(self, other)
2648 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2662 |   impl_cmp!(PathBuf, &'a Path);
     |   ----------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2654:13
     |
2654 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2655 | |                 <Path as PartialOrd>::partial_cmp(self, other)
2656 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2662 |   impl_cmp!(PathBuf, &'a Path);
     |   ----------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2646:13
     |
2646 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2647 | |                 <Path as PartialOrd>::partial_cmp(self, other)
2648 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2663 |   impl_cmp!(Cow<'a, Path>, Path);
     |   ------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2654:13
     |
2654 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2655 | |                 <Path as PartialOrd>::partial_cmp(self, other)
2656 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2663 |   impl_cmp!(Cow<'a, Path>, Path);
     |   ------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2646:13
     |
2646 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2647 | |                 <Path as PartialOrd>::partial_cmp(self, other)
2648 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2664 |   impl_cmp!(Cow<'a, Path>, &'b Path);
     |   ----------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2654:13
     |
2654 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2655 | |                 <Path as PartialOrd>::partial_cmp(self, other)
2656 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2664 |   impl_cmp!(Cow<'a, Path>, &'b Path);
     |   ----------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2646:13
     |
2646 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2647 | |                 <Path as PartialOrd>::partial_cmp(self, other)
2648 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2665 |   impl_cmp!(Cow<'a, Path>, PathBuf);
     |   ---------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2654:13
     |
2654 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2655 | |                 <Path as PartialOrd>::partial_cmp(self, other)
2656 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2665 |   impl_cmp!(Cow<'a, Path>, PathBuf);
     |   ---------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2699 |   impl_cmp_os_str!(PathBuf, OsStr);
     |   --------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2699 |   impl_cmp_os_str!(PathBuf, OsStr);
     |   --------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2700 |   impl_cmp_os_str!(PathBuf, &'a OsStr);
     |   ------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2700 |   impl_cmp_os_str!(PathBuf, &'a OsStr);
     |   ------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2701 |   impl_cmp_os_str!(PathBuf, Cow<'a, OsStr>);
     |   ------------------------------------------ in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2701 |   impl_cmp_os_str!(PathBuf, Cow<'a, OsStr>);
     |   ------------------------------------------ in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2702 |   impl_cmp_os_str!(PathBuf, OsString);
     |   ------------------------------------ in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2702 |   impl_cmp_os_str!(PathBuf, OsString);
     |   ------------------------------------ in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2703 |   impl_cmp_os_str!(Path, OsStr);
     |   ------------------------------ in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2703 |   impl_cmp_os_str!(Path, OsStr);
     |   ------------------------------ in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2704 |   impl_cmp_os_str!(Path, &'a OsStr);
     |   ---------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2704 |   impl_cmp_os_str!(Path, &'a OsStr);
     |   ---------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2705 |   impl_cmp_os_str!(Path, Cow<'a, OsStr>);
     |   --------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2705 |   impl_cmp_os_str!(Path, Cow<'a, OsStr>);
     |   --------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2706 |   impl_cmp_os_str!(Path, OsString);
     |   --------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2706 |   impl_cmp_os_str!(Path, OsString);
     |   --------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2707 |   impl_cmp_os_str!(&'a Path, OsStr);
     |   ---------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2707 |   impl_cmp_os_str!(&'a Path, OsStr);
     |   ---------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2708 |   impl_cmp_os_str!(&'a Path, Cow<'b, OsStr>);
     |   ------------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2708 |   impl_cmp_os_str!(&'a Path, Cow<'b, OsStr>);
     |   ------------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2709 |   impl_cmp_os_str!(&'a Path, OsString);
     |   ------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2709 |   impl_cmp_os_str!(&'a Path, OsString);
     |   ------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2710 |   impl_cmp_os_str!(Cow<'a, Path>, OsStr);
     |   --------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2710 |   impl_cmp_os_str!(Cow<'a, Path>, OsStr);
     |   --------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2711 |   impl_cmp_os_str!(Cow<'a, Path>, &'b OsStr);
     |   ------------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2711 |   impl_cmp_os_str!(Cow<'a, Path>, &'b OsStr);
     |   ------------------------------------------- in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2684:13
     |
2684 | /             fn partial_cmp(&self, other: &$rhs) -> Option<cmp::Ordering> {
2685 | |                 <Path as PartialOrd>::partial_cmp(self, other.as_ref())
2686 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2712 |   impl_cmp_os_str!(Cow<'a, Path>, OsString);
     |   ------------------------------------------ in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
    --> libstd/path.rs:2692:13
     |
2692 | /             fn partial_cmp(&self, other: &$lhs) -> Option<cmp::Ordering> {
2693 | |                 <Path as PartialOrd>::partial_cmp(self.as_ref(), other)
2694 | |             }
     | |_____________^ doesn't have a size known at compile-time
...
2712 |   impl_cmp_os_str!(Cow<'a, Path>, OsString);
     |   ------------------------------------------ in this macro invocation
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/process.rs:1141:38
     |
1141 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
     |                                      ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/process.rs:1141:38
     |
1141 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
     |                                      ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/process.rs:1231:23
     |
1231 | #[derive(Clone, Copy, Debug)]
     |                       ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
    --> libstd/process.rs:1231:23
     |
1231 | #[derive(Clone, Copy, Debug)]
     |                       ^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:110:10
    |
110 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mpsc/sync.rs:110:10
    |
110 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
  --> libstd/sync/mpsc/cache_aligned.rs:13:47
   |
13 | #[derive(Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
   |                                               ^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
  --> libstd/sync/mpsc/cache_aligned.rs:17:47
   |
17 | #[derive(Copy, Clone, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]
   |                                               ^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:373:10
    |
373 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:373:10
    |
373 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:418:10
    |
418 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:418:10
    |
418 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:453:10
    |
453 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:453:10
    |
453 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:581:38
    |
581 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:581:38
    |
581 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:592:38
    |
592 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:592:38
    |
592 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:613:38
    |
613 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mpsc/mod.rs:613:38
    |
613 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sync/condvar.rs:25:10
   |
25 | #[derive(Debug, PartialEq, Eq, Copy, Clone)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sync/condvar.rs:25:10
   |
25 | #[derive(Debug, PartialEq, Eq, Copy, Clone)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/mutex.rs:493:29
    |
493 |     #[derive(Eq, PartialEq, Debug)]
    |                             ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/mutex.rs:493:29
    |
493 |     #[derive(Eq, PartialEq, Debug)]
    |                             ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/once.rs:111:10
    |
111 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/once.rs:111:10
    |
111 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:572:29
    |
572 |     #[derive(Eq, PartialEq, Debug)]
    |                             ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sync/rwlock.rs:572:29
    |
572 |     #[derive(Eq, PartialEq, Debug)]
    |                             ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
  --> libstd/time.rs:70:38
   |
70 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
   |                                      ^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/time.rs:125:38
    |
125 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |                                      ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/time.rs:147:17
    |
147 | #[derive(Clone, Debug)]
    |                 ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/time.rs:147:17
    |
147 | #[derive(Clone, Debug)]
    |                 ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
  --> libstd/future.rs:35:50
   |
35 | #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
   |                                                  ^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/future.rs:35:23
   |
35 | #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
   |                       ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
  --> libstd/sys_common/wtf8.rs:50:30
   |
50 | #[derive(Eq, PartialEq, Ord, PartialOrd, Clone, Copy)]
   |                              ^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:123:30
    |
123 | #[derive(Eq, PartialEq, Ord, PartialOrd, Clone)]
    |                              ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/sys_common/wtf8.rs:411:30
    |
411 | #[derive(Eq, Ord, PartialEq, PartialOrd)]
    |                              ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys_common/bytestring.rs:45:13
   |
45 | /             fn fmt(&self, f: &mut Formatter) -> Result {
46 | |                 debug_fmt_bytestring(self.0, f)
47 | |             }
   | |_____________^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys_common/bytestring.rs:45:13
   |
45 | /             fn fmt(&self, f: &mut Formatter) -> Result {
46 | |                 debug_fmt_bytestring(self.0, f)
47 | |             }
   | |_____________^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
  --> libstd/sys_common/process.rs:25:44
   |
25 | #[derive(Clone, Debug, Eq, PartialEq, Ord, PartialOrd)]
   |                                            ^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys_common/process.rs:25:17
   |
25 | #[derive(Clone, Debug, Eq, PartialEq, Ord, PartialOrd)]
   |                 ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys_common/process.rs:25:17
   |
25 | #[derive(Clone, Debug, Eq, PartialEq, Ord, PartialOrd)]
   |                 ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys_common/process.rs:47:17
   |
47 | #[derive(Clone, Debug)]
   |                 ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys_common/process.rs:47:17
   |
47 | #[derive(Clone, Debug)]
   |                 ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/sys_common/net.rs:136:5
    |
136 | /     fn next(&mut self) -> Option<SocketAddr> {
137 | |         loop {
138 | |             unsafe {
139 | |                 let cur = self.cur.as_ref()?;
...   |
148 | |         }
149 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `sys_common::net::TcpStream` cannot be known at compilation time
   --> libstd/sys_common/net.rs:184:5
    |
184 | /     pub fn connect(addr: &SocketAddr) -> io::Result<TcpStream> {
185 | |         init();
186 | |
187 | |         let sock = Socket::new(addr, c::SOCK_STREAM)?;
...   |
191 | |         Ok(TcpStream { inner: sock })
192 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::net::TcpStream`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:184:5
    |
184 | /     pub fn connect(addr: &SocketAddr) -> io::Result<TcpStream> {
185 | |         init();
186 | |
187 | |         let sock = Socket::new(addr, c::SOCK_STREAM)?;
...   |
191 | |         Ok(TcpStream { inner: sock })
192 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::net::TcpStream` cannot be known at compilation time
   --> libstd/sys_common/net.rs:194:5
    |
194 | /     pub fn connect_timeout(addr: &SocketAddr, timeout: Duration) -> io::Result<TcpStream> {
195 | |         init();
196 | |
197 | |         let sock = Socket::new(addr, c::SOCK_STREAM)?;
198 | |         sock.connect_timeout(addr, timeout)?;
199 | |         Ok(TcpStream { inner: sock })
200 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::net::TcpStream`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:194:5
    |
194 | /     pub fn connect_timeout(addr: &SocketAddr, timeout: Duration) -> io::Result<TcpStream> {
195 | |         init();
196 | |
197 | |         let sock = Socket::new(addr, c::SOCK_STREAM)?;
198 | |         sock.connect_timeout(addr, timeout)?;
199 | |         Ok(TcpStream { inner: sock })
200 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/sys_common/net.rs:206:5
    |
206 | /     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
207 | |         self.inner.set_timeout(dur, c::SO_RCVTIMEO)
208 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:206:5
    |
206 | /     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
207 | |         self.inner.set_timeout(dur, c::SO_RCVTIMEO)
208 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:206:5
    |
206 | /     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
207 | |         self.inner.set_timeout(dur, c::SO_RCVTIMEO)
208 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/sys_common/net.rs:210:5
    |
210 | /     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
211 | |         self.inner.set_timeout(dur, c::SO_SNDTIMEO)
212 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:210:5
    |
210 | /     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
211 | |         self.inner.set_timeout(dur, c::SO_SNDTIMEO)
212 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:210:5
    |
210 | /     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
211 | |         self.inner.set_timeout(dur, c::SO_SNDTIMEO)
212 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<core::time::Duration>` cannot be known at compilation time
   --> libstd/sys_common/net.rs:214:5
    |
214 | /     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {
215 | |         self.inner.timeout(c::SO_RCVTIMEO)
216 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<core::time::Duration>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:214:5
    |
214 | /     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {
215 | |         self.inner.timeout(c::SO_RCVTIMEO)
216 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/sys_common/net.rs:214:5
    |
214 | /     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {
215 | |         self.inner.timeout(c::SO_RCVTIMEO)
216 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::option::Option<core::time::Duration>` cannot be known at compilation time
   --> libstd/sys_common/net.rs:218:5
    |
218 | /     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {
219 | |         self.inner.timeout(c::SO_SNDTIMEO)
220 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<core::time::Duration>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:218:5
    |
218 | /     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {
219 | |         self.inner.timeout(c::SO_SNDTIMEO)
220 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/sys_common/net.rs:218:5
    |
218 | /     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {
219 | |         self.inner.timeout(c::SO_SNDTIMEO)
220 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/net.rs:222:5
    |
222 | /     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {
223 | |         self.inner.peek(buf)
224 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:222:5
    |
222 | /     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {
223 | |         self.inner.peek(buf)
224 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/net.rs:226:5
    |
226 | /     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {
227 | |         self.inner.read(buf)
228 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:226:5
    |
226 | /     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {
227 | |         self.inner.read(buf)
228 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/net.rs:230:5
    |
230 | /     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {
231 | |         let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;
232 | |         let ret = cvt(unsafe {
233 | |             c::send(*self.inner.as_inner(),
...   |
238 | |         Ok(ret as usize)
239 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:230:5
    |
230 | /     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {
231 | |         let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;
232 | |         let ret = cvt(unsafe {
233 | |             c::send(*self.inner.as_inner(),
...   |
238 | |         Ok(ret as usize)
239 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/sys_common/net.rs:241:5
    |
241 | /     pub fn peer_addr(&self) -> io::Result<SocketAddr> {
242 | |         sockname(|buf, len| unsafe {
243 | |             c::getpeername(*self.inner.as_inner(), buf, len)
244 | |         })
245 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:241:5
    |
241 | /     pub fn peer_addr(&self) -> io::Result<SocketAddr> {
242 | |         sockname(|buf, len| unsafe {
243 | |             c::getpeername(*self.inner.as_inner(), buf, len)
244 | |         })
245 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/sys_common/net.rs:247:5
    |
247 | /     pub fn socket_addr(&self) -> io::Result<SocketAddr> {
248 | |         sockname(|buf, len| unsafe {
249 | |             c::getsockname(*self.inner.as_inner(), buf, len)
250 | |         })
251 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:247:5
    |
247 | /     pub fn socket_addr(&self) -> io::Result<SocketAddr> {
248 | |         sockname(|buf, len| unsafe {
249 | |             c::getsockname(*self.inner.as_inner(), buf, len)
250 | |         })
251 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:253:5
    |
253 | /     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {
254 | |         self.inner.shutdown(how)
255 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:253:5
    |
253 | /     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {
254 | |         self.inner.shutdown(how)
255 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::net::TcpStream` cannot be known at compilation time
   --> libstd/sys_common/net.rs:257:5
    |
257 | /     pub fn duplicate(&self) -> io::Result<TcpStream> {
258 | |         self.inner.duplicate().map(|s| TcpStream { inner: s })
259 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::net::TcpStream`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:257:5
    |
257 | /     pub fn duplicate(&self) -> io::Result<TcpStream> {
258 | |         self.inner.duplicate().map(|s| TcpStream { inner: s })
259 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:261:5
    |
261 | /     pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {
262 | |         self.inner.set_nodelay(nodelay)
263 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:261:5
    |
261 | /     pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {
262 | |         self.inner.set_nodelay(nodelay)
263 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/sys_common/net.rs:265:5
    |
265 | /     pub fn nodelay(&self) -> io::Result<bool> {
266 | |         self.inner.nodelay()
267 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:265:5
    |
265 | /     pub fn nodelay(&self) -> io::Result<bool> {
266 | |         self.inner.nodelay()
267 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:269:5
    |
269 | /     pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {
270 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_TTL, ttl as c_int)
271 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:269:5
    |
269 | /     pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {
270 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_TTL, ttl as c_int)
271 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/sys_common/net.rs:273:5
    |
273 | /     pub fn ttl(&self) -> io::Result<u32> {
274 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_TTL)?;
275 | |         Ok(raw as u32)
276 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:273:5
    |
273 | /     pub fn ttl(&self) -> io::Result<u32> {
274 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_TTL)?;
275 | |         Ok(raw as u32)
276 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<io::error::Error>` cannot be known at compilation time
   --> libstd/sys_common/net.rs:278:5
    |
278 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
279 | |         self.inner.take_error()
280 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<io::error::Error>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:278:5
    |
278 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
279 | |         self.inner.take_error()
280 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:282:5
    |
282 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
283 | |         self.inner.set_nonblocking(nonblocking)
284 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:282:5
    |
282 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
283 | |         self.inner.set_nonblocking(nonblocking)
284 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:294:5
    |
294 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
295 | |         let mut res = f.debug_struct("TcpStream");
296 | |
297 | |         if let Ok(addr) = self.socket_addr() {
...   |
307 | |             .finish()
308 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:294:5
    |
294 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
295 | |         let mut res = f.debug_struct("TcpStream");
296 | |
297 | |         if let Ok(addr) = self.socket_addr() {
...   |
307 | |             .finish()
308 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::net::TcpListener` cannot be known at compilation time
   --> libstd/sys_common/net.rs:320:5
    |
320 | /     pub fn bind(addr: &SocketAddr) -> io::Result<TcpListener> {
321 | |         init();
322 | |
323 | |         let sock = Socket::new(addr, c::SOCK_STREAM)?;
...   |
339 | |         Ok(TcpListener { inner: sock })
340 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::net::TcpListener`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:320:5
    |
320 | /     pub fn bind(addr: &SocketAddr) -> io::Result<TcpListener> {
321 | |         init();
322 | |
323 | |         let sock = Socket::new(addr, c::SOCK_STREAM)?;
...   |
339 | |         Ok(TcpListener { inner: sock })
340 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/sys_common/net.rs:346:5
    |
346 | /     pub fn socket_addr(&self) -> io::Result<SocketAddr> {
347 | |         sockname(|buf, len| unsafe {
348 | |             c::getsockname(*self.inner.as_inner(), buf, len)
349 | |         })
350 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:346:5
    |
346 | /     pub fn socket_addr(&self) -> io::Result<SocketAddr> {
347 | |         sockname(|buf, len| unsafe {
348 | |             c::getsockname(*self.inner.as_inner(), buf, len)
349 | |         })
350 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(sys_common::net::TcpStream, net::addr::SocketAddr)` cannot be known at compilation time
   --> libstd/sys_common/net.rs:352:5
    |
352 | /     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {
353 | |         let mut storage: c::sockaddr_storage = unsafe { mem::zeroed() };
354 | |         let mut len = mem::size_of_val(&storage) as c::socklen_t;
355 | |         let sock = self.inner.accept(&mut storage as *mut _ as *mut _,
...   |
358 | |         Ok((TcpStream { inner: sock, }, addr))
359 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(sys_common::net::TcpStream, net::addr::SocketAddr)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:352:5
    |
352 | /     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {
353 | |         let mut storage: c::sockaddr_storage = unsafe { mem::zeroed() };
354 | |         let mut len = mem::size_of_val(&storage) as c::socklen_t;
355 | |         let sock = self.inner.accept(&mut storage as *mut _ as *mut _,
...   |
358 | |         Ok((TcpStream { inner: sock, }, addr))
359 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::net::TcpListener` cannot be known at compilation time
   --> libstd/sys_common/net.rs:361:5
    |
361 | /     pub fn duplicate(&self) -> io::Result<TcpListener> {
362 | |         self.inner.duplicate().map(|s| TcpListener { inner: s })
363 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::net::TcpListener`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:361:5
    |
361 | /     pub fn duplicate(&self) -> io::Result<TcpListener> {
362 | |         self.inner.duplicate().map(|s| TcpListener { inner: s })
363 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:365:5
    |
365 | /     pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {
366 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_TTL, ttl as c_int)
367 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:365:5
    |
365 | /     pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {
366 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_TTL, ttl as c_int)
367 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/sys_common/net.rs:369:5
    |
369 | /     pub fn ttl(&self) -> io::Result<u32> {
370 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_TTL)?;
371 | |         Ok(raw as u32)
372 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:369:5
    |
369 | /     pub fn ttl(&self) -> io::Result<u32> {
370 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_TTL)?;
371 | |         Ok(raw as u32)
372 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:374:5
    |
374 | /     pub fn set_only_v6(&self, only_v6: bool) -> io::Result<()> {
375 | |         setsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_V6ONLY, only_v6 as c_int)
376 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:374:5
    |
374 | /     pub fn set_only_v6(&self, only_v6: bool) -> io::Result<()> {
375 | |         setsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_V6ONLY, only_v6 as c_int)
376 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/sys_common/net.rs:378:5
    |
378 | /     pub fn only_v6(&self) -> io::Result<bool> {
379 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_V6ONLY)?;
380 | |         Ok(raw != 0)
381 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:378:5
    |
378 | /     pub fn only_v6(&self) -> io::Result<bool> {
379 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_V6ONLY)?;
380 | |         Ok(raw != 0)
381 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<io::error::Error>` cannot be known at compilation time
   --> libstd/sys_common/net.rs:383:5
    |
383 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
384 | |         self.inner.take_error()
385 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<io::error::Error>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:383:5
    |
383 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
384 | |         self.inner.take_error()
385 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:387:5
    |
387 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
388 | |         self.inner.set_nonblocking(nonblocking)
389 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:387:5
    |
387 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
388 | |         self.inner.set_nonblocking(nonblocking)
389 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:399:5
    |
399 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
400 | |         let mut res = f.debug_struct("TcpListener");
401 | |
402 | |         if let Ok(addr) = self.socket_addr() {
...   |
408 | |             .finish()
409 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:399:5
    |
399 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
400 | |         let mut res = f.debug_struct("TcpListener");
401 | |
402 | |         if let Ok(addr) = self.socket_addr() {
...   |
408 | |             .finish()
409 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::net::UdpSocket` cannot be known at compilation time
   --> libstd/sys_common/net.rs:421:5
    |
421 | /     pub fn bind(addr: &SocketAddr) -> io::Result<UdpSocket> {
422 | |         init();
423 | |
424 | |         let sock = Socket::new(addr, c::SOCK_DGRAM)?;
...   |
427 | |         Ok(UdpSocket { inner: sock })
428 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::net::UdpSocket`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:421:5
    |
421 | /     pub fn bind(addr: &SocketAddr) -> io::Result<UdpSocket> {
422 | |         init();
423 | |
424 | |         let sock = Socket::new(addr, c::SOCK_DGRAM)?;
...   |
427 | |         Ok(UdpSocket { inner: sock })
428 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `net::addr::SocketAddr` cannot be known at compilation time
   --> libstd/sys_common/net.rs:434:5
    |
434 | /     pub fn socket_addr(&self) -> io::Result<SocketAddr> {
435 | |         sockname(|buf, len| unsafe {
436 | |             c::getsockname(*self.inner.as_inner(), buf, len)
437 | |         })
438 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `net::addr::SocketAddr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:434:5
    |
434 | /     pub fn socket_addr(&self) -> io::Result<SocketAddr> {
435 | |         sockname(|buf, len| unsafe {
436 | |             c::getsockname(*self.inner.as_inner(), buf, len)
437 | |         })
438 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(usize, net::addr::SocketAddr)` cannot be known at compilation time
   --> libstd/sys_common/net.rs:440:5
    |
440 | /     pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {
441 | |         self.inner.recv_from(buf)
442 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(usize, net::addr::SocketAddr)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:440:5
    |
440 | /     pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {
441 | |         self.inner.recv_from(buf)
442 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(usize, net::addr::SocketAddr)` cannot be known at compilation time
   --> libstd/sys_common/net.rs:444:5
    |
444 | /     pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {
445 | |         self.inner.peek_from(buf)
446 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(usize, net::addr::SocketAddr)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:444:5
    |
444 | /     pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {
445 | |         self.inner.peek_from(buf)
446 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/net.rs:448:5
    |
448 | /     pub fn send_to(&self, buf: &[u8], dst: &SocketAddr) -> io::Result<usize> {
449 | |         let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;
450 | |         let (dstp, dstlen) = dst.into_inner();
451 | |         let ret = cvt(unsafe {
...   |
456 | |         Ok(ret as usize)
457 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:448:5
    |
448 | /     pub fn send_to(&self, buf: &[u8], dst: &SocketAddr) -> io::Result<usize> {
449 | |         let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;
450 | |         let (dstp, dstlen) = dst.into_inner();
451 | |         let ret = cvt(unsafe {
...   |
456 | |         Ok(ret as usize)
457 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys_common::net::UdpSocket` cannot be known at compilation time
   --> libstd/sys_common/net.rs:459:5
    |
459 | /     pub fn duplicate(&self) -> io::Result<UdpSocket> {
460 | |         self.inner.duplicate().map(|s| UdpSocket { inner: s })
461 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys_common::net::UdpSocket`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:459:5
    |
459 | /     pub fn duplicate(&self) -> io::Result<UdpSocket> {
460 | |         self.inner.duplicate().map(|s| UdpSocket { inner: s })
461 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/sys_common/net.rs:463:5
    |
463 | /     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
464 | |         self.inner.set_timeout(dur, c::SO_RCVTIMEO)
465 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:463:5
    |
463 | /     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
464 | |         self.inner.set_timeout(dur, c::SO_RCVTIMEO)
465 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:463:5
    |
463 | /     pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
464 | |         self.inner.set_timeout(dur, c::SO_RCVTIMEO)
465 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/sys_common/net.rs:467:5
    |
467 | /     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
468 | |         self.inner.set_timeout(dur, c::SO_SNDTIMEO)
469 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:467:5
    |
467 | /     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
468 | |         self.inner.set_timeout(dur, c::SO_SNDTIMEO)
469 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:467:5
    |
467 | /     pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {
468 | |         self.inner.set_timeout(dur, c::SO_SNDTIMEO)
469 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<core::time::Duration>` cannot be known at compilation time
   --> libstd/sys_common/net.rs:471:5
    |
471 | /     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {
472 | |         self.inner.timeout(c::SO_RCVTIMEO)
473 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<core::time::Duration>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:471:5
    |
471 | /     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {
472 | |         self.inner.timeout(c::SO_RCVTIMEO)
473 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/sys_common/net.rs:471:5
    |
471 | /     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {
472 | |         self.inner.timeout(c::SO_RCVTIMEO)
473 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::option::Option<core::time::Duration>` cannot be known at compilation time
   --> libstd/sys_common/net.rs:475:5
    |
475 | /     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {
476 | |         self.inner.timeout(c::SO_SNDTIMEO)
477 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<core::time::Duration>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:475:5
    |
475 | /     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {
476 | |         self.inner.timeout(c::SO_SNDTIMEO)
477 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/sys_common/net.rs:475:5
    |
475 | /     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {
476 | |         self.inner.timeout(c::SO_SNDTIMEO)
477 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:479:5
    |
479 | /     pub fn set_broadcast(&self, broadcast: bool) -> io::Result<()> {
480 | |         setsockopt(&self.inner, c::SOL_SOCKET, c::SO_BROADCAST, broadcast as c_int)
481 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:479:5
    |
479 | /     pub fn set_broadcast(&self, broadcast: bool) -> io::Result<()> {
480 | |         setsockopt(&self.inner, c::SOL_SOCKET, c::SO_BROADCAST, broadcast as c_int)
481 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/sys_common/net.rs:483:5
    |
483 | /     pub fn broadcast(&self) -> io::Result<bool> {
484 | |         let raw: c_int = getsockopt(&self.inner, c::SOL_SOCKET, c::SO_BROADCAST)?;
485 | |         Ok(raw != 0)
486 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:483:5
    |
483 | /     pub fn broadcast(&self) -> io::Result<bool> {
484 | |         let raw: c_int = getsockopt(&self.inner, c::SOL_SOCKET, c::SO_BROADCAST)?;
485 | |         Ok(raw != 0)
486 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:488:5
    |
488 | /     pub fn set_multicast_loop_v4(&self, multicast_loop_v4: bool) -> io::Result<()> {
489 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_LOOP, multicast_loop_v4 as c_int)
490 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:488:5
    |
488 | /     pub fn set_multicast_loop_v4(&self, multicast_loop_v4: bool) -> io::Result<()> {
489 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_LOOP, multicast_loop_v4 as c_int)
490 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/sys_common/net.rs:492:5
    |
492 | /     pub fn multicast_loop_v4(&self) -> io::Result<bool> {
493 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_LOOP)?;
494 | |         Ok(raw != 0)
495 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:492:5
    |
492 | /     pub fn multicast_loop_v4(&self) -> io::Result<bool> {
493 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_LOOP)?;
494 | |         Ok(raw != 0)
495 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:497:5
    |
497 | /     pub fn set_multicast_ttl_v4(&self, multicast_ttl_v4: u32) -> io::Result<()> {
498 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_TTL, multicast_ttl_v4 as c_int)
499 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:497:5
    |
497 | /     pub fn set_multicast_ttl_v4(&self, multicast_ttl_v4: u32) -> io::Result<()> {
498 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_TTL, multicast_ttl_v4 as c_int)
499 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/sys_common/net.rs:501:5
    |
501 | /     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {
502 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_TTL)?;
503 | |         Ok(raw as u32)
504 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:501:5
    |
501 | /     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {
502 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_TTL)?;
503 | |         Ok(raw as u32)
504 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:506:5
    |
506 | /     pub fn set_multicast_loop_v6(&self, multicast_loop_v6: bool) -> io::Result<()> {
507 | |         setsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_MULTICAST_LOOP, multicast_loop_v6 as c_int)
508 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:506:5
    |
506 | /     pub fn set_multicast_loop_v6(&self, multicast_loop_v6: bool) -> io::Result<()> {
507 | |         setsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_MULTICAST_LOOP, multicast_loop_v6 as c_int)
508 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/sys_common/net.rs:510:5
    |
510 | /     pub fn multicast_loop_v6(&self) -> io::Result<bool> {
511 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_MULTICAST_LOOP)?;
512 | |         Ok(raw != 0)
513 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:510:5
    |
510 | /     pub fn multicast_loop_v6(&self) -> io::Result<bool> {
511 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IPV6, c::IPV6_MULTICAST_LOOP)?;
512 | |         Ok(raw != 0)
513 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:515:5
    |
515 | /     pub fn join_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr)
516 | |                          -> io::Result<()> {
517 | |         let mreq = c::ip_mreq {
518 | |             imr_multiaddr: *multiaddr.as_inner(),
...   |
521 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_ADD_MEMBERSHIP, mreq)
522 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:515:5
    |
515 | /     pub fn join_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr)
516 | |                          -> io::Result<()> {
517 | |         let mreq = c::ip_mreq {
518 | |             imr_multiaddr: *multiaddr.as_inner(),
...   |
521 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_ADD_MEMBERSHIP, mreq)
522 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:524:5
    |
524 | /     pub fn join_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32)
525 | |                          -> io::Result<()> {
526 | |         let mreq = c::ipv6_mreq {
527 | |             ipv6mr_multiaddr: *multiaddr.as_inner(),
...   |
530 | |         setsockopt(&self.inner, c::IPPROTO_IPV6, IPV6_ADD_MEMBERSHIP, mreq)
531 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:524:5
    |
524 | /     pub fn join_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32)
525 | |                          -> io::Result<()> {
526 | |         let mreq = c::ipv6_mreq {
527 | |             ipv6mr_multiaddr: *multiaddr.as_inner(),
...   |
530 | |         setsockopt(&self.inner, c::IPPROTO_IPV6, IPV6_ADD_MEMBERSHIP, mreq)
531 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:533:5
    |
533 | /     pub fn leave_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr)
534 | |                           -> io::Result<()> {
535 | |         let mreq = c::ip_mreq {
536 | |             imr_multiaddr: *multiaddr.as_inner(),
...   |
539 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_DROP_MEMBERSHIP, mreq)
540 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:533:5
    |
533 | /     pub fn leave_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr)
534 | |                           -> io::Result<()> {
535 | |         let mreq = c::ip_mreq {
536 | |             imr_multiaddr: *multiaddr.as_inner(),
...   |
539 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_DROP_MEMBERSHIP, mreq)
540 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:542:5
    |
542 | /     pub fn leave_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32)
543 | |                           -> io::Result<()> {
544 | |         let mreq = c::ipv6_mreq {
545 | |             ipv6mr_multiaddr: *multiaddr.as_inner(),
...   |
548 | |         setsockopt(&self.inner, c::IPPROTO_IPV6, IPV6_DROP_MEMBERSHIP, mreq)
549 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:542:5
    |
542 | /     pub fn leave_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32)
543 | |                           -> io::Result<()> {
544 | |         let mreq = c::ipv6_mreq {
545 | |             ipv6mr_multiaddr: *multiaddr.as_inner(),
...   |
548 | |         setsockopt(&self.inner, c::IPPROTO_IPV6, IPV6_DROP_MEMBERSHIP, mreq)
549 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:551:5
    |
551 | /     pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {
552 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_TTL, ttl as c_int)
553 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:551:5
    |
551 | /     pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {
552 | |         setsockopt(&self.inner, c::IPPROTO_IP, c::IP_TTL, ttl as c_int)
553 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u32` cannot be known at compilation time
   --> libstd/sys_common/net.rs:555:5
    |
555 | /     pub fn ttl(&self) -> io::Result<u32> {
556 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_TTL)?;
557 | |         Ok(raw as u32)
558 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:555:5
    |
555 | /     pub fn ttl(&self) -> io::Result<u32> {
556 | |         let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_TTL)?;
557 | |         Ok(raw as u32)
558 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<io::error::Error>` cannot be known at compilation time
   --> libstd/sys_common/net.rs:560:5
    |
560 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
561 | |         self.inner.take_error()
562 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<io::error::Error>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:560:5
    |
560 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
561 | |         self.inner.take_error()
562 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:564:5
    |
564 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
565 | |         self.inner.set_nonblocking(nonblocking)
566 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:564:5
    |
564 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
565 | |         self.inner.set_nonblocking(nonblocking)
566 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/net.rs:568:5
    |
568 | /     pub fn recv(&self, buf: &mut [u8]) -> io::Result<usize> {
569 | |         self.inner.read(buf)
570 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:568:5
    |
568 | /     pub fn recv(&self, buf: &mut [u8]) -> io::Result<usize> {
569 | |         self.inner.read(buf)
570 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/net.rs:572:5
    |
572 | /     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {
573 | |         self.inner.peek(buf)
574 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:572:5
    |
572 | /     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {
573 | |         self.inner.peek(buf)
574 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys_common/net.rs:576:5
    |
576 | /     pub fn send(&self, buf: &[u8]) -> io::Result<usize> {
577 | |         let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;
578 | |         let ret = cvt(unsafe {
579 | |             c::send(*self.inner.as_inner(),
...   |
584 | |         Ok(ret as usize)
585 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:576:5
    |
576 | /     pub fn send(&self, buf: &[u8]) -> io::Result<usize> {
577 | |         let len = cmp::min(buf.len(), <wrlen_t>::max_value() as usize) as wrlen_t;
578 | |         let ret = cvt(unsafe {
579 | |             c::send(*self.inner.as_inner(),
...   |
584 | |         Ok(ret as usize)
585 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:587:5
    |
587 | /     pub fn connect(&self, addr: &SocketAddr) -> io::Result<()> {
588 | |         let (addrp, len) = addr.into_inner();
589 | |         cvt_r(|| unsafe { c::connect(*self.inner.as_inner(), addrp, len) }).map(|_| ())
590 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:587:5
    |
587 | /     pub fn connect(&self, addr: &SocketAddr) -> io::Result<()> {
588 | |         let (addrp, len) = addr.into_inner();
589 | |         cvt_r(|| unsafe { c::connect(*self.inner.as_inner(), addrp, len) }).map(|_| ())
590 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys_common/net.rs:600:5
    |
600 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
601 | |         let mut res = f.debug_struct("UdpSocket");
602 | |
603 | |         if let Ok(addr) = self.socket_addr() {
...   |
609 | |             .finish()
610 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys_common/net.rs:600:5
    |
600 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
601 | |         let mut res = f.debug_struct("UdpSocket");
602 | |
603 | |         if let Ok(addr) = self.socket_addr() {
...   |
609 | |             .finish()
610 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
  --> libstd/sys/vxworks/args.rs:31:5
   |
31 |     fn next(&mut self) -> Option<OsString> { self.iter.next() }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/args.rs:32:5
   |
32 |     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `ffi::os_str::OsString` cannot be known at compilation time
  --> libstd/sys/vxworks/args.rs:40:5
   |
40 |     fn next_back(&mut self) -> Option<OsString> { self.iter.next_back() }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `ffi::os_str::OsString`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/ext/ffi.rs:51:5
   |
51 | /     fn from_vec(vec: Vec<u8>) -> OsString {
52 | |         FromInner::from_inner(Buf { inner: vec })
53 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/ext/ffi.rs:54:5
   |
54 | /     fn into_vec(self) -> Vec<u8> {
55 | |         self.into_inner().inner
56 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/ext/fs.rs:227:5
    |
227 | /     fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {
228 | |         self.as_inner().read_at(buf, offset)
229 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/ext/fs.rs:227:5
    |
227 | /     fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {
228 | |         self.as_inner().read_at(buf, offset)
229 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/ext/fs.rs:230:5
    |
230 | /     fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {
231 | |         self.as_inner().write_at(buf, offset)
232 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/ext/fs.rs:230:5
    |
230 | /     fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {
231 | |         self.as_inner().write_at(buf, offset)
232 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:37:5
   |
37 | /     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {
38 | |         let ret = cvt(unsafe {
39 | |             libc::read(self.fd,
40 | |                        buf.as_mut_ptr() as *mut c_void,
...  |
43 | |         Ok(ret as usize)
44 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:37:5
   |
37 | /     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {
38 | |         let ret = cvt(unsafe {
39 | |             libc::read(self.fd,
40 | |                        buf.as_mut_ptr() as *mut c_void,
...  |
43 | |         Ok(ret as usize)
44 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:46:5
   |
46 | /     pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {
47 | |         let mut me = self;
48 | |         (&mut me).read_to_end(buf)
49 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:46:5
   |
46 | /     pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {
47 | |         let mut me = self;
48 | |         (&mut me).read_to_end(buf)
49 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:46:5
   |
46 | /     pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {
47 | |         let mut me = self;
48 | |         (&mut me).read_to_end(buf)
49 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:51:5
   |
51 | /     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {
52 | |         unsafe fn cvt_pread(fd: c_int, buf: *mut c_void, count: usize, offset: i64)
53 | |             -> io::Result<isize>
54 | |         {
...  |
65 | |         }
66 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:51:5
   |
51 | /     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {
52 | |         unsafe fn cvt_pread(fd: c_int, buf: *mut c_void, count: usize, offset: i64)
53 | |             -> io::Result<isize>
54 | |         {
...  |
65 | |         }
66 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:68:5
   |
68 | /     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {
69 | |         let ret = cvt(unsafe {
70 | |             libc::write(self.fd,
71 | |             buf.as_ptr() as *const c_void,
...  |
74 | |         Ok(ret as usize)
75 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:68:5
   |
68 | /     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {
69 | |         let ret = cvt(unsafe {
70 | |             libc::write(self.fd,
71 | |             buf.as_ptr() as *const c_void,
...  |
74 | |         Ok(ret as usize)
75 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:77:5
   |
77 | /     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {
78 | |         unsafe fn cvt_pwrite(fd: c_int, buf: *const c_void, count: usize, offset: i64)
79 | |             -> io::Result<isize>
80 | |         {
...  |
91 | |         }
92 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:77:5
   |
77 | /     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {
78 | |         unsafe fn cvt_pwrite(fd: c_int, buf: *const c_void, count: usize, offset: i64)
79 | |             -> io::Result<isize>
80 | |         {
...  |
91 | |         }
92 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:94:5
   |
94 | /     pub fn get_cloexec(&self) -> io::Result<bool> {
95 | |         unsafe {
96 | |             Ok((cvt(libc::fcntl(self.fd, libc::F_GETFD))? & libc::FD_CLOEXEC) != 0)
97 | |         }
98 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `bool`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:94:5
   |
94 | /     pub fn get_cloexec(&self) -> io::Result<bool> {
95 | |         unsafe {
96 | |             Ok((cvt(libc::fcntl(self.fd, libc::F_GETFD))? & libc::FD_CLOEXEC) != 0)
97 | |         }
98 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fd.rs:100:5
    |
100 | /     pub fn set_cloexec(&self) -> io::Result<()> {
101 | |         unsafe {
102 | |             let previous = cvt(libc::fcntl(self.fd, libc::F_GETFD))?;
103 | |             let new = previous | libc::FD_CLOEXEC;
...   |
108 | |         }
109 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fd.rs:100:5
    |
100 | /     pub fn set_cloexec(&self) -> io::Result<()> {
101 | |         unsafe {
102 | |             let previous = cvt(libc::fcntl(self.fd, libc::F_GETFD))?;
103 | |             let new = previous | libc::FD_CLOEXEC;
...   |
108 | |         }
109 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fd.rs:111:5
    |
111 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
112 | |         unsafe {
113 | |             let v = nonblocking as c_int;
114 | |             cvt(libc::ioctl(self.fd, libc::FIONBIO, &v))?;
115 | |             Ok(())
116 | |         }
117 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fd.rs:111:5
    |
111 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
112 | |         unsafe {
113 | |             let v = nonblocking as c_int;
114 | |             cvt(libc::ioctl(self.fd, libc::FIONBIO, &v))?;
115 | |             Ok(())
116 | |         }
117 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fd.rs:121:5
    |
121 | /     pub fn set_nonblocking_pipe(&self, nonblocking: bool) -> io::Result<()> {
122 | |         unsafe {
123 | |             let mut flags = cvt(libc::fcntl(self.fd, libc::F_GETFL, 0))?;
124 | |             flags = if nonblocking {
...   |
131 | |         }
132 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fd.rs:121:5
    |
121 | /     pub fn set_nonblocking_pipe(&self, nonblocking: bool) -> io::Result<()> {
122 | |         unsafe {
123 | |             let mut flags = cvt(libc::fcntl(self.fd, libc::F_GETFL, 0))?;
124 | |             flags = if nonblocking {
...   |
131 | |         }
132 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::fd::FileDesc` cannot be known at compilation time
   --> libstd/sys/vxworks/fd.rs:135:5
    |
135 | /     pub fn duplicate(&self) -> io::Result<FileDesc> {
136 | |         // We want to atomically duplicate this file descriptor and set the
137 | |         // CLOEXEC flag, and currently that's done via F_DUPFD_CLOEXEC. This
138 | |         // flag, however, isn't supported on older Linux kernels (earlier than
...   |
182 | |         cvt(unsafe { libc::fcntl(fd, libc::F_DUPFD, 0) }).and_then(make_filedesc)
183 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fd::FileDesc`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fd.rs:135:5
    |
135 | /     pub fn duplicate(&self) -> io::Result<FileDesc> {
136 | |         // We want to atomically duplicate this file descriptor and set the
137 | |         // CLOEXEC flag, and currently that's done via F_DUPFD_CLOEXEC. This
138 | |         // flag, however, isn't supported on older Linux kernels (earlier than
...   |
182 | |         cvt(unsafe { libc::fcntl(fd, libc::F_DUPFD, 0) }).and_then(make_filedesc)
183 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/fd.rs:187:5
    |
187 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
188 | |         (**self).read(buf)
189 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fd.rs:187:5
    |
187 | /     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
188 | |         (**self).read(buf)
189 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/ffi.rs:49:2
   |
49 |       fn from_vec(vec: Vec<u8>) -> OsString {
   |  _____^
50 | |         FromInner::from_inner(Buf { inner: vec })
51 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/ffi.rs:52:2
   |
52 |       fn into_vec(self) -> Vec<u8> {
   |  _____^
53 | |         self.into_inner().inner
54 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/ffifix.rs:12:5
   |
12 | /     fn from_vec(vec: Vec<u8>) -> OsString {
13 | |         FromInner::from_inner(Buf { inner: vec })
14 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/ffifix.rs:15:5
   |
15 | /     fn into_vec(self) -> Vec<u8> {
16 | |         self.into_inner().inner
17 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `sys::vxworks::time::inner::SystemTime` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:78:5
   |
78 | /     pub fn modified(&self) -> io::Result<SystemTime> {
79 | |         Ok(SystemTime::from(libc::timespec {
80 | |             tv_sec: self.stat.st_mtime as libc::time_t,
81 | |             tv_nsec: 0, // hack 2.0;
82 | |         }))
83 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::time::inner::SystemTime`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:78:5
   |
78 | /     pub fn modified(&self) -> io::Result<SystemTime> {
79 | |         Ok(SystemTime::from(libc::timespec {
80 | |             tv_sec: self.stat.st_mtime as libc::time_t,
81 | |             tv_nsec: 0, // hack 2.0;
82 | |         }))
83 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::time::inner::SystemTime` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:85:5
   |
85 | /     pub fn accessed(&self) -> io::Result<SystemTime> {
86 | |         Ok(SystemTime::from(libc::timespec {
87 | |         tv_sec: self.stat.st_atime as libc::time_t,
88 | |         tv_nsec: 0, // hack - a proper fix would be better
89 | |         }))
90 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::time::inner::SystemTime`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:85:5
   |
85 | /     pub fn accessed(&self) -> io::Result<SystemTime> {
86 | |         Ok(SystemTime::from(libc::timespec {
87 | |         tv_sec: self.stat.st_atime as libc::time_t,
88 | |         tv_nsec: 0, // hack - a proper fix would be better
89 | |         }))
90 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::time::inner::SystemTime` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:92:5
   |
92 | /     pub fn created(&self) -> io::Result<SystemTime> {
93 | |         Err(io::Error::new(io::ErrorKind::Other, "creation time is not available on this platform currently"))
94 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::time::inner::SystemTime`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:92:5
   |
92 | /     pub fn created(&self) -> io::Result<SystemTime> {
93 | |         Err(io::Error::new(io::ErrorKind::Other, "creation time is not available on this platform currently"))
94 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:135:5
    |
135 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
136 | |         // This will only be called from std::fs::ReadDir, which will add a "ReadDir()" frame.
137 | |         // Thus the result will be e g 'ReadDir("/home")'
138 | |         fmt::Debug::fmt(&*self.inner.root, f)
139 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:135:5
    |
135 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
136 | |         // This will only be called from std::fs::ReadDir, which will add a "ReadDir()" frame.
137 | |         // Thus the result will be e g 'ReadDir("/home")'
138 | |         fmt::Debug::fmt(&*self.inner.root, f)
139 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::fs::DirEntry` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:143:5
    |
143 |     type Item = io::Result<DirEntry>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::DirEntry`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:143:5
    |
143 |     type Item = io::Result<DirEntry>;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::result::Result<sys::vxworks::fs::DirEntry, io::error::Error>` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:144:5
    |
144 | /     fn next(&mut self) -> Option<io::Result<DirEntry>> {
145 | |         if self.end_of_stream {
146 | |             return None;
147 | |         }
...   |
173 | |         }
174 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::result::Result<sys::vxworks::fs::DirEntry, io::error::Error>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `sys::vxworks::fs::DirEntry` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:144:5
    |
144 | /     fn next(&mut self) -> Option<io::Result<DirEntry>> {
145 | |         if self.end_of_stream {
146 | |             return None;
147 | |         }
...   |
173 | |         }
174 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::DirEntry`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:144:5
    |
144 | /     fn next(&mut self) -> Option<io::Result<DirEntry>> {
145 | |         if self.end_of_stream {
146 | |             return None;
147 | |         }
...   |
173 | |         }
174 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::fs::FileAttr` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:195:5
    |
195 | /     pub fn metadata(&self) -> io::Result<FileAttr> {
196 | |         lstat(&self.path())
197 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::FileAttr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:195:5
    |
195 | /     pub fn metadata(&self) -> io::Result<FileAttr> {
196 | |         lstat(&self.path())
197 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::fs::FileType` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:199:5
    |
199 | /     pub fn file_type(&self) -> io::Result<FileType> {
200 | |         lstat(&self.path()).map(|m| m.file_type())
201 | |
202 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::FileType`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:199:5
    |
199 | /     pub fn file_type(&self) -> io::Result<FileType> {
200 | |         lstat(&self.path()).map(|m| m.file_type())
201 | |
202 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `i32` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:240:5
    |
240 | /     fn get_access_mode(&self) -> io::Result<c_int> {
241 | |         match (self.read, self.write, self.append) {
242 | |             (true,  false, false) => Ok(libc::O_RDONLY),
243 | |             (false, true,  false) => Ok(libc::O_WRONLY),
...   |
248 | |         }
249 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `i32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:240:5
    |
240 | /     fn get_access_mode(&self) -> io::Result<c_int> {
241 | |         match (self.read, self.write, self.append) {
242 | |             (true,  false, false) => Ok(libc::O_RDONLY),
243 | |             (false, true,  false) => Ok(libc::O_WRONLY),
...   |
248 | |         }
249 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `i32` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:251:5
    |
251 | /     fn get_creation_mode(&self) -> io::Result<c_int> {
252 | |         match (self.write, self.append) {
253 | |             (true, false) => {}
254 | |             (false, false) =>
...   |
270 | |            })
271 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `i32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:251:5
    |
251 | /     fn get_creation_mode(&self) -> io::Result<c_int> {
252 | |         match (self.write, self.append) {
253 | |             (true, false) => {}
254 | |             (false, false) =>
...   |
270 | |            })
271 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::fs::File` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:275:5
    |
275 | /     pub fn open(path: &Path, opts: &OpenOptions) -> io::Result<File> {
276 | |         let path = cstr(path)?;
277 | |         File::open_c(&path, opts)
278 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::File`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:275:5
    |
275 | /     pub fn open(path: &Path, opts: &OpenOptions) -> io::Result<File> {
276 | |         let path = cstr(path)?;
277 | |         File::open_c(&path, opts)
278 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::fs::File` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:280:5
    |
280 | /     pub fn open_c(path: &CStr, opts: &OpenOptions) -> io::Result<File> {
281 | |         let flags = libc::O_CLOEXEC |
282 | |                 opts.get_access_mode()? |
283 | |                 opts.get_creation_mode()? |
...   |
304 | |         Ok(File(fd))
305 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::File`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:280:5
    |
280 | /     pub fn open_c(path: &CStr, opts: &OpenOptions) -> io::Result<File> {
281 | |         let flags = libc::O_CLOEXEC |
282 | |                 opts.get_access_mode()? |
283 | |                 opts.get_creation_mode()? |
...   |
304 | |         Ok(File(fd))
305 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::fs::FileAttr` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:307:5
    |
307 | /     pub fn file_attr(&self) -> io::Result<FileAttr> {
308 | |         let mut stat: stat = unsafe { mem::zeroed() };
309 | |         cvt(unsafe {
310 | |             ::libc::fstat(self.0.raw(), &mut stat)
311 | |         })?;
312 | |         Ok(FileAttr { stat: stat })
313 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::FileAttr`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:307:5
    |
307 | /     pub fn file_attr(&self) -> io::Result<FileAttr> {
308 | |         let mut stat: stat = unsafe { mem::zeroed() };
309 | |         cvt(unsafe {
310 | |             ::libc::fstat(self.0.raw(), &mut stat)
311 | |         })?;
312 | |         Ok(FileAttr { stat: stat })
313 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:315:5
    |
315 | /     pub fn fsync(&self) -> io::Result<()> {
316 | |         cvt_r(|| unsafe { libc::fsync(self.0.raw()) })?;
317 | |         Ok(())
318 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:315:5
    |
315 | /     pub fn fsync(&self) -> io::Result<()> {
316 | |         cvt_r(|| unsafe { libc::fsync(self.0.raw()) })?;
317 | |         Ok(())
318 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:320:5
    |
320 | /     pub fn datasync(&self) -> io::Result<()> {
321 | |         cvt_r(|| unsafe { os_datasync(self.0.raw()) })?;
322 | |         return Ok(());
323 | |         unsafe fn os_datasync(fd: c_int) -> c_int { libc::fsync(fd) } //not supported
324 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:320:5
    |
320 | /     pub fn datasync(&self) -> io::Result<()> {
321 | |         cvt_r(|| unsafe { os_datasync(self.0.raw()) })?;
322 | |         return Ok(());
323 | |         unsafe fn os_datasync(fd: c_int) -> c_int { libc::fsync(fd) } //not supported
324 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:326:5
    |
326 | /     pub fn truncate(&self, size: u64) -> io::Result<()> {
327 | |         return cvt_r(|| unsafe {
328 | |             ftruncate(self.0.raw(), size as off_t)
329 | |         }).map(|_| ());
330 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:326:5
    |
326 | /     pub fn truncate(&self, size: u64) -> io::Result<()> {
327 | |         return cvt_r(|| unsafe {
328 | |             ftruncate(self.0.raw(), size as off_t)
329 | |         }).map(|_| ());
330 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:332:5
    |
332 | /     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {
333 | |         self.0.read(buf)
334 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:332:5
    |
332 | /     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {
333 | |         self.0.read(buf)
334 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:336:5
    |
336 | /     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {
337 | |         self.0.read_at(buf, offset)
338 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:336:5
    |
336 | /     pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {
337 | |         self.0.read_at(buf, offset)
338 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:340:5
    |
340 | /     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {
341 | |         self.0.write(buf)
342 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:340:5
    |
340 | /     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {
341 | |         self.0.write(buf)
342 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:344:5
    |
344 | /     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {
345 | |         self.0.write_at(buf, offset)
346 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:344:5
    |
344 | /     pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {
345 | |         self.0.write_at(buf, offset)
346 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:348:5
    |
348 |     pub fn flush(&self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:348:5
    |
348 |     pub fn flush(&self) -> io::Result<()> { Ok(()) }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u64` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:350:5
    |
350 | /     pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {
351 | |         let (whence, pos) = match pos {
352 | |             // Casting to `i64` is fine, too large values will end up as
353 | |             // negative which will cause an error in `"lseek64"`.
...   |
359 | |         Ok(n as u64)
360 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u64`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:350:5
    |
350 | /     pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {
351 | |         let (whence, pos) = match pos {
352 | |             // Casting to `i64` is fine, too large values will end up as
353 | |             // negative which will cause an error in `"lseek64"`.
...   |
359 | |         Ok(n as u64)
360 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::fs::File` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:362:5
    |
362 | /     pub fn duplicate(&self) -> io::Result<File> {
363 | |         self.0.duplicate().map(File)
364 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::fs::File`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:362:5
    |
362 | /     pub fn duplicate(&self) -> io::Result<File> {
363 | |         self.0.duplicate().map(File)
364 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:370:5
    |
370 | /     pub fn set_permissions(&self, perm: FilePermissions) -> io::Result<()> {
371 | |         cvt_r(|| unsafe { libc::fchmod(self.0.raw(), perm.mode) })?;
372 | |         Ok(())
373 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:370:5
    |
370 | /     pub fn set_permissions(&self, perm: FilePermissions) -> io::Result<()> {
371 | |         cvt_r(|| unsafe { libc::fchmod(self.0.raw(), perm.mode) })?;
372 | |         Ok(())
373 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:385:5
    |
385 | /     pub fn mkdir(&self, p: &Path) -> io::Result<()> {
386 | |         let p = cstr(p)?;
387 | |         cvt(unsafe { libc::mkdir(p.as_ptr(), self.mode) })?;
388 | |         Ok(())
389 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:385:5
    |
385 | /     pub fn mkdir(&self, p: &Path) -> io::Result<()> {
386 | |         let p = cstr(p)?;
387 | |         cvt(unsafe { libc::mkdir(p.as_ptr(), self.mode) })?;
388 | |         Ok(())
389 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:408:5
    |
408 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
409 | |         fn get_path(_fd: c_int) -> Option<PathBuf> {
410 | |             // FIXME(#:(): implement this for VxWorks
411 | |             None
...   |
427 | |         b.finish()
428 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/fs.rs:408:5
    |
408 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
409 | |         fn get_path(_fd: c_int) -> Option<PathBuf> {
410 | |             // FIXME(#:(): implement this for VxWorks
411 | |             None
...   |
427 | |         b.finish()
428 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::net::Socket` cannot be known at compilation time
  --> libstd/sys/vxworks/net.rs:58:5
   |
58 | /     pub fn new(addr: &SocketAddr, ty: c_int) -> io::Result<Socket> {
59 | |         let fam = match *addr {
60 | |             SocketAddr::V4(..) => libc::AF_INET,
61 | |             SocketAddr::V6(..) => libc::AF_INET6,
62 | |         };
63 | |         Socket::new_raw(fam, ty)
64 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::net::Socket`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/net.rs:58:5
   |
58 | /     pub fn new(addr: &SocketAddr, ty: c_int) -> io::Result<Socket> {
59 | |         let fam = match *addr {
60 | |             SocketAddr::V4(..) => libc::AF_INET,
61 | |             SocketAddr::V6(..) => libc::AF_INET6,
62 | |         };
63 | |         Socket::new_raw(fam, ty)
64 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::net::Socket` cannot be known at compilation time
  --> libstd/sys/vxworks/net.rs:66:5
   |
66 | /     pub fn new_raw(fam: c_int, ty: c_int) -> io::Result<Socket> {
67 | |         unsafe {
68 | |             // On linux we first attempt to pass the SOCK_CLOEXEC flag to
69 | |             // atomically create the socket and set it as CLOEXEC. Support for
...  |
86 | |         }
87 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::net::Socket`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/net.rs:66:5
   |
66 | /     pub fn new_raw(fam: c_int, ty: c_int) -> io::Result<Socket> {
67 | |         unsafe {
68 | |             // On linux we first attempt to pass the SOCK_CLOEXEC flag to
69 | |             // atomically create the socket and set it as CLOEXEC. Support for
...  |
86 | |         }
87 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `(sys::vxworks::net::Socket, sys::vxworks::net::Socket)` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:89:5
    |
89  | /     pub fn new_pair(fam: c_int, ty: c_int) -> io::Result<(Socket, Socket)> {
90  | |         unsafe {
91  | |             let mut fds = [0, 0];
92  | |
...   |
99  | |         }
100 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(sys::vxworks::net::Socket, sys::vxworks::net::Socket)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:89:5
    |
89  | /     pub fn new_pair(fam: c_int, ty: c_int) -> io::Result<(Socket, Socket)> {
90  | |         unsafe {
91  | |             let mut fds = [0, 0];
92  | |
...   |
99  | |         }
100 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:102:5
    |
102 | /     pub fn connect_timeout(&self, addr: &SocketAddr, timeout: Duration) -> io::Result<()> {
103 | |         self.set_nonblocking(true)?;
104 | |         let r = unsafe {
105 | |             let (addrp, len) = addr.into_inner();
...   |
168 | |         }
169 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:102:5
    |
102 | /     pub fn connect_timeout(&self, addr: &SocketAddr, timeout: Duration) -> io::Result<()> {
103 | |         self.set_nonblocking(true)?;
104 | |         let r = unsafe {
105 | |             let (addrp, len) = addr.into_inner();
...   |
168 | |         }
169 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::net::Socket` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:171:5
    |
171 | /     pub fn accept(&self, storage: *mut sockaddr, len: *mut socklen_t)
172 | |                   -> io::Result<Socket> {
173 | |         // Unfortunately the only known way right now to accept a socket and
174 | |         // atomically set the CLOEXEC flag is to use the `accept4` syscall on
...   |
182 | |         Ok(Socket(fd))
183 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::net::Socket`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:171:5
    |
171 | /     pub fn accept(&self, storage: *mut sockaddr, len: *mut socklen_t)
172 | |                   -> io::Result<Socket> {
173 | |         // Unfortunately the only known way right now to accept a socket and
174 | |         // atomically set the CLOEXEC flag is to use the `accept4` syscall on
...   |
182 | |         Ok(Socket(fd))
183 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::net::Socket` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:185:5
    |
185 | /     pub fn duplicate(&self) -> io::Result<Socket> {
186 | |         self.0.duplicate().map(Socket)
187 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::net::Socket`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:185:5
    |
185 | /     pub fn duplicate(&self) -> io::Result<Socket> {
186 | |         self.0.duplicate().map(Socket)
187 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:189:5
    |
189 | /     fn recv_with_flags(&self, buf: &mut [u8], flags: c_int) -> io::Result<usize> {
190 | |         let ret = cvt(unsafe {
191 | |             libc::recv(self.0.raw(),
192 | |                        buf.as_mut_ptr() as *mut c_void,
...   |
196 | |         Ok(ret as usize)
197 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:189:5
    |
189 | /     fn recv_with_flags(&self, buf: &mut [u8], flags: c_int) -> io::Result<usize> {
190 | |         let ret = cvt(unsafe {
191 | |             libc::recv(self.0.raw(),
192 | |                        buf.as_mut_ptr() as *mut c_void,
...   |
196 | |         Ok(ret as usize)
197 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:199:5
    |
199 | /     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {
200 | |         self.recv_with_flags(buf, 0)
201 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:199:5
    |
199 | /     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {
200 | |         self.recv_with_flags(buf, 0)
201 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:203:5
    |
203 | /     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {
204 | |         self.recv_with_flags(buf, MSG_PEEK)
205 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:203:5
    |
203 | /     pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {
204 | |         self.recv_with_flags(buf, MSG_PEEK)
205 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(usize, net::addr::SocketAddr)` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:207:5
    |
207 | /     fn recv_from_with_flags(&self, buf: &mut [u8], flags: c_int)
208 | |                             -> io::Result<(usize, SocketAddr)> {
209 | |         let mut storage: libc::sockaddr_storage = unsafe { mem::zeroed() };
210 | |         let mut addrlen = mem::size_of_val(&storage) as libc::socklen_t;
...   |
220 | |         Ok((n as usize, sockaddr_to_addr(&storage, addrlen as usize)?))
221 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(usize, net::addr::SocketAddr)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:207:5
    |
207 | /     fn recv_from_with_flags(&self, buf: &mut [u8], flags: c_int)
208 | |                             -> io::Result<(usize, SocketAddr)> {
209 | |         let mut storage: libc::sockaddr_storage = unsafe { mem::zeroed() };
210 | |         let mut addrlen = mem::size_of_val(&storage) as libc::socklen_t;
...   |
220 | |         Ok((n as usize, sockaddr_to_addr(&storage, addrlen as usize)?))
221 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(usize, net::addr::SocketAddr)` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:223:5
    |
223 | /     pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {
224 | |         self.recv_from_with_flags(buf, 0)
225 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(usize, net::addr::SocketAddr)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:223:5
    |
223 | /     pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {
224 | |         self.recv_from_with_flags(buf, 0)
225 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(usize, net::addr::SocketAddr)` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:227:5
    |
227 | /     pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {
228 | |         self.recv_from_with_flags(buf, MSG_PEEK)
229 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(usize, net::addr::SocketAddr)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:227:5
    |
227 | /     pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {
228 | |         self.recv_from_with_flags(buf, MSG_PEEK)
229 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:231:5
    |
231 | /     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {
232 | |         self.0.write(buf)
233 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:231:5
    |
231 | /     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {
232 | |         self.0.write(buf)
233 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:235:5
    |
235 | /     pub fn set_timeout(&self, dur: Option<Duration>, kind: libc::c_int) -> io::Result<()> {
236 | |         let timeout = match dur {
237 | |             Some(dur) => {
238 | |                 if dur.as_secs() == 0 && dur.subsec_nanos() == 0 {
...   |
264 | |         setsockopt(self, libc::SOL_SOCKET, kind, timeout)
265 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:235:5
    |
235 | /     pub fn set_timeout(&self, dur: Option<Duration>, kind: libc::c_int) -> io::Result<()> {
236 | |         let timeout = match dur {
237 | |             Some(dur) => {
238 | |                 if dur.as_secs() == 0 && dur.subsec_nanos() == 0 {
...   |
264 | |         setsockopt(self, libc::SOL_SOCKET, kind, timeout)
265 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:235:5
    |
235 | /     pub fn set_timeout(&self, dur: Option<Duration>, kind: libc::c_int) -> io::Result<()> {
236 | |         let timeout = match dur {
237 | |             Some(dur) => {
238 | |                 if dur.as_secs() == 0 && dur.subsec_nanos() == 0 {
...   |
264 | |         setsockopt(self, libc::SOL_SOCKET, kind, timeout)
265 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<core::time::Duration>` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:267:5
    |
267 | /     pub fn timeout(&self, kind: libc::c_int) -> io::Result<Option<Duration>> {
268 | |         let raw: libc::timeval = getsockopt(self, libc::SOL_SOCKET, kind)?;
269 | |         if raw.tv_sec == 0 && raw.tv_usec == 0 {
270 | |             Ok(None)
...   |
275 | |         }
276 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<core::time::Duration>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:267:5
    |
267 | /     pub fn timeout(&self, kind: libc::c_int) -> io::Result<Option<Duration>> {
268 | |         let raw: libc::timeval = getsockopt(self, libc::SOL_SOCKET, kind)?;
269 | |         if raw.tv_sec == 0 && raw.tv_usec == 0 {
270 | |             Ok(None)
...   |
275 | |         }
276 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:267:5
    |
267 | /     pub fn timeout(&self, kind: libc::c_int) -> io::Result<Option<Duration>> {
268 | |         let raw: libc::timeval = getsockopt(self, libc::SOL_SOCKET, kind)?;
269 | |         if raw.tv_sec == 0 && raw.tv_usec == 0 {
270 | |             Ok(None)
...   |
275 | |         }
276 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:278:5
    |
278 | /     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {
279 | |         let how = match how {
280 | |             Shutdown::Write => libc::SHUT_WR,
281 | |             Shutdown::Read => libc::SHUT_RD,
...   |
285 | |         Ok(())
286 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:278:5
    |
278 | /     pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {
279 | |         let how = match how {
280 | |             Shutdown::Write => libc::SHUT_WR,
281 | |             Shutdown::Read => libc::SHUT_RD,
...   |
285 | |         Ok(())
286 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:288:5
    |
288 | /     pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {
289 | |         setsockopt(self, libc::IPPROTO_TCP, libc::TCP_NODELAY, nodelay as c_int)
290 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:288:5
    |
288 | /     pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {
289 | |         setsockopt(self, libc::IPPROTO_TCP, libc::TCP_NODELAY, nodelay as c_int)
290 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `bool` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:292:5
    |
292 | /     pub fn nodelay(&self) -> io::Result<bool> {
293 | |         let raw: c_int = getsockopt(self, libc::IPPROTO_TCP, libc::TCP_NODELAY)?;
294 | |         Ok(raw != 0)
295 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `bool`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:292:5
    |
292 | /     pub fn nodelay(&self) -> io::Result<bool> {
293 | |         let raw: c_int = getsockopt(self, libc::IPPROTO_TCP, libc::TCP_NODELAY)?;
294 | |         Ok(raw != 0)
295 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:297:5
    |
297 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
298 | |         let mut nonblocking = nonblocking as libc::c_int;
299 | |         cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(|_| ())
300 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:297:5
    |
297 | /     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
298 | |         let mut nonblocking = nonblocking as libc::c_int;
299 | |         cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(|_| ())
300 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<io::error::Error>` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:302:5
    |
302 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
303 | |         let raw: c_int = getsockopt(self, libc::SOL_SOCKET, libc::SO_ERROR)?;
304 | |         if raw == 0 {
305 | |             Ok(None)
...   |
308 | |         }
309 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<io::error::Error>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/net.rs:302:5
    |
302 | /     pub fn take_error(&self) -> io::Result<Option<io::Error>> {
303 | |         let raw: c_int = getsockopt(self, libc::SOL_SOCKET, libc::SO_ERROR)?;
304 | |         if raw == 0 {
305 | |             Ok(None)
...   |
308 | |         }
309 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/os.rs:33:5
   |
33 | /     fn from_vec(vec: Vec<u8>) -> OsString {
34 | |         FromInner::from_inner(Buf { inner: vec })
35 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/os.rs:36:5
   |
36 | /     fn into_vec(self) -> Vec<u8> {
37 | |         self.into_inner().inner
38 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `path::PathBuf` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:139:2
    |
139 |     fn next(&mut self) -> Option<PathBuf> { self.iter.next() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `path::PathBuf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:140:2
    |
140 |     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:166:2
    |
166 |       fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    |  _____^
167 | |         "path segment contains separator `:`".fmt(f)
168 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:166:2
    |
166 |       fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    |  _____^
167 | |         "path segment contains separator `:`".fmt(f)
168 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(ffi::os_str::OsString, ffi::os_str::OsString)` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:207:2
    |
207 |     fn next(&mut self) -> Option<(OsString, OsString)> { self.iter.next() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(ffi::os_str::OsString, ffi::os_str::OsString)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:208:2
    |
208 |     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `usize`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/os_str.rs:22:5
   |
22 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
23 | |         debug_fmt_bytestring(&self.inner, formatter)
24 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/os_str.rs:22:5
   |
22 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
23 | |         debug_fmt_bytestring(&self.inner, formatter)
24 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/os_str.rs:28:5
   |
28 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
29 | |         fmt::Display::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)
30 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/os_str.rs:28:5
   |
28 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
29 | |         fmt::Display::fmt(&Utf8Lossy::from_bytes(&self.inner), formatter)
30 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/os_str.rs:34:5
   |
34 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
35 | |         fmt::Debug::fmt(self.as_slice(), formatter)
36 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/os_str.rs:34:5
   |
34 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
35 | |         fmt::Debug::fmt(self.as_slice(), formatter)
36 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/os_str.rs:40:5
   |
40 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
41 | |         fmt::Display::fmt(self.as_slice(), formatter)
42 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/os_str.rs:40:5
   |
40 | /     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
41 | |         fmt::Display::fmt(self.as_slice(), formatter)
42 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `u8` cannot be known at compilation time
  --> libstd/sys/vxworks/os_str.rs:46:5
   |
46 | /     fn into_inner(self) -> Vec<u8> {
47 | |         self.inner
48 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `u8`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `alloc_crate::prelude::String` cannot be known at compilation time
   --> libstd/sys/vxworks/os_str.rs:104:5
    |
104 | /     pub fn into_string(self) -> Result<String, Buf> {
105 | |         String::from_utf8(self.inner).map_err(|p| Buf { inner: p.into_bytes() } )
106 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::prelude::String`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::os_str::Buf` cannot be known at compilation time
   --> libstd/sys/vxworks/os_str.rs:104:5
    |
104 | /     pub fn into_string(self) -> Result<String, Buf> {
105 | |         String::from_utf8(self.inner).map_err(|p| Buf { inner: p.into_bytes() } )
106 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::os_str::Buf`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `&str` cannot be known at compilation time
   --> libstd/sys/vxworks/os_str.rs:143:5
    |
143 | /     pub fn to_str(&self) -> Option<&str> {
144 | |         str::from_utf8(&self.inner).ok()
145 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `&str`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/pipe.rs:29:2
   |
29 |       pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {
   |  _____^
30 | |         self.0.read(buf)
31 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/pipe.rs:29:2
   |
29 |       pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {
   |  _____^
30 | |         self.0.read(buf)
31 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/pipe.rs:33:2
   |
33 |       pub fn write(&self, buf: &[u8]) -> io::Result<usize> {
   |  _____^
34 | |         self.0.write(buf)
35 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/pipe.rs:33:2
   |
33 |       pub fn write(&self, buf: &[u8]) -> io::Result<usize> {
   |  _____^
34 | |         self.0.write(buf)
35 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `*const i8` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:141:5
    |
141 | /     pub fn get_argv(&self) -> &Vec<*const c_char> {
142 | |         &self.argv.0
143 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `*const i8`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `ffi::c_str::CString` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:146:5
    |
146 | /     pub fn get_cwd(&self) -> &Option<CString> {
147 | |         &self.cwd
148 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `ffi::c_str::CString`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `u16` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:150:5
    |
150 | /     pub fn get_uid(&self) -> Option<uid_t> {
151 | |         self.uid
152 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u16`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `u16` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:154:5
    |
154 | /     pub fn get_gid(&self) -> Option<gid_t> {
155 | |         self.gid
156 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `u16`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `alloc_crate::boxed::Box<(dyn core::ops::FnMut<(), Output=core::result::Result<(), io::error::Error>> + core::marker::Send + core::marker::Sync + 'static)>` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:158:5
    |
158 | /     pub fn get_closures(&mut self) -> &mut Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>> {
159 | |         &mut self.closures
160 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `alloc_crate::boxed::Box<(dyn core::ops::FnMut<(), Output=core::result::Result<(), io::error::Error>> + core::marker::Send + core::marker::Sync + 'static)>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `alloc_crate::prelude::Vec`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:158:5
    |
158 | /     pub fn get_closures(&mut self) -> &mut Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>> {
159 | |         &mut self.closures
160 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:158:5
    |
158 | /     pub fn get_closures(&mut self) -> &mut Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>> {
159 | |         &mut self.closures
160 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:162:5
    |
162 | /     pub fn before_exec(&mut self,
163 | |                        f: Box<dyn FnMut() -> io::Result<()> + Send + Sync>) {
164 | |         self.closures.push(f);
165 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:162:5
    |
162 | /     pub fn before_exec(&mut self,
163 | |                        f: Box<dyn FnMut() -> io::Result<()> + Send + Sync>) {
164 | |         self.closures.push(f);
165 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::process::process_common::CStringArray` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:183:5
    |
183 | /     pub fn capture_env(&mut self) -> Option<CStringArray> {
184 | |         let maybe_env = self.env.capture_if_changed();
185 | |         maybe_env.map(|env| construct_envp(env, &mut self.saw_nul))
186 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::process::process_common::CStringArray`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `(sys::vxworks::process::process_common::StdioPipes, sys::vxworks::process::process_common::ChildPipes)` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:192:5
    |
192 | /     pub fn setup_io(&self, default: Stdio, needs_stdin: bool)
193 | |                 -> io::Result<(StdioPipes, ChildPipes)> {
194 | |         let null = Stdio::Null;
195 | |         let default_stdin = if needs_stdin {&default} else {&null};
...   |
212 | |         Ok((ours, theirs))
213 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(sys::vxworks::process::process_common::StdioPipes, sys::vxworks::process::process_common::ChildPipes)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:192:5
    |
192 | /     pub fn setup_io(&self, default: Stdio, needs_stdin: bool)
193 | |                 -> io::Result<(StdioPipes, ChildPipes)> {
194 | |         let null = Stdio::Null;
195 | |         let default_stdin = if needs_stdin {&default} else {&null};
...   |
212 | |         Ok((ours, theirs))
213 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(sys::vxworks::process::process_common::ChildStdio, core::option::Option<sys::vxworks::pipe::AnonPipe>)` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:271:5
    |
271 | /     pub fn to_child_stdio(&self, readable: bool)
272 | |                       -> io::Result<(ChildStdio, Option<AnonPipe>)> {
273 | |         match *self {
274 | |             Stdio::Inherit => {
...   |
313 | |         }
314 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(sys::vxworks::process::process_common::ChildStdio, core::option::Option<sys::vxworks::pipe::AnonPipe>)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:271:5
    |
271 | /     pub fn to_child_stdio(&self, readable: bool)
272 | |                       -> io::Result<(ChildStdio, Option<AnonPipe>)> {
273 | |         match *self {
274 | |             Stdio::Inherit => {
...   |
313 | |         }
314 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::pipe::AnonPipe` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:271:5
    |
271 | /     pub fn to_child_stdio(&self, readable: bool)
272 | |                       -> io::Result<(ChildStdio, Option<AnonPipe>)> {
273 | |         match *self {
274 | |             Stdio::Inherit => {
...   |
313 | |         }
314 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::pipe::AnonPipe`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `i32` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:330:5
    |
330 | /     pub fn fd(&self) -> Option<c_int> {
331 | |         match *self {
332 | |             ChildStdio::Inherit => None,
333 | |             ChildStdio::Explicit(fd) => Some(fd),
334 | |             ChildStdio::Owned(ref fd) => Some(fd.raw()),
335 | |         }
336 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `i32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:340:5
    |
340 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
341 | |         write!(f, "{:?}", self.program)?;
342 | |         for arg in &self.args {
343 | |             write!(f, " {:?}", arg)?;
344 | |         }
345 | |         Ok(())
346 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:340:5
    |
340 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
341 | |         write!(f, "{:?}", self.program)?;
342 | |         for arg in &self.args {
343 | |             write!(f, " {:?}", arg)?;
344 | |         }
345 | |         Ok(())
346 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `i32` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:366:5
    |
366 | /     pub fn code(&self) -> Option<i32> {
367 | |         if self.exited() {
368 | |             Some(unsafe { libc::WEXITSTATUS(self.0) })
369 | |         } else {
370 | |             None
371 | |         }
372 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `i32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `i32` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:374:5
    |
374 | /     pub fn signal(&self) -> Option<i32> {
375 | |         if !self.exited() {
376 | |             Some(unsafe { libc::WTERMSIG(self.0) })
377 | |         } else {
378 | |             None
379 | |         }
380 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `i32`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:390:5
    |
390 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
391 | |         if let Some(code) = self.code() {
392 | |             write!(f, "exit code: {}", code)
393 | |         } else {
...   |
396 | |         }
397 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:390:5
    |
390 | /     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
391 | |         if let Some(code) = self.code() {
392 | |             write!(f, "exit code: {}", code)
393 | |         } else {
...   |
396 | |         }
397 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `(sys::vxworks::process::process_inner::Process, sys::vxworks::process::process_common::StdioPipes)` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_vxworks.rs:25:5
    |
25  | /     pub fn spawn(&mut self, default: Stdio, needs_stdin: bool)
26  | |                  -> io::Result<(Process, StdioPipes)> {
27  | |         use sys::{self, cvt_r};
28  | |
...   |
102 | |         }
103 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `(sys::vxworks::process::process_inner::Process, sys::vxworks::process::process_common::StdioPipes)`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_vxworks.rs:25:5
    |
25  | /     pub fn spawn(&mut self, default: Stdio, needs_stdin: bool)
26  | |                  -> io::Result<(Process, StdioPipes)> {
27  | |         use sys::{self, cvt_r};
28  | |
...   |
102 | |         }
103 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_vxworks.rs:125:5
    |
125 | /     pub fn kill(&mut self) -> io::Result<()> {
126 | |         // If we've already waited on this process then the pid can be recycled
127 | |         // and used for another process, and we probably shouldn't be killing
128 | |         // random processes, so just return an error.
...   |
134 | |         }
135 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_vxworks.rs:125:5
    |
125 | /     pub fn kill(&mut self) -> io::Result<()> {
126 | |         // If we've already waited on this process then the pid can be recycled
127 | |         // and used for another process, and we probably shouldn't be killing
128 | |         // random processes, so just return an error.
...   |
134 | |         }
135 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::process::process_common::ExitStatus` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_vxworks.rs:137:5
    |
137 | /     pub fn wait(&mut self) -> io::Result<ExitStatus> {
138 | |         use sys::cvt_r;
139 | |         if let Some(status) = self.status {
140 | |             return Ok(status)
...   |
145 | |         Ok(ExitStatus::new(status))
146 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::process::process_common::ExitStatus`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_vxworks.rs:137:5
    |
137 | /     pub fn wait(&mut self) -> io::Result<ExitStatus> {
138 | |         use sys::cvt_r;
139 | |         if let Some(status) = self.status {
140 | |             return Ok(status)
...   |
145 | |         Ok(ExitStatus::new(status))
146 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::option::Option<sys::vxworks::process::process_common::ExitStatus>` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_vxworks.rs:148:5
    |
148 | /     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {
149 | |         if let Some(status) = self.status {
150 | |             return Ok(Some(status))
151 | |         }
...   |
161 | |         }
162 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::option::Option<sys::vxworks::process::process_common::ExitStatus>`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_vxworks.rs:148:5
    |
148 | /     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {
149 | |         if let Some(status) = self.status {
150 | |             return Ok(Some(status))
151 | |         }
...   |
161 | |         }
162 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::process::process_common::ExitStatus` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_vxworks.rs:148:5
    |
148 | /     pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {
149 | |         if let Some(status) = self.status {
150 | |             return Ok(Some(status))
151 | |         }
...   |
161 | |         }
162 | |     }
    | |_____^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::process::process_common::ExitStatus`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `sys::vxworks::stdio::Stdin` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:20:5
   |
20 |     pub fn new() -> io::Result<Stdin> { Ok(Stdin(())) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::stdio::Stdin`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:20:5
   |
20 |     pub fn new() -> io::Result<Stdin> { Ok(Stdin(())) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:22:5
   |
22 | /     pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {
23 | |         let fd = FileDesc::new(libc::STDIN_FILENO);
24 | |         let ret = fd.read(data);
25 | |         fd.into_raw();
26 | |         ret
27 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:22:5
   |
22 | /     pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {
23 | |         let fd = FileDesc::new(libc::STDIN_FILENO);
24 | |         let ret = fd.read(data);
25 | |         fd.into_raw();
26 | |         ret
27 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::stdio::Stdout` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:31:5
   |
31 |     pub fn new() -> io::Result<Stdout> { Ok(Stdout(())) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::stdio::Stdout`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:31:5
   |
31 |     pub fn new() -> io::Result<Stdout> { Ok(Stdout(())) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:33:5
   |
33 | /     pub fn write(&self, data: &[u8]) -> io::Result<usize> {
34 | |         let fd = FileDesc::new(libc::STDOUT_FILENO);
35 | |         let ret = fd.write(data);
36 | |         fd.into_raw();
37 | |         ret
38 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:33:5
   |
33 | /     pub fn write(&self, data: &[u8]) -> io::Result<usize> {
34 | |         let fd = FileDesc::new(libc::STDOUT_FILENO);
35 | |         let ret = fd.write(data);
36 | |         fd.into_raw();
37 | |         ret
38 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:40:5
   |
40 | /     pub fn flush(&self) -> io::Result<()> {
41 | |         Ok(())
42 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:40:5
   |
40 | /     pub fn flush(&self) -> io::Result<()> {
41 | |         Ok(())
42 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::stdio::Stderr` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:46:5
   |
46 |     pub fn new() -> io::Result<Stderr> { Ok(Stderr(())) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::stdio::Stderr`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:46:5
   |
46 |     pub fn new() -> io::Result<Stderr> { Ok(Stderr(())) }
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:48:5
   |
48 | /     pub fn write(&self, data: &[u8]) -> io::Result<usize> {
49 | |         let fd = FileDesc::new(libc::STDERR_FILENO);
50 | |         let ret = fd.write(data);
51 | |         fd.into_raw();
52 | |         ret
53 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:48:5
   |
48 | /     pub fn write(&self, data: &[u8]) -> io::Result<usize> {
49 | |         let fd = FileDesc::new(libc::STDERR_FILENO);
50 | |         let ret = fd.write(data);
51 | |         fd.into_raw();
52 | |         ret
53 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:55:5
   |
55 | /     pub fn flush(&self) -> io::Result<()> {
56 | |         Ok(())
57 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:55:5
   |
55 | /     pub fn flush(&self) -> io::Result<()> {
56 | |         Ok(())
57 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:64:5
   |
64 | /     fn write(&mut self, data: &[u8]) -> io::Result<usize> {
65 | |         Stderr::write(self, data)
66 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `usize`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:64:5
   |
64 | /     fn write(&mut self, data: &[u8]) -> io::Result<usize> {
65 | |         Stderr::write(self, data)
66 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:68:5
   |
68 | /     fn flush(&mut self) -> io::Result<()> {
69 | |         Stderr::flush(self)
70 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/stdio.rs:68:5
   |
68 | /     fn flush(&mut self) -> io::Result<()> {
69 | |         Stderr::flush(self)
70 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `sys::vxworks::thread::Thread` cannot be known at compilation time
  --> libstd/sys/vxworks/thread.rs:42:5
   |
42 | /     pub unsafe fn new<'a>(stack: usize, p: Box<dyn FnBox() + 'a>)
43 | |                           -> io::Result<Thread> {
44 | |         let p = box p;
45 | |         let mut native: libc::pthread_t = mem::zeroed();
...  |
82 | |         }
83 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `sys::vxworks::thread::Thread`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/thread.rs:42:5
   |
42 | /     pub unsafe fn new<'a>(stack: usize, p: Box<dyn FnBox() + 'a>)
43 | |                           -> io::Result<Thread> {
44 | |         let p = box p;
45 | |         let mut native: libc::pthread_t = mem::zeroed();
...  |
82 | |         }
83 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
  --> libstd/sys/vxworks/time.rs:17:5
   |
17 | /     fn sub_timespec(&self, other: &Timespec) -> Result<Duration, Duration> {
18 | |         if self >= other {
19 | |             Ok(if self.t.tv_nsec >= other.t.tv_nsec {
20 | |                 Duration::new((self.t.tv_sec - other.t.tv_sec) as u64,
...  |
32 | |         }
33 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
  --> libstd/sys/vxworks/time.rs:92:5
   |
92 | /     fn partial_cmp(&self, other: &Timespec) -> Option<Ordering> {
93 | |         Some(self.cmp(other))
94 | |     }
   | |_____^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/time.rs:159:9
    |
159 | /         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
160 | |             f.debug_struct("Instant")
161 | |              .field("tv_sec", &self.t.t.tv_sec)
162 | |              .field("tv_nsec", &self.t.t.tv_nsec)
163 | |              .finish()
164 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/time.rs:159:9
    |
159 | /         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
160 | |             f.debug_struct("Instant")
161 | |              .field("tv_sec", &self.t.t.tv_sec)
162 | |              .field("tv_nsec", &self.t.t.tv_nsec)
163 | |              .finish()
164 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::time::Duration` cannot be known at compilation time
   --> libstd/sys/vxworks/time.rs:172:9
    |
172 | /         pub fn sub_time(&self, other: &SystemTime)
173 | |                         -> Result<Duration, Duration> {
174 | |             self.t.sub_timespec(&other.t)
175 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::time::Duration`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/time.rs:193:9
    |
193 | /         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
194 | |             f.debug_struct("SystemTime")
195 | |              .field("tv_sec", &self.t.t.tv_sec)
196 | |              .field("tv_nsec", &self.t.t.tv_nsec)
197 | |              .finish()
198 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/time.rs:193:9
    |
193 | /         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
194 | |             f.debug_struct("SystemTime")
195 | |              .field("tv_sec", &self.t.t.tv_sec)
196 | |              .field("tv_nsec", &self.t.t.tv_nsec)
197 | |              .finish()
198 | |         }
    | |_________^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:11:10
   |
11 | #[derive(Debug)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fd.rs:11:10
   |
11 | #[derive(Debug)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:45:17
   |
45 | #[derive(Clone, Debug)]
   |                 ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:45:17
   |
45 | #[derive(Clone, Debug)]
   |                 ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:59:32
   |
59 | #[derive(Clone, PartialEq, Eq, Debug)]
   |                                ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:59:32
   |
59 | #[derive(Clone, PartialEq, Eq, Debug)]
   |                                ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:62:44
   |
62 | #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
   |                                            ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:62:44
   |
62 | #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
   |                                            ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:65:10
   |
65 | #[derive(Debug)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `()`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
  --> libstd/sys/vxworks/fs.rs:65:10
   |
65 | #[derive(Debug)]
   |          ^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
   = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:143:10
    |
143 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/os.rs:143:10
    |
143 | #[derive(Debug)]
    |          ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:350:38
    |
350 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:350:38
    |
350 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:400:38
    |
400 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/process/process_common.rs:400:38
    |
400 | #[derive(PartialEq, Eq, Clone, Copy, Debug)]
    |                                      ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/sys/vxworks/time.rs:119:42
    |
119 |     #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |                                          ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/sys/vxworks/time.rs:124:42
    |
124 |     #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    |                                          ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `()` cannot be known at compilation time
   --> libstd/sys/vxworks/mod.rs:131:55
    |
131 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]
    |                                                       ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `()`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::fmt::Error` cannot be known at compilation time
   --> libstd/sys/vxworks/mod.rs:131:55
    |
131 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]
    |                                                       ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::fmt::Error`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::result::Result`

error[E0277]: the size for values of type `core::cmp::Ordering` cannot be known at compilation time
   --> libstd/sys/vxworks/mod.rs:131:38
    |
131 | #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]
    |                                      ^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `core::marker::Sized` is not implemented for `core::cmp::Ordering`
    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
    = note: required by `core::option::Option`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/io/mod.rs:2198:13
     |
2198 | /             fn read(&mut self, _: &mut [u8]) -> io::Result<usize> {
2199 | |                 Err(io::Error::new(io::ErrorKind::Other, ""))
2200 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:2198:13
     |
2198 | /             fn read(&mut self, _: &mut [u8]) -> io::Result<usize> {
2199 | |                 Err(io::Error::new(io::ErrorKind::Other, ""))
2200 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `&[u8]` cannot be known at compilation time
    --> libstd/io/mod.rs:2203:13
     |
2203 | /             fn fill_buf(&mut self) -> io::Result<&[u8]> {
2204 | |                 Err(io::Error::new(io::ErrorKind::Other, ""))
2205 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `&[u8]`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/mod.rs:2203:13
     |
2203 | /             fn fill_buf(&mut self) -> io::Result<&[u8]> {
2204 | |                 Err(io::Error::new(io::ErrorKind::Other, ""))
2205 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/io/buffered.rs:1267:13
     |
1267 | /             fn write(&mut self, _: &[u8]) -> io::Result<usize> {
1268 | |                 WRITES.fetch_add(1, Ordering::SeqCst);
1269 | |                 panic!();
1270 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/buffered.rs:1267:13
     |
1267 | /             fn write(&mut self, _: &[u8]) -> io::Result<usize> {
1268 | |                 WRITES.fetch_add(1, Ordering::SeqCst);
1269 | |                 panic!();
1270 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/buffered.rs:1271:13
     |
1271 |             fn flush(&mut self) -> io::Result<()> { Ok(()) }
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/buffered.rs:1271:13
     |
1271 |             fn flush(&mut self) -> io::Result<()> { Ok(()) }
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/io/buffered.rs:1245:13
     |
1245 |             fn write(&mut self, buf: &[u8]) -> io::Result<usize> { Ok(buf.len()) }
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/buffered.rs:1245:13
     |
1245 |             fn write(&mut self, buf: &[u8]) -> io::Result<usize> { Ok(buf.len()) }
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/buffered.rs:1246:13
     |
1246 | /             fn flush(&mut self) -> io::Result<()> {
1247 | |                 Err(io::Error::last_os_error())
1248 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/buffered.rs:1246:13
     |
1246 | /             fn flush(&mut self) -> io::Result<()> {
1247 | |                 Err(io::Error::last_os_error())
1248 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/io/buffered.rs:1157:13
     |
1157 | /             fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
1158 | |                 self.0.extend_from_slice(buf);
1159 | |                 Ok(buf.len())
1160 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/buffered.rs:1157:13
     |
1157 | /             fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
1158 | |                 self.0.extend_from_slice(buf);
1159 | |                 Ok(buf.len())
1160 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `()` cannot be known at compilation time
    --> libstd/io/buffered.rs:1161:13
     |
1161 | /             fn flush(&mut self) -> io::Result<()> {
1162 | |                 Err(io::Error::new(io::ErrorKind::Other, "flush failed"))
1163 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `()`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/buffered.rs:1161:13
     |
1161 | /             fn flush(&mut self) -> io::Result<()> {
1162 | |                 Err(io::Error::new(io::ErrorKind::Other, "flush failed"))
1163 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `usize` cannot be known at compilation time
    --> libstd/io/buffered.rs:1036:13
     |
1036 | /             fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
1037 | |                 let len = buf.len();
1038 | |                 for x in buf {
1039 | |                     *x = self.pos as u8;
...    |
1042 | |                 Ok(len)
1043 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `usize`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/buffered.rs:1036:13
     |
1036 | /             fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
1037 | |                 let len = buf.len();
1038 | |                 for x in buf {
1039 | |                     *x = self.pos as u8;
...    |
1042 | |                 Ok(len)
1043 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `u64` cannot be known at compilation time
    --> libstd/io/buffered.rs:1046:13
     |
1046 | /             fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {
1047 | |                 match pos {
1048 | |                     SeekFrom::Start(n) => {
1049 | |                         self.pos = n;
...    |
1058 | |                 Ok(self.pos)
1059 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `u64`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error[E0277]: the size for values of type `io::error::Error` cannot be known at compilation time
    --> libstd/io/buffered.rs:1046:13
     |
1046 | /             fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {
1047 | |                 match pos {
1048 | |                     SeekFrom::Start(n) => {
1049 | |                         self.pos = n;
...    |
1058 | |                 Ok(self.pos)
1059 | |             }
     | |_____________^ doesn't have a size known at compile-time
     |
     = help: the trait `core::marker::Sized` is not implemented for `io::error::Error`
     = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>
     = note: required by `core::result::Result`

error: aborting due to 2774 previous errors

Some errors occurred: E0038, E0277, E0307.
For more information about an error, try `rustc --explain E0038`.
error: Could not compile `std`.

Caused by:
  process didn't exit successfully: `rustc --crate-name std libstd/lib.rs --color never --emit=dep-info,link -C prefer-dynamic -C debug-assertions=off -C overflow-checks=on --test -C metadata=ae914bea23e0de01 -C extra-filename=-ae914bea23e0de01 --out-dir /home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps --target x86_64-wrs-vxworks -C incremental=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/incremental -L dependency=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps -L dependency=/home/tlee1/Desktop/rust-fork/rust/src/target/debug/deps --extern alloc=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liballoc-58699d47e1d601fc.rlib --extern alloc_system=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liballoc_system-99a1dd99723ef263.rlib --extern compiler_builtins=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libcompiler_builtins-36a89d421cedafe5.rlib --extern core=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libcore-ff9a91e1f7203b8f.rlib --extern libc=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/liblibc-b1617f6f761d60e4.rlib --extern panic_abort=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libpanic_abort-10b284ce029239e8.rlib --extern rand=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/librand-cfc9de41ae25b691.rlib --extern unwind=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/deps/libunwind-6ebea276b1044f94.rlib -C opt-level=0 -C debuginfo=2 --sysroot /home/tlee1/.xargo -L native=/home/tlee1/Desktop/rust-fork/rust/src/target/x86_64-wrs-vxworks/debug/build/compiler_builtins-d1f119b0d77c7209/out` (exit code: 1)
